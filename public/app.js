/*! For license information please see app.js.LICENSE.txt */
(self.webpackChunk=self.webpackChunk||[]).push([[260],{9038:(e,t,n)=>{function r(e){return e&&"object"==typeof e&&"default"in e?e.default:e}var o=r(n(2307)),i=n(9812),a=r(n(3465)),l=n(9680);function s(){return(s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function u(){var e=[].slice.call(arguments),t="string"==typeof e[0]?e[0]:null,n=("string"==typeof e[0]?e[1]:e[0])||{},r=t?l.Inertia.restore(t):null,u=a(n),c=null,f=null,p=function(e){return e},d=i.reactive(s({},r?r.data:n,{isDirty:!1,errors:r?r.errors:{},hasErrors:!1,processing:!1,progress:null,wasSuccessful:!1,recentlySuccessful:!1,data:function(){var e=this;return Object.keys(n).reduce((function(t,n){return t[n]=e[n],t}),{})},transform:function(e){return p=e,this},defaults:function(e,t){var n;return u=void 0===e?this.data():Object.assign({},a(u),t?((n={})[e]=t,n):e),this},reset:function(){var e=[].slice.call(arguments),t=a(u);return Object.assign(this,0===e.length?t:Object.keys(t).filter((function(t){return e.includes(t)})).reduce((function(e,n){return e[n]=t[n],e}),{})),this},setError:function(e,t){var n;return Object.assign(this.errors,t?((n={})[e]=t,n):e),this.hasErrors=Object.keys(this.errors).length>0,this},clearErrors:function(){var e=this,t=[].slice.call(arguments);return this.errors=Object.keys(this.errors).reduce((function(n,r){var o;return s({},n,t.length>0&&!t.includes(r)?((o={})[r]=e.errors[r],o):{})}),{}),this.hasErrors=Object.keys(this.errors).length>0,this},submit:function(e,t,n){var r=this,o=this;void 0===n&&(n={});var i=p(this.data()),d=s({},n,{onCancelToken:function(e){if(c=e,n.onCancelToken)return n.onCancelToken(e)},onBefore:function(e){if(o.wasSuccessful=!1,o.recentlySuccessful=!1,clearTimeout(f),n.onBefore)return n.onBefore(e)},onStart:function(e){if(o.processing=!0,n.onStart)return n.onStart(e)},onProgress:function(e){if(o.progress=e,n.onProgress)return n.onProgress(e)},onSuccess:function(e){try{var t=function(e){return u=a(r.data()),r.isDirty=!1,e};return r.processing=!1,r.progress=null,r.clearErrors(),r.wasSuccessful=!0,r.recentlySuccessful=!0,f=setTimeout((function(){return r.recentlySuccessful=!1}),2e3),Promise.resolve(n.onSuccess?Promise.resolve(n.onSuccess(e)).then(t):t(null))}catch(e){return Promise.reject(e)}},onError:function(e){if(o.processing=!1,o.progress=null,o.clearErrors().setError(e),n.onError)return n.onError(e)},onCancel:function(){if(o.processing=!1,o.progress=null,n.onCancel)return n.onCancel()},onFinish:function(){if(o.processing=!1,o.progress=null,c=null,n.onFinish)return n.onFinish()}});"delete"===e?l.Inertia.delete(t,s({},d,{data:i})):l.Inertia[e](t,i,d)},get:function(e,t){this.submit("get",e,t)},post:function(e,t){this.submit("post",e,t)},put:function(e,t){this.submit("put",e,t)},patch:function(e,t){this.submit("patch",e,t)},delete:function(e,t){this.submit("delete",e,t)},cancel:function(){c&&c.cancel()},__rememberable:null===t,__remember:function(){return{data:this.data(),errors:this.errors}},__restore:function(e){Object.assign(this,e.data),this.setError(e.errors)}}));return i.watch(d,(function(e){d.isDirty=!o(d.data(),u),t&&l.Inertia.remember(a(e.__remember()),t)}),{immediate:!0,deep:!0}),d}var c={created:function(){var e=this;if(this.$options.remember){Array.isArray(this.$options.remember)&&(this.$options.remember={data:this.$options.remember}),"string"==typeof this.$options.remember&&(this.$options.remember={data:[this.$options.remember]}),"string"==typeof this.$options.remember.data&&(this.$options.remember={data:[this.$options.remember.data]});var t=this.$options.remember.key instanceof Function?this.$options.remember.key.call(this):this.$options.remember.key,n=l.Inertia.restore(t),r=this.$options.remember.data.filter((function(t){return!(null!==e[t]&&"object"==typeof e[t]&&!1===e[t].__rememberable)})),o=function(t){return null!==e[t]&&"object"==typeof e[t]&&"function"==typeof e[t].__remember&&"function"==typeof e[t].__restore};r.forEach((function(i){void 0!==e[i]&&void 0!==n&&void 0!==n[i]&&(o(i)?e[i].__restore(n[i]):e[i]=n[i]),e.$watch(i,(function(){l.Inertia.remember(r.reduce((function(t,n){var r;return s({},t,((r={})[n]=a(o(n)?e[n].__remember():e[n]),r))}),{}),t)}),{immediate:!0,deep:!0})}))}}},f=i.ref(null),p=i.ref({}),d=i.ref(null),h=null,y={name:"Inertia",props:{initialPage:{type:Object,required:!0},initialComponent:{type:Object,required:!1},resolveComponent:{type:Function,required:!1},titleCallback:{type:Function,required:!1,default:function(e){return e}},onHeadUpdate:{type:Function,required:!1,default:function(){return function(){}}}},setup:function(e){var t=e.initialPage,n=e.initialComponent,r=e.resolveComponent,o=e.titleCallback,a=e.onHeadUpdate;f.value=n?i.markRaw(n):null,p.value=t,d.value=null;var u="undefined"==typeof window;return h=l.createHeadManager(u,o,a),u||l.Inertia.init({initialPage:t,resolveComponent:r,swapComponent:function(e){try{return f.value=i.markRaw(e.component),p.value=e.page,d.value=e.preserveState?d.value:Date.now(),Promise.resolve()}catch(e){return Promise.reject(e)}}}),function(){if(f.value){f.value.inheritAttrs=!!f.value.inheritAttrs;var e=i.h(f.value,s({},p.value.props,{key:d.value}));return f.value.layout?"function"==typeof f.value.layout?f.value.layout(i.h,e):(Array.isArray(f.value.layout)?f.value.layout:[f.value.layout]).concat(e).reverse().reduce((function(e,t){return t.inheritAttrs=!!t.inheritAttrs,i.h(t,s({},p.value.props),(function(){return e}))})):e}}}},v={install:function(e){l.Inertia.form=u,Object.defineProperty(e.config.globalProperties,"$inertia",{get:function(){return l.Inertia}}),Object.defineProperty(e.config.globalProperties,"$page",{get:function(){return p.value}}),Object.defineProperty(e.config.globalProperties,"$headManager",{get:function(){return h}}),e.mixin(c)}},m={props:{title:{type:String,required:!1}},data:function(){return{provider:this.$headManager.createProvider()}},beforeUnmount:function(){this.provider.disconnect()},methods:{isUnaryTag:function(e){return["area","base","br","col","embed","hr","img","input","keygen","link","meta","param","source","track","wbr"].indexOf(e.type)>-1},renderTagStart:function(e){e.props=e.props||{},e.props.inertia=void 0!==e.props["head-key"]?e.props["head-key"]:"";var t=Object.keys(e.props).reduce((function(t,n){var r=e.props[n];return["key","head-key"].includes(n)?t:""===r?t+" "+n:t+" "+n+'="'+r+'"'}),"");return"<"+e.type+t+">"},renderTagChildren:function(e){var t=this;return"string"==typeof e.children?e.children:e.children.reduce((function(e,n){return e+t.renderTag(n)}),"")},renderTag:function(e){if("Symbol(Text)"===e.type.toString())return e.children;if("Symbol()"===e.type.toString())return"";if("Symbol(Comment)"===e.type.toString())return"";var t=this.renderTagStart(e);return e.children&&(t+=this.renderTagChildren(e)),this.isUnaryTag(e)||(t+="</"+e.type+">"),t},addTitleElement:function(e){return this.title&&!e.find((function(e){return e.startsWith("<title")}))&&e.push("<title inertia>"+this.title+"</title>"),e},renderNodes:function(e){var t=this;return this.addTitleElement(e.flatMap((function(e){return"Symbol(Fragment)"===e.type.toString()?e.children:e})).map((function(e){return t.renderTag(e)})).filter((function(e){return e})))}},render:function(){this.provider.update(this.renderNodes(this.$slots.default?this.$slots.default():[]))}},g={name:"InertiaLink",props:{as:{type:String,default:"a"},data:{type:Object,default:function(){return{}}},href:{type:String},method:{type:String,default:"get"},replace:{type:Boolean,default:!1},preserveScroll:{type:Boolean,default:!1},preserveState:{type:Boolean,default:null},only:{type:Array,default:function(){return[]}},headers:{type:Object,default:function(){return{}}},queryStringArrayFormat:{type:String,default:"brackets"}},setup:function(e,t){var n=t.slots,r=t.attrs;return function(e){var t=e.as.toLowerCase(),o=e.method.toLowerCase(),a=l.mergeDataIntoQueryString(o,e.href||"",e.data,e.queryStringArrayFormat),u=a[0],c=a[1];return"a"===t&&"get"!==o&&console.warn('Creating POST/PUT/PATCH/DELETE <a> links is discouraged as it causes "Open Link in New Tab/Window" accessibility issues.\n\nPlease specify a more appropriate element using the "as" attribute. For example:\n\n<Link href="'+u+'" method="'+o+'" as="button">...</Link>'),i.h(e.as,s({},r,"a"===t?{href:u}:{},{onClick:function(t){var n;l.shouldIntercept(t)&&(t.preventDefault(),l.Inertia.visit(u,{data:c,method:o,replace:e.replace,preserveScroll:e.preserveScroll,preserveState:null!=(n=e.preserveState)?n:"get"!==o,only:e.only,headers:e.headers,onCancelToken:r.onCancelToken||function(){return{}},onBefore:r.onBefore||function(){return{}},onStart:r.onStart||function(){return{}},onProgress:r.onProgress||function(){return{}},onFinish:r.onFinish||function(){return{}},onCancel:r.onCancel||function(){return{}},onSuccess:r.onSuccess||function(){return{}},onError:r.onError||function(){return{}}}))}}),n)}}};t.rU=g,t.yP=function(e){try{var t,n,r,o,a,l,s;n=void 0===(t=e.id)?"app":t,r=e.resolve,o=e.setup,a=e.title,l=e.page,s=e.render;var u="undefined"==typeof window,c=u?null:document.getElementById(n),f=l||JSON.parse(c.dataset.page),p=function(e){return Promise.resolve(r(e)).then((function(e){return e.default||e}))},d=[];return Promise.resolve(p(f.component).then((function(e){return o({el:c,app:y,App:y,props:{initialPage:f,initialComponent:e,resolveComponent:p,titleCallback:a,onHeadUpdate:u?function(e){return d=e}:null},plugin:v})}))).then((function(e){return function(){if(u)return Promise.resolve(s(i.createSSRApp({render:function(){return i.h("div",{id:n,"data-page":JSON.stringify(f),innerHTML:s(e)})}}))).then((function(e){return{head:d,body:e}}))}()}))}catch(e){return Promise.reject(e)}}},9680:(e,t,n)=>{function r(e){return e&&"object"==typeof e&&"default"in e?e.default:e}var o=r(n(9669)),i=n(3454),a=r(n(9996));function l(){return(l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var s,u={modal:null,listener:null,show:function(e){var t=this;"object"==typeof e&&(e="All Inertia requests must receive a valid Inertia response, however a plain JSON response was received.<hr>"+JSON.stringify(e));var n=document.createElement("html");n.innerHTML=e,n.querySelectorAll("a").forEach((function(e){return e.setAttribute("target","_top")})),this.modal=document.createElement("div"),this.modal.style.position="fixed",this.modal.style.width="100vw",this.modal.style.height="100vh",this.modal.style.padding="50px",this.modal.style.boxSizing="border-box",this.modal.style.backgroundColor="rgba(0, 0, 0, .6)",this.modal.style.zIndex=2e5,this.modal.addEventListener("click",(function(){return t.hide()}));var r=document.createElement("iframe");if(r.style.backgroundColor="white",r.style.borderRadius="5px",r.style.width="100%",r.style.height="100%",this.modal.appendChild(r),document.body.prepend(this.modal),document.body.style.overflow="hidden",!r.contentWindow)throw new Error("iframe not yet ready.");r.contentWindow.document.open(),r.contentWindow.document.write(n.outerHTML),r.contentWindow.document.close(),this.listener=this.hideOnEscape.bind(this),document.addEventListener("keydown",this.listener)},hide:function(){this.modal.outerHTML="",this.modal=null,document.body.style.overflow="visible",document.removeEventListener("keydown",this.listener)},hideOnEscape:function(e){27===e.keyCode&&this.hide()}};function c(e,t){var n;return function(){var r=arguments,o=this;clearTimeout(n),n=setTimeout((function(){return e.apply(o,[].slice.call(r))}),t)}}function f(e,t,n){for(var r in void 0===t&&(t=new FormData),void 0===n&&(n=null),e=e||{})Object.prototype.hasOwnProperty.call(e,r)&&d(t,p(n,r),e[r]);return t}function p(e,t){return e?e+"["+t+"]":t}function d(e,t,n){return Array.isArray(n)?Array.from(n.keys()).forEach((function(r){return d(e,p(t,r.toString()),n[r])})):n instanceof Date?e.append(t,n.toISOString()):n instanceof File?e.append(t,n,n.name):n instanceof Blob?e.append(t,n):"boolean"==typeof n?e.append(t,n?"1":"0"):"string"==typeof n?e.append(t,n):"number"==typeof n?e.append(t,""+n):null==n?e.append(t,""):void f(n,e,t)}function h(e){return new URL(e.toString(),window.location.toString())}function y(e,n,r,o){void 0===o&&(o="brackets");var l=/^https?:\/\//.test(n.toString()),s=l||n.toString().startsWith("/"),u=!s&&!n.toString().startsWith("#")&&!n.toString().startsWith("?"),c=n.toString().includes("?")||e===t.Method.GET&&Object.keys(r).length,f=n.toString().includes("#"),p=new URL(n.toString(),"http://localhost");return e===t.Method.GET&&Object.keys(r).length&&(p.search=i.stringify(a(i.parse(p.search,{ignoreQueryPrefix:!0}),r),{encodeValuesOnly:!0,arrayFormat:o}),r={}),[[l?p.protocol+"//"+p.host:"",s?p.pathname:"",u?p.pathname.substring(1):"",c?p.search:"",f?p.hash:""].join(""),r]}function v(e){return(e=new URL(e.href)).hash="",e}function m(e,t){return document.dispatchEvent(new CustomEvent("inertia:"+e,t))}(s=t.Method||(t.Method={})).GET="get",s.POST="post",s.PUT="put",s.PATCH="patch",s.DELETE="delete";var g=function(e){return m("finish",{detail:{visit:e}})},b=function(e){return m("navigate",{detail:{page:e}})},_="undefined"==typeof window,w=function(){function e(){this.visitId=null}var n=e.prototype;return n.init=function(e){var t=e.resolveComponent,n=e.swapComponent;this.page=e.initialPage,this.resolveComponent=t,this.swapComponent=n,this.isBackForwardVisit()?this.handleBackForwardVisit(this.page):this.isLocationVisit()?this.handleLocationVisit(this.page):this.handleInitialPageVisit(this.page),this.setupEventListeners()},n.handleInitialPageVisit=function(e){this.page.url+=window.location.hash,this.setPage(e,{preserveState:!0}).then((function(){return b(e)}))},n.setupEventListeners=function(){window.addEventListener("popstate",this.handlePopstateEvent.bind(this)),document.addEventListener("scroll",c(this.handleScrollEvent.bind(this),100),!0)},n.scrollRegions=function(){return document.querySelectorAll("[scroll-region]")},n.handleScrollEvent=function(e){"function"==typeof e.target.hasAttribute&&e.target.hasAttribute("scroll-region")&&this.saveScrollPositions()},n.saveScrollPositions=function(){this.replaceState(l({},this.page,{scrollRegions:Array.from(this.scrollRegions()).map((function(e){return{top:e.scrollTop,left:e.scrollLeft}}))}))},n.resetScrollPositions=function(){var e;document.documentElement.scrollTop=0,document.documentElement.scrollLeft=0,this.scrollRegions().forEach((function(e){e.scrollTop=0,e.scrollLeft=0})),this.saveScrollPositions(),window.location.hash&&(null==(e=document.getElementById(window.location.hash.slice(1)))||e.scrollIntoView())},n.restoreScrollPositions=function(){var e=this;this.page.scrollRegions&&this.scrollRegions().forEach((function(t,n){var r=e.page.scrollRegions[n];r&&(t.scrollTop=r.top,t.scrollLeft=r.left)}))},n.isBackForwardVisit=function(){return window.history.state&&window.performance&&window.performance.getEntriesByType("navigation").length>0&&"back_forward"===window.performance.getEntriesByType("navigation")[0].type},n.handleBackForwardVisit=function(e){var t=this;window.history.state.version=e.version,this.setPage(window.history.state,{preserveScroll:!0,preserveState:!0}).then((function(){t.restoreScrollPositions(),b(e)}))},n.locationVisit=function(e,t){try{window.sessionStorage.setItem("inertiaLocationVisit",JSON.stringify({preserveScroll:t})),window.location.href=e.href,v(window.location).href===v(e).href&&window.location.reload()}catch(e){return!1}},n.isLocationVisit=function(){try{return null!==window.sessionStorage.getItem("inertiaLocationVisit")}catch(e){return!1}},n.handleLocationVisit=function(e){var t,n,r,o,i=this,a=JSON.parse(window.sessionStorage.getItem("inertiaLocationVisit")||"");window.sessionStorage.removeItem("inertiaLocationVisit"),e.url+=window.location.hash,e.rememberedState=null!=(t=null==(n=window.history.state)?void 0:n.rememberedState)?t:{},e.scrollRegions=null!=(r=null==(o=window.history.state)?void 0:o.scrollRegions)?r:[],this.setPage(e,{preserveScroll:a.preserveScroll,preserveState:!0}).then((function(){a.preserveScroll&&i.restoreScrollPositions(),b(e)}))},n.isLocationVisitResponse=function(e){return e&&409===e.status&&e.headers["x-inertia-location"]},n.isInertiaResponse=function(e){return null==e?void 0:e.headers["x-inertia"]},n.createVisitId=function(){return this.visitId={},this.visitId},n.cancelVisit=function(e,t){var n=t.cancelled,r=void 0!==n&&n,o=t.interrupted,i=void 0!==o&&o;!e||e.completed||e.cancelled||e.interrupted||(e.cancelToken.cancel(),e.onCancel(),e.completed=!1,e.cancelled=r,e.interrupted=i,g(e),e.onFinish(e))},n.finishVisit=function(e){e.cancelled||e.interrupted||(e.completed=!0,e.cancelled=!1,e.interrupted=!1,g(e),e.onFinish(e))},n.resolvePreserveOption=function(e,t){return"function"==typeof e?e(t):"errors"===e?Object.keys(t.props.errors||{}).length>0:e},n.visit=function(e,n){var r=this,i=void 0===n?{}:n,a=i.method,s=void 0===a?t.Method.GET:a,c=i.data,p=void 0===c?{}:c,d=i.replace,g=void 0!==d&&d,b=i.preserveScroll,_=void 0!==b&&b,w=i.preserveState,O=void 0!==w&&w,k=i.only,S=void 0===k?[]:k,x=i.headers,E=void 0===x?{}:x,j=i.errorBag,A=void 0===j?"":j,P=i.forceFormData,T=void 0!==P&&P,C=i.onCancelToken,N=void 0===C?function(){}:C,q=i.onBefore,L=void 0===q?function(){}:q,R=i.onStart,I=void 0===R?function(){}:R,M=i.onProgress,D=void 0===M?function(){}:M,U=i.onFinish,B=void 0===U?function(){}:U,F=i.onCancel,$=void 0===F?function(){}:F,V=i.onSuccess,H=void 0===V?function(){}:V,z=i.onError,W=void 0===z?function(){}:z,K=i.queryStringArrayFormat,Z=void 0===K?"brackets":K,Y="string"==typeof e?h(e):e;if(!function e(t){return t instanceof File||t instanceof Blob||t instanceof FileList&&t.length>0||t instanceof FormData&&Array.from(t.values()).some((function(t){return e(t)}))||"object"==typeof t&&null!==t&&Object.values(t).some((function(t){return e(t)}))}(p)&&!T||p instanceof FormData||(p=f(p)),!(p instanceof FormData)){var G=y(s,Y,p,Z),J=G[1];Y=h(G[0]),p=J}var X={url:Y,method:s,data:p,replace:g,preserveScroll:_,preserveState:O,only:S,headers:E,errorBag:A,forceFormData:T,queryStringArrayFormat:Z,cancelled:!1,completed:!1,interrupted:!1};if(!1!==L(X)&&function(e){return m("before",{cancelable:!0,detail:{visit:e}})}(X)){this.activeVisit&&this.cancelVisit(this.activeVisit,{interrupted:!0}),this.saveScrollPositions();var Q=this.createVisitId();this.activeVisit=l({},X,{onCancelToken:N,onBefore:L,onStart:I,onProgress:D,onFinish:B,onCancel:$,onSuccess:H,onError:W,queryStringArrayFormat:Z,cancelToken:o.CancelToken.source()}),N({cancel:function(){r.activeVisit&&r.cancelVisit(r.activeVisit,{cancelled:!0})}}),function(e){m("start",{detail:{visit:e}})}(X),I(X),o({method:s,url:v(Y).href,data:s===t.Method.GET?{}:p,params:s===t.Method.GET?p:{},cancelToken:this.activeVisit.cancelToken.token,headers:l({},E,{Accept:"text/html, application/xhtml+xml","X-Requested-With":"XMLHttpRequest","X-Inertia":!0},S.length?{"X-Inertia-Partial-Component":this.page.component,"X-Inertia-Partial-Data":S.join(",")}:{},A&&A.length?{"X-Inertia-Error-Bag":A}:{},this.page.version?{"X-Inertia-Version":this.page.version}:{}),onUploadProgress:function(e){p instanceof FormData&&(e.percentage=Math.round(e.loaded/e.total*100),function(e){m("progress",{detail:{progress:e}})}(e),D(e))}}).then((function(e){var t;if(!r.isInertiaResponse(e))return Promise.reject({response:e});var n=e.data;S.length&&n.component===r.page.component&&(n.props=l({},r.page.props,n.props)),_=r.resolvePreserveOption(_,n),(O=r.resolvePreserveOption(O,n))&&null!=(t=window.history.state)&&t.rememberedState&&n.component===r.page.component&&(n.rememberedState=window.history.state.rememberedState);var o=Y,i=h(n.url);return o.hash&&!i.hash&&v(o).href===i.href&&(i.hash=o.hash,n.url=i.href),r.setPage(n,{visitId:Q,replace:g,preserveScroll:_,preserveState:O})})).then((function(){var e=r.page.props.errors||{};if(Object.keys(e).length>0){var t=A?e[A]?e[A]:{}:e;return function(e){m("error",{detail:{errors:e}})}(t),W(t)}return m("success",{detail:{page:r.page}}),H(r.page)})).catch((function(e){if(r.isInertiaResponse(e.response))return r.setPage(e.response.data,{visitId:Q});if(r.isLocationVisitResponse(e.response)){var t=h(e.response.headers["x-inertia-location"]),n=Y;n.hash&&!t.hash&&v(n).href===t.href&&(t.hash=n.hash),r.locationVisit(t,!0===_)}else{if(!e.response)return Promise.reject(e);m("invalid",{cancelable:!0,detail:{response:e.response}})&&u.show(e.response.data)}})).then((function(){r.activeVisit&&r.finishVisit(r.activeVisit)})).catch((function(e){if(!o.isCancel(e)){var t=m("exception",{cancelable:!0,detail:{exception:e}});if(r.activeVisit&&r.finishVisit(r.activeVisit),t)return Promise.reject(e)}}))}},n.setPage=function(e,t){var n=this,r=void 0===t?{}:t,o=r.visitId,i=void 0===o?this.createVisitId():o,a=r.replace,l=void 0!==a&&a,s=r.preserveScroll,u=void 0!==s&&s,c=r.preserveState,f=void 0!==c&&c;return Promise.resolve(this.resolveComponent(e.component)).then((function(t){i===n.visitId&&(e.scrollRegions=e.scrollRegions||[],e.rememberedState=e.rememberedState||{},(l=l||h(e.url).href===window.location.href)?n.replaceState(e):n.pushState(e),n.swapComponent({component:t,page:e,preserveState:f}).then((function(){u||n.resetScrollPositions(),l||b(e)})))}))},n.pushState=function(e){this.page=e,window.history.pushState(e,"",e.url)},n.replaceState=function(e){this.page=e,window.history.replaceState(e,"",e.url)},n.handlePopstateEvent=function(e){var t=this;if(null!==e.state){var n=e.state,r=this.createVisitId();Promise.resolve(this.resolveComponent(n.component)).then((function(e){r===t.visitId&&(t.page=n,t.swapComponent({component:e,page:n,preserveState:!1}).then((function(){t.restoreScrollPositions(),b(n)})))}))}else{var o=h(this.page.url);o.hash=window.location.hash,this.replaceState(l({},this.page,{url:o.href})),this.resetScrollPositions()}},n.get=function(e,n,r){return void 0===n&&(n={}),void 0===r&&(r={}),this.visit(e,l({},r,{method:t.Method.GET,data:n}))},n.reload=function(e){return void 0===e&&(e={}),this.visit(window.location.href,l({},e,{preserveScroll:!0,preserveState:!0}))},n.replace=function(e,t){var n;return void 0===t&&(t={}),console.warn("Inertia.replace() has been deprecated and will be removed in a future release. Please use Inertia."+(null!=(n=t.method)?n:"get")+"() instead."),this.visit(e,l({preserveState:!0},t,{replace:!0}))},n.post=function(e,n,r){return void 0===n&&(n={}),void 0===r&&(r={}),this.visit(e,l({preserveState:!0},r,{method:t.Method.POST,data:n}))},n.put=function(e,n,r){return void 0===n&&(n={}),void 0===r&&(r={}),this.visit(e,l({preserveState:!0},r,{method:t.Method.PUT,data:n}))},n.patch=function(e,n,r){return void 0===n&&(n={}),void 0===r&&(r={}),this.visit(e,l({preserveState:!0},r,{method:t.Method.PATCH,data:n}))},n.delete=function(e,n){return void 0===n&&(n={}),this.visit(e,l({preserveState:!0},n,{method:t.Method.DELETE}))},n.remember=function(e,t){var n,r;void 0===t&&(t="default"),_||this.replaceState(l({},this.page,{rememberedState:l({},null==(n=this.page)?void 0:n.rememberedState,(r={},r[t]=e,r))}))},n.restore=function(e){var t,n;if(void 0===e&&(e="default"),!_)return null==(t=window.history.state)||null==(n=t.rememberedState)?void 0:n[e]},n.on=function(e,t){var n=function(e){var n=t(e);e.cancelable&&!e.defaultPrevented&&!1===n&&e.preventDefault()};return document.addEventListener("inertia:"+e,n),function(){return document.removeEventListener("inertia:"+e,n)}},e}(),O={buildDOMElement:function(e){var t=document.createElement("template");t.innerHTML=e;var n=t.content.firstChild;if(!e.startsWith("<script "))return n;var r=document.createElement("script");return r.innerHTML=n.innerHTML,n.getAttributeNames().forEach((function(e){r.setAttribute(e,n.getAttribute(e)||"")})),r},isInertiaManagedElement:function(e){return e.nodeType===Node.ELEMENT_NODE&&null!==e.getAttribute("inertia")},findMatchingElementIndex:function(e,t){var n=e.getAttribute("inertia");return null!==n?t.findIndex((function(e){return e.getAttribute("inertia")===n})):-1},update:c((function(e){var t=this,n=e.map((function(e){return t.buildDOMElement(e)}));Array.from(document.head.childNodes).filter((function(e){return t.isInertiaManagedElement(e)})).forEach((function(e){var r=t.findMatchingElementIndex(e,n);if(-1!==r){var o,i=n.splice(r,1)[0];i&&!e.isEqualNode(i)&&(null==e||null==(o=e.parentNode)||o.replaceChild(i,e))}else{var a;null==e||null==(a=e.parentNode)||a.removeChild(e)}})),n.forEach((function(e){return document.head.appendChild(e)}))}),1)},k=new w;t.Inertia=k,t.createHeadManager=function(e,t,n){var r={},o=0;function i(){var e=Object.values(r).reduce((function(e,t){return e.concat(t)}),[]).reduce((function(e,n){if(-1===n.indexOf("<"))return e;if(0===n.indexOf("<title ")){var r=n.match(/(<title [^>]+>)(.*?)(<\/title>)/);return e.title=r?""+r[1]+t(r[2])+r[3]:n,e}var o=n.match(/ inertia="[^"]+"/);return o?e[o[0]]=n:e[Object.keys(e).length]=n,e}),{});return Object.values(e)}function a(){e?n(i()):O.update(i())}return{createProvider:function(){var e=function(){var e=o+=1;return r[e]=[],e.toString()}();return{update:function(t){return function(e,t){void 0===t&&(t=[]),null!==e&&Object.keys(r).indexOf(e)>-1&&(r[e]=t),a()}(e,t)},disconnect:function(){return function(e){null!==e&&-1!==Object.keys(r).indexOf(e)&&(delete r[e],a())}(e)}}}}},t.hrefToUrl=h,t.mergeDataIntoQueryString=y,t.shouldIntercept=function(e){var t="a"===e.currentTarget.tagName.toLowerCase();return!(e.target&&null!=e&&e.target.isContentEditable||e.defaultPrevented||t&&e.which>1||t&&e.altKey||t&&e.ctrlKey||t&&e.metaKey||t&&e.shiftKey)},t.urlWithoutHash=v},6497:e=>{"use strict";var t=String.prototype.replace,n=/%20/g,r="RFC1738",o="RFC3986";e.exports={default:o,formatters:{RFC1738:function(e){return t.call(e,n,"+")},RFC3986:function(e){return String(e)}},RFC1738:r,RFC3986:o}},3454:(e,t,n)=>{"use strict";var r=n(8250),o=n(2621),i=n(6497);e.exports={formats:i,parse:o,stringify:r}},2621:(e,t,n)=>{"use strict";var r=n(2982),o=Object.prototype.hasOwnProperty,i=Array.isArray,a={allowDots:!1,allowPrototypes:!1,allowSparse:!1,arrayLimit:20,charset:"utf-8",charsetSentinel:!1,comma:!1,decoder:r.decode,delimiter:"&",depth:5,ignoreQueryPrefix:!1,interpretNumericEntities:!1,parameterLimit:1e3,parseArrays:!0,plainObjects:!1,strictNullHandling:!1},l=function(e){return e.replace(/&#(\d+);/g,(function(e,t){return String.fromCharCode(parseInt(t,10))}))},s=function(e,t){return e&&"string"==typeof e&&t.comma&&e.indexOf(",")>-1?e.split(","):e},u=function(e,t,n,r){if(e){var i=n.allowDots?e.replace(/\.([^.[]+)/g,"[$1]"):e,a=/(\[[^[\]]*])/g,l=n.depth>0&&/(\[[^[\]]*])/.exec(i),u=l?i.slice(0,l.index):i,c=[];if(u){if(!n.plainObjects&&o.call(Object.prototype,u)&&!n.allowPrototypes)return;c.push(u)}for(var f=0;n.depth>0&&null!==(l=a.exec(i))&&f<n.depth;){if(f+=1,!n.plainObjects&&o.call(Object.prototype,l[1].slice(1,-1))&&!n.allowPrototypes)return;c.push(l[1])}return l&&c.push("["+i.slice(l.index)+"]"),function(e,t,n,r){for(var o=r?t:s(t,n),i=e.length-1;i>=0;--i){var a,l=e[i];if("[]"===l&&n.parseArrays)a=[].concat(o);else{a=n.plainObjects?Object.create(null):{};var u="["===l.charAt(0)&&"]"===l.charAt(l.length-1)?l.slice(1,-1):l,c=parseInt(u,10);n.parseArrays||""!==u?!isNaN(c)&&l!==u&&String(c)===u&&c>=0&&n.parseArrays&&c<=n.arrayLimit?(a=[])[c]=o:"__proto__"!==u&&(a[u]=o):a={0:o}}o=a}return o}(c,t,n,r)}};e.exports=function(e,t){var n=function(e){if(!e)return a;if(null!==e.decoder&&void 0!==e.decoder&&"function"!=typeof e.decoder)throw new TypeError("Decoder has to be a function.");if(void 0!==e.charset&&"utf-8"!==e.charset&&"iso-8859-1"!==e.charset)throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");var t=void 0===e.charset?a.charset:e.charset;return{allowDots:void 0===e.allowDots?a.allowDots:!!e.allowDots,allowPrototypes:"boolean"==typeof e.allowPrototypes?e.allowPrototypes:a.allowPrototypes,allowSparse:"boolean"==typeof e.allowSparse?e.allowSparse:a.allowSparse,arrayLimit:"number"==typeof e.arrayLimit?e.arrayLimit:a.arrayLimit,charset:t,charsetSentinel:"boolean"==typeof e.charsetSentinel?e.charsetSentinel:a.charsetSentinel,comma:"boolean"==typeof e.comma?e.comma:a.comma,decoder:"function"==typeof e.decoder?e.decoder:a.decoder,delimiter:"string"==typeof e.delimiter||r.isRegExp(e.delimiter)?e.delimiter:a.delimiter,depth:"number"==typeof e.depth||!1===e.depth?+e.depth:a.depth,ignoreQueryPrefix:!0===e.ignoreQueryPrefix,interpretNumericEntities:"boolean"==typeof e.interpretNumericEntities?e.interpretNumericEntities:a.interpretNumericEntities,parameterLimit:"number"==typeof e.parameterLimit?e.parameterLimit:a.parameterLimit,parseArrays:!1!==e.parseArrays,plainObjects:"boolean"==typeof e.plainObjects?e.plainObjects:a.plainObjects,strictNullHandling:"boolean"==typeof e.strictNullHandling?e.strictNullHandling:a.strictNullHandling}}(t);if(""===e||null==e)return n.plainObjects?Object.create(null):{};for(var c="string"==typeof e?function(e,t){var n,u={},c=t.ignoreQueryPrefix?e.replace(/^\?/,""):e,f=t.parameterLimit===1/0?void 0:t.parameterLimit,p=c.split(t.delimiter,f),d=-1,h=t.charset;if(t.charsetSentinel)for(n=0;n<p.length;++n)0===p[n].indexOf("utf8=")&&("utf8=%E2%9C%93"===p[n]?h="utf-8":"utf8=%26%2310003%3B"===p[n]&&(h="iso-8859-1"),d=n,n=p.length);for(n=0;n<p.length;++n)if(n!==d){var y,v,m=p[n],g=m.indexOf("]="),b=-1===g?m.indexOf("="):g+1;-1===b?(y=t.decoder(m,a.decoder,h,"key"),v=t.strictNullHandling?null:""):(y=t.decoder(m.slice(0,b),a.decoder,h,"key"),v=r.maybeMap(s(m.slice(b+1),t),(function(e){return t.decoder(e,a.decoder,h,"value")}))),v&&t.interpretNumericEntities&&"iso-8859-1"===h&&(v=l(v)),m.indexOf("[]=")>-1&&(v=i(v)?[v]:v),o.call(u,y)?u[y]=r.combine(u[y],v):u[y]=v}return u}(e,n):e,f=n.plainObjects?Object.create(null):{},p=Object.keys(c),d=0;d<p.length;++d){var h=p[d],y=u(h,c[h],n,"string"==typeof e);f=r.merge(f,y,n)}return!0===n.allowSparse?f:r.compact(f)}},8250:(e,t,n)=>{"use strict";var r=n(7478),o=n(2982),i=n(6497),a=Object.prototype.hasOwnProperty,l={brackets:function(e){return e+"[]"},comma:"comma",indices:function(e,t){return e+"["+t+"]"},repeat:function(e){return e}},s=Array.isArray,u=String.prototype.split,c=Array.prototype.push,f=function(e,t){c.apply(e,s(t)?t:[t])},p=Date.prototype.toISOString,d=i.default,h={addQueryPrefix:!1,allowDots:!1,charset:"utf-8",charsetSentinel:!1,delimiter:"&",encode:!0,encoder:o.encode,encodeValuesOnly:!1,format:d,formatter:i.formatters[d],indices:!1,serializeDate:function(e){return p.call(e)},skipNulls:!1,strictNullHandling:!1},y={},v=function e(t,n,i,a,l,c,p,d,v,m,g,b,_,w,O){for(var k,S=t,x=O,E=0,j=!1;void 0!==(x=x.get(y))&&!j;){var A=x.get(t);if(E+=1,void 0!==A){if(A===E)throw new RangeError("Cyclic object value");j=!0}void 0===x.get(y)&&(E=0)}if("function"==typeof p?S=p(n,S):S instanceof Date?S=m(S):"comma"===i&&s(S)&&(S=o.maybeMap(S,(function(e){return e instanceof Date?m(e):e}))),null===S){if(a)return c&&!_?c(n,h.encoder,w,"key",g):n;S=""}if("string"==typeof(k=S)||"number"==typeof k||"boolean"==typeof k||"symbol"==typeof k||"bigint"==typeof k||o.isBuffer(S)){if(c){var P=_?n:c(n,h.encoder,w,"key",g);if("comma"===i&&_){for(var T=u.call(String(S),","),C="",N=0;N<T.length;++N)C+=(0===N?"":",")+b(c(T[N],h.encoder,w,"value",g));return[b(P)+"="+C]}return[b(P)+"="+b(c(S,h.encoder,w,"value",g))]}return[b(n)+"="+b(String(S))]}var q,L=[];if(void 0===S)return L;if("comma"===i&&s(S))q=[{value:S.length>0?S.join(",")||null:void 0}];else if(s(p))q=p;else{var R=Object.keys(S);q=d?R.sort(d):R}for(var I=0;I<q.length;++I){var M=q[I],D="object"==typeof M&&void 0!==M.value?M.value:S[M];if(!l||null!==D){var U=s(S)?"function"==typeof i?i(n,M):n:n+(v?"."+M:"["+M+"]");O.set(t,E);var B=r();B.set(y,O),f(L,e(D,U,i,a,l,c,p,d,v,m,g,b,_,w,B))}}return L};e.exports=function(e,t){var n,o=e,u=function(e){if(!e)return h;if(null!==e.encoder&&void 0!==e.encoder&&"function"!=typeof e.encoder)throw new TypeError("Encoder has to be a function.");var t=e.charset||h.charset;if(void 0!==e.charset&&"utf-8"!==e.charset&&"iso-8859-1"!==e.charset)throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");var n=i.default;if(void 0!==e.format){if(!a.call(i.formatters,e.format))throw new TypeError("Unknown format option provided.");n=e.format}var r=i.formatters[n],o=h.filter;return("function"==typeof e.filter||s(e.filter))&&(o=e.filter),{addQueryPrefix:"boolean"==typeof e.addQueryPrefix?e.addQueryPrefix:h.addQueryPrefix,allowDots:void 0===e.allowDots?h.allowDots:!!e.allowDots,charset:t,charsetSentinel:"boolean"==typeof e.charsetSentinel?e.charsetSentinel:h.charsetSentinel,delimiter:void 0===e.delimiter?h.delimiter:e.delimiter,encode:"boolean"==typeof e.encode?e.encode:h.encode,encoder:"function"==typeof e.encoder?e.encoder:h.encoder,encodeValuesOnly:"boolean"==typeof e.encodeValuesOnly?e.encodeValuesOnly:h.encodeValuesOnly,filter:o,format:n,formatter:r,serializeDate:"function"==typeof e.serializeDate?e.serializeDate:h.serializeDate,skipNulls:"boolean"==typeof e.skipNulls?e.skipNulls:h.skipNulls,sort:"function"==typeof e.sort?e.sort:null,strictNullHandling:"boolean"==typeof e.strictNullHandling?e.strictNullHandling:h.strictNullHandling}}(t);"function"==typeof u.filter?o=(0,u.filter)("",o):s(u.filter)&&(n=u.filter);var c,p=[];if("object"!=typeof o||null===o)return"";c=t&&t.arrayFormat in l?t.arrayFormat:t&&"indices"in t?t.indices?"indices":"repeat":"indices";var d=l[c];n||(n=Object.keys(o)),u.sort&&n.sort(u.sort);for(var y=r(),m=0;m<n.length;++m){var g=n[m];u.skipNulls&&null===o[g]||f(p,v(o[g],g,d,u.strictNullHandling,u.skipNulls,u.encode?u.encoder:null,u.filter,u.sort,u.allowDots,u.serializeDate,u.format,u.formatter,u.encodeValuesOnly,u.charset,y))}var b=p.join(u.delimiter),_=!0===u.addQueryPrefix?"?":"";return u.charsetSentinel&&("iso-8859-1"===u.charset?_+="utf8=%26%2310003%3B&":_+="utf8=%E2%9C%93&"),b.length>0?_+b:""}},2982:(e,t,n)=>{"use strict";var r=n(6497),o=Object.prototype.hasOwnProperty,i=Array.isArray,a=function(){for(var e=[],t=0;t<256;++t)e.push("%"+((t<16?"0":"")+t.toString(16)).toUpperCase());return e}(),l=function(e,t){for(var n=t&&t.plainObjects?Object.create(null):{},r=0;r<e.length;++r)void 0!==e[r]&&(n[r]=e[r]);return n};e.exports={arrayToObject:l,assign:function(e,t){return Object.keys(t).reduce((function(e,n){return e[n]=t[n],e}),e)},combine:function(e,t){return[].concat(e,t)},compact:function(e){for(var t=[{obj:{o:e},prop:"o"}],n=[],r=0;r<t.length;++r)for(var o=t[r],a=o.obj[o.prop],l=Object.keys(a),s=0;s<l.length;++s){var u=l[s],c=a[u];"object"==typeof c&&null!==c&&-1===n.indexOf(c)&&(t.push({obj:a,prop:u}),n.push(c))}return function(e){for(;e.length>1;){var t=e.pop(),n=t.obj[t.prop];if(i(n)){for(var r=[],o=0;o<n.length;++o)void 0!==n[o]&&r.push(n[o]);t.obj[t.prop]=r}}}(t),e},decode:function(e,t,n){var r=e.replace(/\+/g," ");if("iso-8859-1"===n)return r.replace(/%[0-9a-f]{2}/gi,unescape);try{return decodeURIComponent(r)}catch(e){return r}},encode:function(e,t,n,o,i){if(0===e.length)return e;var l=e;if("symbol"==typeof e?l=Symbol.prototype.toString.call(e):"string"!=typeof e&&(l=String(e)),"iso-8859-1"===n)return escape(l).replace(/%u[0-9a-f]{4}/gi,(function(e){return"%26%23"+parseInt(e.slice(2),16)+"%3B"}));for(var s="",u=0;u<l.length;++u){var c=l.charCodeAt(u);45===c||46===c||95===c||126===c||c>=48&&c<=57||c>=65&&c<=90||c>=97&&c<=122||i===r.RFC1738&&(40===c||41===c)?s+=l.charAt(u):c<128?s+=a[c]:c<2048?s+=a[192|c>>6]+a[128|63&c]:c<55296||c>=57344?s+=a[224|c>>12]+a[128|c>>6&63]+a[128|63&c]:(u+=1,c=65536+((1023&c)<<10|1023&l.charCodeAt(u)),s+=a[240|c>>18]+a[128|c>>12&63]+a[128|c>>6&63]+a[128|63&c])}return s},isBuffer:function(e){return!(!e||"object"!=typeof e)&&!!(e.constructor&&e.constructor.isBuffer&&e.constructor.isBuffer(e))},isRegExp:function(e){return"[object RegExp]"===Object.prototype.toString.call(e)},maybeMap:function(e,t){if(i(e)){for(var n=[],r=0;r<e.length;r+=1)n.push(t(e[r]));return n}return t(e)},merge:function e(t,n,r){if(!n)return t;if("object"!=typeof n){if(i(t))t.push(n);else{if(!t||"object"!=typeof t)return[t,n];(r&&(r.plainObjects||r.allowPrototypes)||!o.call(Object.prototype,n))&&(t[n]=!0)}return t}if(!t||"object"!=typeof t)return[t].concat(n);var a=t;return i(t)&&!i(n)&&(a=l(t,r)),i(t)&&i(n)?(n.forEach((function(n,i){if(o.call(t,i)){var a=t[i];a&&"object"==typeof a&&n&&"object"==typeof n?t[i]=e(a,n,r):t.push(n)}else t[i]=n})),t):Object.keys(n).reduce((function(t,i){var a=n[i];return o.call(t,i)?t[i]=e(t[i],a,r):t[i]=a,t}),a)}}},2262:(e,t,n)=>{"use strict";n.d(t,{$y:()=>xe,B:()=>a,BK:()=>ze,Bj:()=>i,EB:()=>u,Fl:()=>Ye,IU:()=>Ae,Jd:()=>x,OT:()=>we,PG:()=>Se,SU:()=>Be,Um:()=>_e,Vh:()=>Ke,WL:()=>$e,X$:()=>P,X3:()=>je,XI:()=>Ie,Xl:()=>Pe,YS:()=>Oe,ZM:()=>He,cE:()=>w,dq:()=>Le,iH:()=>Re,j:()=>j,lk:()=>E,nZ:()=>s,oR:()=>Ue,qj:()=>be,qq:()=>b,sT:()=>O,yT:()=>Ee});var r=n(3577);let o;class i{constructor(e=!1){this.active=!0,this.effects=[],this.cleanups=[],!e&&o&&(this.parent=o,this.index=(o.scopes||(o.scopes=[])).push(this)-1)}run(e){if(this.active){const t=o;try{return o=this,e()}finally{o=t}}else 0}on(){o=this}off(){o=this.parent}stop(e){if(this.active){let t,n;for(t=0,n=this.effects.length;t<n;t++)this.effects[t].stop();for(t=0,n=this.cleanups.length;t<n;t++)this.cleanups[t]();if(this.scopes)for(t=0,n=this.scopes.length;t<n;t++)this.scopes[t].stop(!0);if(this.parent&&!e){const e=this.parent.scopes.pop();e&&e!==this&&(this.parent.scopes[this.index]=e,e.index=this.index)}this.active=!1}}}function a(e){return new i(e)}function l(e,t=o){t&&t.active&&t.effects.push(e)}function s(){return o}function u(e){o&&o.cleanups.push(e)}const c=e=>{const t=new Set(e);return t.w=0,t.n=0,t},f=e=>(e.w&y)>0,p=e=>(e.n&y)>0,d=new WeakMap;let h=0,y=1;let v;const m=Symbol(""),g=Symbol("");class b{constructor(e,t=null,n){this.fn=e,this.scheduler=t,this.active=!0,this.deps=[],this.parent=void 0,l(this,n)}run(){if(!this.active)return this.fn();let e=v,t=k;for(;e;){if(e===this)return;e=e.parent}try{return this.parent=v,v=this,k=!0,y=1<<++h,h<=30?(({deps:e})=>{if(e.length)for(let t=0;t<e.length;t++)e[t].w|=y})(this):_(this),this.fn()}finally{h<=30&&(e=>{const{deps:t}=e;if(t.length){let n=0;for(let r=0;r<t.length;r++){const o=t[r];f(o)&&!p(o)?o.delete(e):t[n++]=o,o.w&=~y,o.n&=~y}t.length=n}})(this),y=1<<--h,v=this.parent,k=t,this.parent=void 0,this.deferStop&&this.stop()}}stop(){v===this?this.deferStop=!0:this.active&&(_(this),this.onStop&&this.onStop(),this.active=!1)}}function _(e){const{deps:t}=e;if(t.length){for(let n=0;n<t.length;n++)t[n].delete(e);t.length=0}}function w(e,t){e.effect&&(e=e.effect.fn);const n=new b(e);t&&((0,r.l7)(n,t),t.scope&&l(n,t.scope)),t&&t.lazy||n.run();const o=n.run.bind(n);return o.effect=n,o}function O(e){e.effect.stop()}let k=!0;const S=[];function x(){S.push(k),k=!1}function E(){const e=S.pop();k=void 0===e||e}function j(e,t,n){if(k&&v){let t=d.get(e);t||d.set(e,t=new Map);let r=t.get(n);r||t.set(n,r=c());A(r,void 0)}}function A(e,t){let n=!1;h<=30?p(e)||(e.n|=y,n=!f(e)):n=!e.has(v),n&&(e.add(v),v.deps.push(e))}function P(e,t,n,o,i,a){const l=d.get(e);if(!l)return;let s=[];if("clear"===t)s=[...l.values()];else if("length"===n&&(0,r.kJ)(e))l.forEach(((e,t)=>{("length"===t||t>=o)&&s.push(e)}));else switch(void 0!==n&&s.push(l.get(n)),t){case"add":(0,r.kJ)(e)?(0,r.S0)(n)&&s.push(l.get("length")):(s.push(l.get(m)),(0,r._N)(e)&&s.push(l.get(g)));break;case"delete":(0,r.kJ)(e)||(s.push(l.get(m)),(0,r._N)(e)&&s.push(l.get(g)));break;case"set":(0,r._N)(e)&&s.push(l.get(m))}if(1===s.length)s[0]&&T(s[0]);else{const e=[];for(const t of s)t&&e.push(...t);T(c(e))}}function T(e,t){for(const t of(0,r.kJ)(e)?e:[...e])(t!==v||t.allowRecurse)&&(t.scheduler?t.scheduler():t.run())}const C=(0,r.fY)("__proto__,__v_isRef,__isVue"),N=new Set(Object.getOwnPropertyNames(Symbol).map((e=>Symbol[e])).filter(r.yk)),q=U(),L=U(!1,!0),R=U(!0),I=U(!0,!0),M=D();function D(){const e={};return["includes","indexOf","lastIndexOf"].forEach((t=>{e[t]=function(...e){const n=Ae(this);for(let e=0,t=this.length;e<t;e++)j(n,0,e+"");const r=n[t](...e);return-1===r||!1===r?n[t](...e.map(Ae)):r}})),["push","pop","shift","unshift","splice"].forEach((t=>{e[t]=function(...e){x();const n=Ae(this)[t].apply(this,e);return E(),n}})),e}function U(e=!1,t=!1){return function(n,o,i){if("__v_isReactive"===o)return!e;if("__v_isReadonly"===o)return e;if("__v_isShallow"===o)return t;if("__v_raw"===o&&i===(e?t?ge:me:t?ve:ye).get(n))return n;const a=(0,r.kJ)(n);if(!e&&a&&(0,r.RI)(M,o))return Reflect.get(M,o,i);const l=Reflect.get(n,o,i);if((0,r.yk)(o)?N.has(o):C(o))return l;if(e||j(n,0,o),t)return l;if(Le(l)){return!a||!(0,r.S0)(o)?l.value:l}return(0,r.Kn)(l)?e?we(l):be(l):l}}const B=$(),F=$(!0);function $(e=!1){return function(t,n,o,i){let a=t[n];if(xe(a)&&Le(a)&&!Le(o))return!1;if(!e&&!xe(o)&&(Ee(o)||(o=Ae(o),a=Ae(a)),!(0,r.kJ)(t)&&Le(a)&&!Le(o)))return a.value=o,!0;const l=(0,r.kJ)(t)&&(0,r.S0)(n)?Number(n)<t.length:(0,r.RI)(t,n),s=Reflect.set(t,n,o,i);return t===Ae(i)&&(l?(0,r.aU)(o,a)&&P(t,"set",n,o):P(t,"add",n,o)),s}}const V={get:q,set:B,deleteProperty:function(e,t){const n=(0,r.RI)(e,t),o=(e[t],Reflect.deleteProperty(e,t));return o&&n&&P(e,"delete",t,void 0),o},has:function(e,t){const n=Reflect.has(e,t);return(0,r.yk)(t)&&N.has(t)||j(e,0,t),n},ownKeys:function(e){return j(e,0,(0,r.kJ)(e)?"length":m),Reflect.ownKeys(e)}},H={get:R,set:(e,t)=>!0,deleteProperty:(e,t)=>!0},z=(0,r.l7)({},V,{get:L,set:F}),W=(0,r.l7)({},H,{get:I}),K=e=>e,Z=e=>Reflect.getPrototypeOf(e);function Y(e,t,n=!1,r=!1){const o=Ae(e=e.__v_raw),i=Ae(t);t!==i&&!n&&j(o,0,t),!n&&j(o,0,i);const{has:a}=Z(o),l=r?K:n?Ce:Te;return a.call(o,t)?l(e.get(t)):a.call(o,i)?l(e.get(i)):void(e!==o&&e.get(t))}function G(e,t=!1){const n=this.__v_raw,r=Ae(n),o=Ae(e);return e!==o&&!t&&j(r,0,e),!t&&j(r,0,o),e===o?n.has(e):n.has(e)||n.has(o)}function J(e,t=!1){return e=e.__v_raw,!t&&j(Ae(e),0,m),Reflect.get(e,"size",e)}function X(e){e=Ae(e);const t=Ae(this);return Z(t).has.call(t,e)||(t.add(e),P(t,"add",e,e)),this}function Q(e,t){t=Ae(t);const n=Ae(this),{has:o,get:i}=Z(n);let a=o.call(n,e);a||(e=Ae(e),a=o.call(n,e));const l=i.call(n,e);return n.set(e,t),a?(0,r.aU)(t,l)&&P(n,"set",e,t):P(n,"add",e,t),this}function ee(e){const t=Ae(this),{has:n,get:r}=Z(t);let o=n.call(t,e);o||(e=Ae(e),o=n.call(t,e));r&&r.call(t,e);const i=t.delete(e);return o&&P(t,"delete",e,void 0),i}function te(){const e=Ae(this),t=0!==e.size,n=e.clear();return t&&P(e,"clear",void 0,void 0),n}function ne(e,t){return function(n,r){const o=this,i=o.__v_raw,a=Ae(i),l=t?K:e?Ce:Te;return!e&&j(a,0,m),i.forEach(((e,t)=>n.call(r,l(e),l(t),o)))}}function re(e,t,n){return function(...o){const i=this.__v_raw,a=Ae(i),l=(0,r._N)(a),s="entries"===e||e===Symbol.iterator&&l,u="keys"===e&&l,c=i[e](...o),f=n?K:t?Ce:Te;return!t&&j(a,0,u?g:m),{next(){const{value:e,done:t}=c.next();return t?{value:e,done:t}:{value:s?[f(e[0]),f(e[1])]:f(e),done:t}},[Symbol.iterator](){return this}}}}function oe(e){return function(...t){return"delete"!==e&&this}}function ie(){const e={get(e){return Y(this,e)},get size(){return J(this)},has:G,add:X,set:Q,delete:ee,clear:te,forEach:ne(!1,!1)},t={get(e){return Y(this,e,!1,!0)},get size(){return J(this)},has:G,add:X,set:Q,delete:ee,clear:te,forEach:ne(!1,!0)},n={get(e){return Y(this,e,!0)},get size(){return J(this,!0)},has(e){return G.call(this,e,!0)},add:oe("add"),set:oe("set"),delete:oe("delete"),clear:oe("clear"),forEach:ne(!0,!1)},r={get(e){return Y(this,e,!0,!0)},get size(){return J(this,!0)},has(e){return G.call(this,e,!0)},add:oe("add"),set:oe("set"),delete:oe("delete"),clear:oe("clear"),forEach:ne(!0,!0)};return["keys","values","entries",Symbol.iterator].forEach((o=>{e[o]=re(o,!1,!1),n[o]=re(o,!0,!1),t[o]=re(o,!1,!0),r[o]=re(o,!0,!0)})),[e,n,t,r]}const[ae,le,se,ue]=ie();function ce(e,t){const n=t?e?ue:se:e?le:ae;return(t,o,i)=>"__v_isReactive"===o?!e:"__v_isReadonly"===o?e:"__v_raw"===o?t:Reflect.get((0,r.RI)(n,o)&&o in t?n:t,o,i)}const fe={get:ce(!1,!1)},pe={get:ce(!1,!0)},de={get:ce(!0,!1)},he={get:ce(!0,!0)};const ye=new WeakMap,ve=new WeakMap,me=new WeakMap,ge=new WeakMap;function be(e){return xe(e)?e:ke(e,!1,V,fe,ye)}function _e(e){return ke(e,!1,z,pe,ve)}function we(e){return ke(e,!0,H,de,me)}function Oe(e){return ke(e,!0,W,he,ge)}function ke(e,t,n,o,i){if(!(0,r.Kn)(e))return e;if(e.__v_raw&&(!t||!e.__v_isReactive))return e;const a=i.get(e);if(a)return a;const l=(s=e).__v_skip||!Object.isExtensible(s)?0:function(e){switch(e){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}((0,r.W7)(s));var s;if(0===l)return e;const u=new Proxy(e,2===l?o:n);return i.set(e,u),u}function Se(e){return xe(e)?Se(e.__v_raw):!(!e||!e.__v_isReactive)}function xe(e){return!(!e||!e.__v_isReadonly)}function Ee(e){return!(!e||!e.__v_isShallow)}function je(e){return Se(e)||xe(e)}function Ae(e){const t=e&&e.__v_raw;return t?Ae(t):e}function Pe(e){return(0,r.Nj)(e,"__v_skip",!0),e}const Te=e=>(0,r.Kn)(e)?be(e):e,Ce=e=>(0,r.Kn)(e)?we(e):e;function Ne(e){k&&v&&A((e=Ae(e)).dep||(e.dep=c()))}function qe(e,t){(e=Ae(e)).dep&&T(e.dep)}function Le(e){return!(!e||!0!==e.__v_isRef)}function Re(e){return Me(e,!1)}function Ie(e){return Me(e,!0)}function Me(e,t){return Le(e)?e:new De(e,t)}class De{constructor(e,t){this.__v_isShallow=t,this.dep=void 0,this.__v_isRef=!0,this._rawValue=t?e:Ae(e),this._value=t?e:Te(e)}get value(){return Ne(this),this._value}set value(e){e=this.__v_isShallow?e:Ae(e),(0,r.aU)(e,this._rawValue)&&(this._rawValue=e,this._value=this.__v_isShallow?e:Te(e),qe(this))}}function Ue(e){qe(e)}function Be(e){return Le(e)?e.value:e}const Fe={get:(e,t,n)=>Be(Reflect.get(e,t,n)),set:(e,t,n,r)=>{const o=e[t];return Le(o)&&!Le(n)?(o.value=n,!0):Reflect.set(e,t,n,r)}};function $e(e){return Se(e)?e:new Proxy(e,Fe)}class Ve{constructor(e){this.dep=void 0,this.__v_isRef=!0;const{get:t,set:n}=e((()=>Ne(this)),(()=>qe(this)));this._get=t,this._set=n}get value(){return this._get()}set value(e){this._set(e)}}function He(e){return new Ve(e)}function ze(e){const t=(0,r.kJ)(e)?new Array(e.length):{};for(const n in e)t[n]=Ke(e,n);return t}class We{constructor(e,t,n){this._object=e,this._key=t,this._defaultValue=n,this.__v_isRef=!0}get value(){const e=this._object[this._key];return void 0===e?this._defaultValue:e}set value(e){this._object[this._key]=e}}function Ke(e,t,n){const r=e[t];return Le(r)?r:new We(e,t,n)}class Ze{constructor(e,t,n,r){this._setter=t,this.dep=void 0,this.__v_isRef=!0,this._dirty=!0,this.effect=new b(e,(()=>{this._dirty||(this._dirty=!0,qe(this))})),this.effect.computed=this,this.effect.active=this._cacheable=!r,this.__v_isReadonly=n}get value(){const e=Ae(this);return Ne(e),!e._dirty&&e._cacheable||(e._dirty=!1,e._value=e.effect.run()),e._value}set value(e){this._setter(e)}}function Ye(e,t,n=!1){let o,i;const a=(0,r.mf)(e);a?(o=e,i=r.dG):(o=e.get,i=e.set);return new Ze(o,i,a||!i,n)}},6252:(e,t,n)=>{"use strict";n.d(t,{$d:()=>c,$y:()=>r.$y,Ah:()=>We,B:()=>r.B,BK:()=>r.BK,Bj:()=>r.Bj,Bz:()=>lr,C3:()=>fn,C_:()=>o.C_,Cn:()=>z,EB:()=>r.EB,Eo:()=>Nt,F4:()=>gn,FN:()=>Fn,Fl:()=>ir,G:()=>kr,HX:()=>W,HY:()=>Zt,Ho:()=>bn,IU:()=>r.IU,JJ:()=>ae,Jd:()=>ze,KU:()=>u,Ko:()=>An,LL:()=>Ht,MW:()=>ar,MX:()=>_r,Mr:()=>br,Nv:()=>Pn,OT:()=>r.OT,Ob:()=>Ce,P$:()=>be,PG:()=>r.PG,Q2:()=>zt,Q6:()=>xe,RC:()=>Ae,Rh:()=>ue,Rr:()=>cr,S3:()=>f,SU:()=>r.SU,U2:()=>we,Uc:()=>mr,Uk:()=>_n,Um:()=>r.Um,Us:()=>Ct,Vh:()=>r.Vh,WI:()=>Tn,WL:()=>r.WL,WY:()=>sr,Wm:()=>vn,X3:()=>r.X3,XI:()=>r.XI,Xl:()=>r.Xl,Xn:()=>Ve,Y1:()=>Gn,Y3:()=>x,Y8:()=>me,YP:()=>pe,YS:()=>r.YS,Yq:()=>Ze,ZK:()=>a,ZM:()=>r.ZM,Zq:()=>gr,_:()=>yn,_A:()=>o._A,aZ:()=>Ee,b9:()=>ur,bT:()=>Ye,bv:()=>$e,cE:()=>r.cE,d1:()=>Ge,dD:()=>H,dG:()=>En,dl:()=>qe,dq:()=>r.dq,ec:()=>M,eq:()=>Sr,f3:()=>le,h:()=>vr,hR:()=>o.hR,i8:()=>Or,iD:()=>ln,iH:()=>r.iH,ic:()=>He,j4:()=>sn,j5:()=>o.j5,kC:()=>o.kC,kq:()=>On,l1:()=>fr,lA:()=>un,lR:()=>Bt,m0:()=>se,mW:()=>L,mv:()=>yr,mx:()=>Nn,n4:()=>ee,nK:()=>Se,nQ:()=>wr,nZ:()=>r.nZ,oR:()=>r.oR,of:()=>Jn,p1:()=>hr,qG:()=>Jt,qZ:()=>on,qb:()=>P,qj:()=>r.qj,qq:()=>r.qq,ry:()=>xr,sT:()=>r.sT,se:()=>Le,sv:()=>Gt,uE:()=>wn,u_:()=>dr,up:()=>$t,vl:()=>Ke,vs:()=>o.vs,w5:()=>K,wF:()=>Fe,wg:()=>en,wy:()=>_t,xv:()=>Yt,yT:()=>r.yT,yX:()=>ce,zw:()=>o.zw});var r=n(2262),o=n(3577);const i=[];function a(e,...t){(0,r.Jd)();const n=i.length?i[i.length-1].component:null,o=n&&n.appContext.config.warnHandler,a=function(){let e=i[i.length-1];if(!e)return[];const t=[];for(;e;){const n=t[0];n&&n.vnode===e?n.recurseCount++:t.push({vnode:e,recurseCount:0});const r=e.component&&e.component.parent;e=r&&r.vnode}return t}();if(o)u(o,n,11,[e+t.join(""),n&&n.proxy,a.map((({vnode:e})=>`at <${rr(n,e.type)}>`)).join("\n"),a]);else{const n=[`[Vue warn]: ${e}`,...t];a.length&&n.push("\n",...function(e){const t=[];return e.forEach(((e,n)=>{t.push(...0===n?[]:["\n"],...function({vnode:e,recurseCount:t}){const n=t>0?`... (${t} recursive calls)`:"",r=!!e.component&&null==e.component.parent,o=` at <${rr(e.component,e.type,r)}`,i=">"+n;return e.props?[o,...l(e.props),i]:[o+i]}(e))})),t}(a)),console.warn(...n)}(0,r.lk)()}function l(e){const t=[],n=Object.keys(e);return n.slice(0,3).forEach((n=>{t.push(...s(n,e[n]))})),n.length>3&&t.push(" ..."),t}function s(e,t,n){return(0,o.HD)(t)?(t=JSON.stringify(t),n?t:[`${e}=${t}`]):"number"==typeof t||"boolean"==typeof t||null==t?n?t:[`${e}=${t}`]:(0,r.dq)(t)?(t=s(e,(0,r.IU)(t.value),!0),n?t:[`${e}=Ref<`,t,">"]):(0,o.mf)(t)?[`${e}=fn${t.name?`<${t.name}>`:""}`]:(t=(0,r.IU)(t),n?t:[`${e}=`,t])}function u(e,t,n,r){let o;try{o=r?e(...r):e()}catch(e){f(e,t,n)}return o}function c(e,t,n,r){if((0,o.mf)(e)){const i=u(e,t,n,r);return i&&(0,o.tI)(i)&&i.catch((e=>{f(e,t,n)})),i}const i=[];for(let o=0;o<e.length;o++)i.push(c(e[o],t,n,r));return i}function f(e,t,n,r=!0){t&&t.vnode;if(t){let r=t.parent;const o=t.proxy,i=n;for(;r;){const t=r.ec;if(t)for(let n=0;n<t.length;n++)if(!1===t[n](e,o,i))return;r=r.parent}const a=t.appContext.config.errorHandler;if(a)return void u(a,null,10,[e,o,i])}!function(e,t,n,r=!0){console.error(e)}(e,0,0,r)}let p=!1,d=!1;const h=[];let y=0;const v=[];let m=null,g=0;const b=[];let _=null,w=0;const O=Promise.resolve();let k=null,S=null;function x(e){const t=k||O;return e?t.then(this?e.bind(this):e):t}function E(e){h.length&&h.includes(e,p&&e.allowRecurse?y+1:y)||e===S||(null==e.id?h.push(e):h.splice(function(e){let t=y+1,n=h.length;for(;t<n;){const r=t+n>>>1;N(h[r])<e?t=r+1:n=r}return t}(e.id),0,e),j())}function j(){p||d||(d=!0,k=O.then(q))}function A(e,t,n,r){(0,o.kJ)(e)?n.push(...e):t&&t.includes(e,e.allowRecurse?r+1:r)||n.push(e),j()}function P(e){A(e,_,b,w)}function T(e,t=null){if(v.length){for(S=t,m=[...new Set(v)],v.length=0,g=0;g<m.length;g++)m[g]();m=null,g=0,S=null,T(e,t)}}function C(e){if(b.length){const e=[...new Set(b)];if(b.length=0,_)return void _.push(...e);for(_=e,_.sort(((e,t)=>N(e)-N(t))),w=0;w<_.length;w++)_[w]();_=null,w=0}}const N=e=>null==e.id?1/0:e.id;function q(e){d=!1,p=!0,T(e),h.sort(((e,t)=>N(e)-N(t)));o.dG;try{for(y=0;y<h.length;y++){const e=h[y];e&&!1!==e.active&&u(e,null,14)}}finally{y=0,h.length=0,C(),p=!1,k=null,(h.length||v.length||b.length)&&q(e)}}new Set;new Map;let L,R=[],I=!1;function M(e,t){var n,r;if(L=e,L)L.enabled=!0,R.forEach((({event:e,args:t})=>L.emit(e,...t))),R=[];else if("undefined"!=typeof window&&window.HTMLElement&&!(null===(r=null===(n=window.navigator)||void 0===n?void 0:n.userAgent)||void 0===r?void 0:r.includes("jsdom"))){(t.__VUE_DEVTOOLS_HOOK_REPLAY__=t.__VUE_DEVTOOLS_HOOK_REPLAY__||[]).push((e=>{M(e,t)})),setTimeout((()=>{L||(t.__VUE_DEVTOOLS_HOOK_REPLAY__=null,I=!0,R=[])}),3e3)}else I=!0,R=[]}function D(e,t,...n){if(e.isUnmounted)return;const r=e.vnode.props||o.kT;let i=n;const a=t.startsWith("update:"),l=a&&t.slice(7);if(l&&l in r){const e=`${"modelValue"===l?"model":l}Modifiers`,{number:t,trim:a}=r[e]||o.kT;a?i=n.map((e=>e.trim())):t&&(i=n.map(o.He))}let s;let u=r[s=(0,o.hR)(t)]||r[s=(0,o.hR)((0,o._A)(t))];!u&&a&&(u=r[s=(0,o.hR)((0,o.rs)(t))]),u&&c(u,e,6,i);const f=r[s+"Once"];if(f){if(e.emitted){if(e.emitted[s])return}else e.emitted={};e.emitted[s]=!0,c(f,e,6,i)}}function U(e,t,n=!1){const r=t.emitsCache,i=r.get(e);if(void 0!==i)return i;const a=e.emits;let l={},s=!1;if(!(0,o.mf)(e)){const r=e=>{const n=U(e,t,!0);n&&(s=!0,(0,o.l7)(l,n))};!n&&t.mixins.length&&t.mixins.forEach(r),e.extends&&r(e.extends),e.mixins&&e.mixins.forEach(r)}return a||s?((0,o.kJ)(a)?a.forEach((e=>l[e]=null)):(0,o.l7)(l,a),r.set(e,l),l):(r.set(e,null),null)}function B(e,t){return!(!e||!(0,o.F7)(t))&&(t=t.slice(2).replace(/Once$/,""),(0,o.RI)(e,t[0].toLowerCase()+t.slice(1))||(0,o.RI)(e,(0,o.rs)(t))||(0,o.RI)(e,t))}let F=null,$=null;function V(e){const t=F;return F=e,$=e&&e.type.__scopeId||null,t}function H(e){$=e}function z(){$=null}const W=e=>K;function K(e,t=F,n){if(!t)return e;if(e._n)return e;const r=(...n)=>{r._d&&on(-1);const o=V(t),i=e(...n);return V(o),r._d&&on(1),i};return r._n=!0,r._c=!0,r._d=!0,r}function Z(e){const{type:t,vnode:n,proxy:r,withProxy:i,props:a,propsOptions:[l],slots:s,attrs:u,emit:c,render:p,renderCache:d,data:h,setupState:y,ctx:v,inheritAttrs:m}=e;let g,b;const _=V(e);try{if(4&n.shapeFlag){const e=i||r;g=kn(p.call(e,e,d,a,y,h,v)),b=u}else{const e=t;0,g=kn(e.length>1?e(a,{attrs:u,slots:s,emit:c}):e(a,null)),b=t.props?u:G(u)}}catch(t){Xt.length=0,f(t,e,1),g=vn(Gt)}let w=g;if(b&&!1!==m){const e=Object.keys(b),{shapeFlag:t}=w;e.length&&7&t&&(l&&e.some(o.tR)&&(b=J(b,l)),w=bn(w,b))}return n.dirs&&(w.dirs=w.dirs?w.dirs.concat(n.dirs):n.dirs),n.transition&&(w.transition=n.transition),g=w,V(_),g}function Y(e){let t;for(let n=0;n<e.length;n++){const r=e[n];if(!un(r))return;if(r.type!==Gt||"v-if"===r.children){if(t)return;t=r}}return t}const G=e=>{let t;for(const n in e)("class"===n||"style"===n||(0,o.F7)(n))&&((t||(t={}))[n]=e[n]);return t},J=(e,t)=>{const n={};for(const r in e)(0,o.tR)(r)&&r.slice(9)in t||(n[r]=e[r]);return n};function X(e,t,n){const r=Object.keys(t);if(r.length!==Object.keys(e).length)return!0;for(let o=0;o<r.length;o++){const i=r[o];if(t[i]!==e[i]&&!B(n,i))return!0}return!1}function Q({vnode:e,parent:t},n){for(;t&&t.subTree===e;)(e=t.vnode).el=n,t=t.parent}const ee={name:"Suspense",__isSuspense:!0,process(e,t,n,r,o,i,a,l,s,u){null==e?function(e,t,n,r,o,i,a,l,s){const{p:u,o:{createElement:c}}=s,f=c("div"),p=e.suspense=ne(e,o,r,t,f,n,i,a,l,s);u(null,p.pendingBranch=e.ssContent,f,null,r,p,i,a),p.deps>0?(te(e,"onPending"),te(e,"onFallback"),u(null,e.ssFallback,t,n,r,null,i,a),ie(p,e.ssFallback)):p.resolve()}(t,n,r,o,i,a,l,s,u):function(e,t,n,r,o,i,a,l,{p:s,um:u,o:{createElement:c}}){const f=t.suspense=e.suspense;f.vnode=t,t.el=e.el;const p=t.ssContent,d=t.ssFallback,{activeBranch:h,pendingBranch:y,isInFallback:v,isHydrating:m}=f;if(y)f.pendingBranch=p,cn(p,y)?(s(y,p,f.hiddenContainer,null,o,f,i,a,l),f.deps<=0?f.resolve():v&&(s(h,d,n,r,o,null,i,a,l),ie(f,d))):(f.pendingId++,m?(f.isHydrating=!1,f.activeBranch=y):u(y,o,f),f.deps=0,f.effects.length=0,f.hiddenContainer=c("div"),v?(s(null,p,f.hiddenContainer,null,o,f,i,a,l),f.deps<=0?f.resolve():(s(h,d,n,r,o,null,i,a,l),ie(f,d))):h&&cn(p,h)?(s(h,p,n,r,o,f,i,a,l),f.resolve(!0)):(s(null,p,f.hiddenContainer,null,o,f,i,a,l),f.deps<=0&&f.resolve()));else if(h&&cn(p,h))s(h,p,n,r,o,f,i,a,l),ie(f,p);else if(te(t,"onPending"),f.pendingBranch=p,f.pendingId++,s(null,p,f.hiddenContainer,null,o,f,i,a,l),f.deps<=0)f.resolve();else{const{timeout:e,pendingId:t}=f;e>0?setTimeout((()=>{f.pendingId===t&&f.fallback(d)}),e):0===e&&f.fallback(d)}}(e,t,n,r,o,a,l,s,u)},hydrate:function(e,t,n,r,o,i,a,l,s){const u=t.suspense=ne(t,r,n,e.parentNode,document.createElement("div"),null,o,i,a,l,!0),c=s(e,u.pendingBranch=t.ssContent,n,u,i,a);0===u.deps&&u.resolve();return c},create:ne,normalize:function(e){const{shapeFlag:t,children:n}=e,r=32&t;e.ssContent=re(r?n.default:n),e.ssFallback=r?re(n.fallback):vn(Gt)}};function te(e,t){const n=e.props&&e.props[t];(0,o.mf)(n)&&n()}function ne(e,t,n,r,i,a,l,s,u,c,p=!1){const{p:d,m:h,um:y,n:v,o:{parentNode:m,remove:g}}=c,b=(0,o.He)(e.props&&e.props.timeout),_={vnode:e,parent:t,parentComponent:n,isSVG:l,container:r,hiddenContainer:i,anchor:a,deps:0,pendingId:0,timeout:"number"==typeof b?b:-1,activeBranch:null,pendingBranch:null,isInFallback:!0,isHydrating:p,isUnmounted:!1,effects:[],resolve(e=!1){const{vnode:t,activeBranch:n,pendingBranch:r,pendingId:o,effects:i,parentComponent:a,container:l}=_;if(_.isHydrating)_.isHydrating=!1;else if(!e){const e=n&&r.transition&&"out-in"===r.transition.mode;e&&(n.transition.afterLeave=()=>{o===_.pendingId&&h(r,l,t,0)});let{anchor:t}=_;n&&(t=v(n),y(n,a,_,!0)),e||h(r,l,t,0)}ie(_,r),_.pendingBranch=null,_.isInFallback=!1;let s=_.parent,u=!1;for(;s;){if(s.pendingBranch){s.effects.push(...i),u=!0;break}s=s.parent}u||P(i),_.effects=[],te(t,"onResolve")},fallback(e){if(!_.pendingBranch)return;const{vnode:t,activeBranch:n,parentComponent:r,container:o,isSVG:i}=_;te(t,"onFallback");const a=v(n),l=()=>{_.isInFallback&&(d(null,e,o,a,r,null,i,s,u),ie(_,e))},c=e.transition&&"out-in"===e.transition.mode;c&&(n.transition.afterLeave=l),_.isInFallback=!0,y(n,r,null,!0),c||l()},move(e,t,n){_.activeBranch&&h(_.activeBranch,e,t,n),_.container=e},next:()=>_.activeBranch&&v(_.activeBranch),registerDep(e,t){const n=!!_.pendingBranch;n&&_.deps++;const r=e.vnode.el;e.asyncDep.catch((t=>{f(t,e,0)})).then((o=>{if(e.isUnmounted||_.isUnmounted||_.pendingId!==e.suspenseId)return;e.asyncResolved=!0;const{vnode:i}=e;Yn(e,o,!1),r&&(i.el=r);const a=!r&&e.subTree.el;t(e,i,m(r||e.subTree.el),r?null:v(e.subTree),_,l,u),a&&g(a),Q(e,i.el),n&&0==--_.deps&&_.resolve()}))},unmount(e,t){_.isUnmounted=!0,_.activeBranch&&y(_.activeBranch,n,e,t),_.pendingBranch&&y(_.pendingBranch,n,e,t)}};return _}function re(e){let t;if((0,o.mf)(e)){const n=rn&&e._c;n&&(e._d=!1,en()),e=e(),n&&(e._d=!0,t=Qt,tn())}if((0,o.kJ)(e)){const t=Y(e);0,e=t}return e=kn(e),t&&!e.dynamicChildren&&(e.dynamicChildren=t.filter((t=>t!==e))),e}function oe(e,t){t&&t.pendingBranch?(0,o.kJ)(e)?t.effects.push(...e):t.effects.push(e):P(e)}function ie(e,t){e.activeBranch=t;const{vnode:n,parentComponent:r}=e,o=n.el=t.el;r&&r.subTree===n&&(r.vnode.el=o,Q(r,o))}function ae(e,t){if(Bn){let n=Bn.provides;const r=Bn.parent&&Bn.parent.provides;r===n&&(n=Bn.provides=Object.create(r)),n[e]=t}else 0}function le(e,t,n=!1){const r=Bn||F;if(r){const i=null==r.parent?r.vnode.appContext&&r.vnode.appContext.provides:r.parent.provides;if(i&&e in i)return i[e];if(arguments.length>1)return n&&(0,o.mf)(t)?t.call(r.proxy):t}else 0}function se(e,t){return de(e,null,t)}function ue(e,t){return de(e,null,{flush:"post"})}function ce(e,t){return de(e,null,{flush:"sync"})}const fe={};function pe(e,t,n){return de(e,t,n)}function de(e,t,{immediate:n,deep:i,flush:a,onTrack:l,onTrigger:s}=o.kT){const f=Bn;let p,d,h=!1,y=!1;if((0,r.dq)(e)?(p=()=>e.value,h=(0,r.yT)(e)):(0,r.PG)(e)?(p=()=>e,i=!0):(0,o.kJ)(e)?(y=!0,h=e.some(r.PG),p=()=>e.map((e=>(0,r.dq)(e)?e.value:(0,r.PG)(e)?ve(e):(0,o.mf)(e)?u(e,f,2):void 0))):p=(0,o.mf)(e)?t?()=>u(e,f,2):()=>{if(!f||!f.isUnmounted)return d&&d(),c(e,f,3,[b])}:o.dG,t&&i){const e=p;p=()=>ve(e())}let b=e=>{d=k.onStop=()=>{u(e,f,4)}};if(Kn)return b=o.dG,t?n&&c(t,f,3,[p(),y?[]:void 0,b]):p(),o.dG;let _=y?[]:fe;const w=()=>{if(k.active)if(t){const e=k.run();(i||h||(y?e.some(((e,t)=>(0,o.aU)(e,_[t]))):(0,o.aU)(e,_)))&&(d&&d(),c(t,f,3,[e,_===fe?void 0:_,b]),_=e)}else k.run()};let O;w.allowRecurse=!!t,O="sync"===a?w:"post"===a?()=>Tt(w,f&&f.suspense):()=>{!f||f.isMounted?function(e){A(e,m,v,g)}(w):w()};const k=new r.qq(p,O);return t?n?w():_=k.run():"post"===a?Tt(k.run.bind(k),f&&f.suspense):k.run(),()=>{k.stop(),f&&f.scope&&(0,o.Od)(f.scope.effects,k)}}function he(e,t,n){const r=this.proxy,i=(0,o.HD)(e)?e.includes(".")?ye(r,e):()=>r[e]:e.bind(r,r);let a;(0,o.mf)(t)?a=t:(a=t.handler,n=t);const l=Bn;$n(this);const s=de(i,a.bind(r),n);return l?$n(l):Vn(),s}function ye(e,t){const n=t.split(".");return()=>{let t=e;for(let e=0;e<n.length&&t;e++)t=t[n[e]];return t}}function ve(e,t){if(!(0,o.Kn)(e)||e.__v_skip)return e;if((t=t||new Set).has(e))return e;if(t.add(e),(0,r.dq)(e))ve(e.value,t);else if((0,o.kJ)(e))for(let n=0;n<e.length;n++)ve(e[n],t);else if((0,o.DM)(e)||(0,o._N)(e))e.forEach((e=>{ve(e,t)}));else if((0,o.PO)(e))for(const n in e)ve(e[n],t);return e}function me(){const e={isMounted:!1,isLeaving:!1,isUnmounting:!1,leavingVNodes:new Map};return $e((()=>{e.isMounted=!0})),ze((()=>{e.isUnmounting=!0})),e}const ge=[Function,Array],be={name:"BaseTransition",props:{mode:String,appear:Boolean,persisted:Boolean,onBeforeEnter:ge,onEnter:ge,onAfterEnter:ge,onEnterCancelled:ge,onBeforeLeave:ge,onLeave:ge,onAfterLeave:ge,onLeaveCancelled:ge,onBeforeAppear:ge,onAppear:ge,onAfterAppear:ge,onAppearCancelled:ge},setup(e,{slots:t}){const n=Fn(),o=me();let i;return()=>{const a=t.default&&xe(t.default(),!0);if(!a||!a.length)return;let l=a[0];if(a.length>1){let e=!1;for(const t of a)if(t.type!==Gt){0,l=t,e=!0;break}}const s=(0,r.IU)(e),{mode:u}=s;if(o.isLeaving)return Oe(l);const c=ke(l);if(!c)return Oe(l);const f=we(c,s,o,n);Se(c,f);const p=n.subTree,d=p&&ke(p);let h=!1;const{getTransitionKey:y}=c.type;if(y){const e=y();void 0===i?i=e:e!==i&&(i=e,h=!0)}if(d&&d.type!==Gt&&(!cn(c,d)||h)){const e=we(d,s,o,n);if(Se(d,e),"out-in"===u)return o.isLeaving=!0,e.afterLeave=()=>{o.isLeaving=!1,n.update()},Oe(l);"in-out"===u&&c.type!==Gt&&(e.delayLeave=(e,t,n)=>{_e(o,d)[String(d.key)]=d,e._leaveCb=()=>{t(),e._leaveCb=void 0,delete f.delayedLeave},f.delayedLeave=n})}return l}}};function _e(e,t){const{leavingVNodes:n}=e;let r=n.get(t.type);return r||(r=Object.create(null),n.set(t.type,r)),r}function we(e,t,n,r){const{appear:o,mode:i,persisted:a=!1,onBeforeEnter:l,onEnter:s,onAfterEnter:u,onEnterCancelled:f,onBeforeLeave:p,onLeave:d,onAfterLeave:h,onLeaveCancelled:y,onBeforeAppear:v,onAppear:m,onAfterAppear:g,onAppearCancelled:b}=t,_=String(e.key),w=_e(n,e),O=(e,t)=>{e&&c(e,r,9,t)},k={mode:i,persisted:a,beforeEnter(t){let r=l;if(!n.isMounted){if(!o)return;r=v||l}t._leaveCb&&t._leaveCb(!0);const i=w[_];i&&cn(e,i)&&i.el._leaveCb&&i.el._leaveCb(),O(r,[t])},enter(e){let t=s,r=u,i=f;if(!n.isMounted){if(!o)return;t=m||s,r=g||u,i=b||f}let a=!1;const l=e._enterCb=t=>{a||(a=!0,O(t?i:r,[e]),k.delayedLeave&&k.delayedLeave(),e._enterCb=void 0)};t?(t(e,l),t.length<=1&&l()):l()},leave(t,r){const o=String(e.key);if(t._enterCb&&t._enterCb(!0),n.isUnmounting)return r();O(p,[t]);let i=!1;const a=t._leaveCb=n=>{i||(i=!0,r(),O(n?y:h,[t]),t._leaveCb=void 0,w[o]===e&&delete w[o])};w[o]=e,d?(d(t,a),d.length<=1&&a()):a()},clone:e=>we(e,t,n,r)};return k}function Oe(e){if(Te(e))return(e=bn(e)).children=null,e}function ke(e){return Te(e)?e.children?e.children[0]:void 0:e}function Se(e,t){6&e.shapeFlag&&e.component?Se(e.component.subTree,t):128&e.shapeFlag?(e.ssContent.transition=t.clone(e.ssContent),e.ssFallback.transition=t.clone(e.ssFallback)):e.transition=t}function xe(e,t=!1,n){let r=[],o=0;for(let i=0;i<e.length;i++){let a=e[i];const l=null==n?a.key:String(n)+String(null!=a.key?a.key:i);a.type===Zt?(128&a.patchFlag&&o++,r=r.concat(xe(a.children,t,l))):(t||a.type!==Gt)&&r.push(null!=l?bn(a,{key:l}):a)}if(o>1)for(let e=0;e<r.length;e++)r[e].patchFlag=-2;return r}function Ee(e){return(0,o.mf)(e)?{setup:e,name:e.name}:e}const je=e=>!!e.type.__asyncLoader;function Ae(e){(0,o.mf)(e)&&(e={loader:e});const{loader:t,loadingComponent:n,errorComponent:i,delay:a=200,timeout:l,suspensible:s=!0,onError:u}=e;let c,p=null,d=0;const h=()=>{let e;return p||(e=p=t().catch((e=>{if(e=e instanceof Error?e:new Error(String(e)),u)return new Promise(((t,n)=>{u(e,(()=>t((d++,p=null,h()))),(()=>n(e)),d+1)}));throw e})).then((t=>e!==p&&p?p:(t&&(t.__esModule||"Module"===t[Symbol.toStringTag])&&(t=t.default),c=t,t))))};return Ee({name:"AsyncComponentWrapper",__asyncLoader:h,get __asyncResolved(){return c},setup(){const e=Bn;if(c)return()=>Pe(c,e);const t=t=>{p=null,f(t,e,13,!i)};if(s&&e.suspense||Kn)return h().then((t=>()=>Pe(t,e))).catch((e=>(t(e),()=>i?vn(i,{error:e}):null)));const o=(0,r.iH)(!1),u=(0,r.iH)(),d=(0,r.iH)(!!a);return a&&setTimeout((()=>{d.value=!1}),a),null!=l&&setTimeout((()=>{if(!o.value&&!u.value){const e=new Error(`Async component timed out after ${l}ms.`);t(e),u.value=e}}),l),h().then((()=>{o.value=!0,e.parent&&Te(e.parent.vnode)&&E(e.parent.update)})).catch((e=>{t(e),u.value=e})),()=>o.value&&c?Pe(c,e):u.value&&i?vn(i,{error:u.value}):n&&!d.value?vn(n):void 0}})}function Pe(e,{vnode:{ref:t,props:n,children:r}}){const o=vn(e,n,r);return o.ref=t,o}const Te=e=>e.type.__isKeepAlive,Ce={name:"KeepAlive",__isKeepAlive:!0,props:{include:[String,RegExp,Array],exclude:[String,RegExp,Array],max:[String,Number]},setup(e,{slots:t}){const n=Fn(),r=n.ctx;if(!r.renderer)return t.default;const i=new Map,a=new Set;let l=null;const s=n.suspense,{renderer:{p:u,m:c,um:f,o:{createElement:p}}}=r,d=p("div");function h(e){Me(e),f(e,n,s,!0)}function y(e){i.forEach(((t,n)=>{const r=nr(t.type);!r||e&&e(r)||v(n)}))}function v(e){const t=i.get(e);l&&t.type===l.type?l&&Me(l):h(t),i.delete(e),a.delete(e)}r.activate=(e,t,n,r,i)=>{const a=e.component;c(e,t,n,0,s),u(a.vnode,e,t,n,a,s,r,e.slotScopeIds,i),Tt((()=>{a.isDeactivated=!1,a.a&&(0,o.ir)(a.a);const t=e.props&&e.props.onVnodeMounted;t&&jn(t,a.parent,e)}),s)},r.deactivate=e=>{const t=e.component;c(e,d,null,1,s),Tt((()=>{t.da&&(0,o.ir)(t.da);const n=e.props&&e.props.onVnodeUnmounted;n&&jn(n,t.parent,e),t.isDeactivated=!0}),s)},pe((()=>[e.include,e.exclude]),(([e,t])=>{e&&y((t=>Ne(e,t))),t&&y((e=>!Ne(t,e)))}),{flush:"post",deep:!0});let m=null;const g=()=>{null!=m&&i.set(m,De(n.subTree))};return $e(g),He(g),ze((()=>{i.forEach((e=>{const{subTree:t,suspense:r}=n,o=De(t);if(e.type!==o.type)h(e);else{Me(o);const e=o.component.da;e&&Tt(e,r)}}))})),()=>{if(m=null,!t.default)return null;const n=t.default(),r=n[0];if(n.length>1)return l=null,n;if(!(un(r)&&(4&r.shapeFlag||128&r.shapeFlag)))return l=null,r;let o=De(r);const s=o.type,u=nr(je(o)?o.type.__asyncResolved||{}:s),{include:c,exclude:f,max:p}=e;if(c&&(!u||!Ne(c,u))||f&&u&&Ne(f,u))return l=o,r;const d=null==o.key?s:o.key,h=i.get(d);return o.el&&(o=bn(o),128&r.shapeFlag&&(r.ssContent=o)),m=d,h?(o.el=h.el,o.component=h.component,o.transition&&Se(o,o.transition),o.shapeFlag|=512,a.delete(d),a.add(d)):(a.add(d),p&&a.size>parseInt(p,10)&&v(a.values().next().value)),o.shapeFlag|=256,l=o,r}}};function Ne(e,t){return(0,o.kJ)(e)?e.some((e=>Ne(e,t))):(0,o.HD)(e)?e.split(",").includes(t):!!e.test&&e.test(t)}function qe(e,t){Re(e,"a",t)}function Le(e,t){Re(e,"da",t)}function Re(e,t,n=Bn){const r=e.__wdc||(e.__wdc=()=>{let t=n;for(;t;){if(t.isDeactivated)return;t=t.parent}return e()});if(Ue(t,r,n),n){let e=n.parent;for(;e&&e.parent;)Te(e.parent.vnode)&&Ie(r,t,n,e),e=e.parent}}function Ie(e,t,n,r){const i=Ue(t,e,r,!0);We((()=>{(0,o.Od)(r[t],i)}),n)}function Me(e){let t=e.shapeFlag;256&t&&(t-=256),512&t&&(t-=512),e.shapeFlag=t}function De(e){return 128&e.shapeFlag?e.ssContent:e}function Ue(e,t,n=Bn,o=!1){if(n){const i=n[e]||(n[e]=[]),a=t.__weh||(t.__weh=(...o)=>{if(n.isUnmounted)return;(0,r.Jd)(),$n(n);const i=c(t,n,e,o);return Vn(),(0,r.lk)(),i});return o?i.unshift(a):i.push(a),a}}const Be=e=>(t,n=Bn)=>(!Kn||"sp"===e)&&Ue(e,t,n),Fe=Be("bm"),$e=Be("m"),Ve=Be("bu"),He=Be("u"),ze=Be("bum"),We=Be("um"),Ke=Be("sp"),Ze=Be("rtg"),Ye=Be("rtc");function Ge(e,t=Bn){Ue("ec",e,t)}let Je=!0;function Xe(e){const t=tt(e),n=e.proxy,i=e.ctx;Je=!1,t.beforeCreate&&Qe(t.beforeCreate,e,"bc");const{data:a,computed:l,methods:s,watch:u,provide:c,inject:f,created:p,beforeMount:d,mounted:h,beforeUpdate:y,updated:v,activated:m,deactivated:g,beforeDestroy:b,beforeUnmount:_,destroyed:w,unmounted:O,render:k,renderTracked:S,renderTriggered:x,errorCaptured:E,serverPrefetch:j,expose:A,inheritAttrs:P,components:T,directives:C,filters:N}=t;if(f&&function(e,t,n=o.dG,i=!1){(0,o.kJ)(e)&&(e=it(e));for(const n in e){const a=e[n];let l;l=(0,o.Kn)(a)?"default"in a?le(a.from||n,a.default,!0):le(a.from||n):le(a),(0,r.dq)(l)&&i?Object.defineProperty(t,n,{enumerable:!0,configurable:!0,get:()=>l.value,set:e=>l.value=e}):t[n]=l}}(f,i,null,e.appContext.config.unwrapInjectedRef),s)for(const e in s){const t=s[e];(0,o.mf)(t)&&(i[e]=t.bind(n))}if(a){0;const t=a.call(n,n);0,(0,o.Kn)(t)&&(e.data=(0,r.qj)(t))}if(Je=!0,l)for(const e in l){const t=l[e],r=(0,o.mf)(t)?t.bind(n,n):(0,o.mf)(t.get)?t.get.bind(n,n):o.dG;0;const a=!(0,o.mf)(t)&&(0,o.mf)(t.set)?t.set.bind(n):o.dG,s=ir({get:r,set:a});Object.defineProperty(i,e,{enumerable:!0,configurable:!0,get:()=>s.value,set:e=>s.value=e})}if(u)for(const e in u)et(u[e],i,n,e);if(c){const e=(0,o.mf)(c)?c.call(n):c;Reflect.ownKeys(e).forEach((t=>{ae(t,e[t])}))}function q(e,t){(0,o.kJ)(t)?t.forEach((t=>e(t.bind(n)))):t&&e(t.bind(n))}if(p&&Qe(p,e,"c"),q(Fe,d),q($e,h),q(Ve,y),q(He,v),q(qe,m),q(Le,g),q(Ge,E),q(Ye,S),q(Ze,x),q(ze,_),q(We,O),q(Ke,j),(0,o.kJ)(A))if(A.length){const t=e.exposed||(e.exposed={});A.forEach((e=>{Object.defineProperty(t,e,{get:()=>n[e],set:t=>n[e]=t})}))}else e.exposed||(e.exposed={});k&&e.render===o.dG&&(e.render=k),null!=P&&(e.inheritAttrs=P),T&&(e.components=T),C&&(e.directives=C)}function Qe(e,t,n){c((0,o.kJ)(e)?e.map((e=>e.bind(t.proxy))):e.bind(t.proxy),t,n)}function et(e,t,n,r){const i=r.includes(".")?ye(n,r):()=>n[r];if((0,o.HD)(e)){const n=t[e];(0,o.mf)(n)&&pe(i,n)}else if((0,o.mf)(e))pe(i,e.bind(n));else if((0,o.Kn)(e))if((0,o.kJ)(e))e.forEach((e=>et(e,t,n,r)));else{const r=(0,o.mf)(e.handler)?e.handler.bind(n):t[e.handler];(0,o.mf)(r)&&pe(i,r,e)}else 0}function tt(e){const t=e.type,{mixins:n,extends:r}=t,{mixins:o,optionsCache:i,config:{optionMergeStrategies:a}}=e.appContext,l=i.get(t);let s;return l?s=l:o.length||n||r?(s={},o.length&&o.forEach((e=>nt(s,e,a,!0))),nt(s,t,a)):s=t,i.set(t,s),s}function nt(e,t,n,r=!1){const{mixins:o,extends:i}=t;i&&nt(e,i,n,!0),o&&o.forEach((t=>nt(e,t,n,!0)));for(const o in t)if(r&&"expose"===o);else{const r=rt[o]||n&&n[o];e[o]=r?r(e[o],t[o]):t[o]}return e}const rt={data:ot,props:lt,emits:lt,methods:lt,computed:lt,beforeCreate:at,created:at,beforeMount:at,mounted:at,beforeUpdate:at,updated:at,beforeDestroy:at,beforeUnmount:at,destroyed:at,unmounted:at,activated:at,deactivated:at,errorCaptured:at,serverPrefetch:at,components:lt,directives:lt,watch:function(e,t){if(!e)return t;if(!t)return e;const n=(0,o.l7)(Object.create(null),e);for(const r in t)n[r]=at(e[r],t[r]);return n},provide:ot,inject:function(e,t){return lt(it(e),it(t))}};function ot(e,t){return t?e?function(){return(0,o.l7)((0,o.mf)(e)?e.call(this,this):e,(0,o.mf)(t)?t.call(this,this):t)}:t:e}function it(e){if((0,o.kJ)(e)){const t={};for(let n=0;n<e.length;n++)t[e[n]]=e[n];return t}return e}function at(e,t){return e?[...new Set([].concat(e,t))]:t}function lt(e,t){return e?(0,o.l7)((0,o.l7)(Object.create(null),e),t):t}function st(e,t,n,i){const[a,l]=e.propsOptions;let s,u=!1;if(t)for(let r in t){if((0,o.Gg)(r))continue;const c=t[r];let f;a&&(0,o.RI)(a,f=(0,o._A)(r))?l&&l.includes(f)?(s||(s={}))[f]=c:n[f]=c:B(e.emitsOptions,r)||r in i&&c===i[r]||(i[r]=c,u=!0)}if(l){const t=(0,r.IU)(n),i=s||o.kT;for(let r=0;r<l.length;r++){const s=l[r];n[s]=ut(a,t,s,i[s],e,!(0,o.RI)(i,s))}}return u}function ut(e,t,n,r,i,a){const l=e[n];if(null!=l){const e=(0,o.RI)(l,"default");if(e&&void 0===r){const e=l.default;if(l.type!==Function&&(0,o.mf)(e)){const{propsDefaults:o}=i;n in o?r=o[n]:($n(i),r=o[n]=e.call(null,t),Vn())}else r=e}l[0]&&(a&&!e?r=!1:!l[1]||""!==r&&r!==(0,o.rs)(n)||(r=!0))}return r}function ct(e,t,n=!1){const r=t.propsCache,i=r.get(e);if(i)return i;const a=e.props,l={},s=[];let u=!1;if(!(0,o.mf)(e)){const r=e=>{u=!0;const[n,r]=ct(e,t,!0);(0,o.l7)(l,n),r&&s.push(...r)};!n&&t.mixins.length&&t.mixins.forEach(r),e.extends&&r(e.extends),e.mixins&&e.mixins.forEach(r)}if(!a&&!u)return r.set(e,o.Z6),o.Z6;if((0,o.kJ)(a))for(let e=0;e<a.length;e++){0;const t=(0,o._A)(a[e]);ft(t)&&(l[t]=o.kT)}else if(a){0;for(const e in a){const t=(0,o._A)(e);if(ft(t)){const n=a[e],r=l[t]=(0,o.kJ)(n)||(0,o.mf)(n)?{type:n}:n;if(r){const e=ht(Boolean,r.type),n=ht(String,r.type);r[0]=e>-1,r[1]=n<0||e<n,(e>-1||(0,o.RI)(r,"default"))&&s.push(t)}}}}const c=[l,s];return r.set(e,c),c}function ft(e){return"$"!==e[0]}function pt(e){const t=e&&e.toString().match(/^\s*function (\w+)/);return t?t[1]:null===e?"null":""}function dt(e,t){return pt(e)===pt(t)}function ht(e,t){return(0,o.kJ)(t)?t.findIndex((t=>dt(t,e))):(0,o.mf)(t)&&dt(t,e)?0:-1}const yt=e=>"_"===e[0]||"$stable"===e,vt=e=>(0,o.kJ)(e)?e.map(kn):[kn(e)],mt=(e,t,n)=>{const r=K(((...e)=>vt(t(...e))),n);return r._c=!1,r},gt=(e,t,n)=>{const r=e._ctx;for(const n in e){if(yt(n))continue;const i=e[n];if((0,o.mf)(i))t[n]=mt(0,i,r);else if(null!=i){0;const e=vt(i);t[n]=()=>e}}},bt=(e,t)=>{const n=vt(t);e.slots.default=()=>n};function _t(e,t){const n=F;if(null===n)return e;const r=er(n)||n.proxy,i=e.dirs||(e.dirs=[]);for(let e=0;e<t.length;e++){let[n,a,l,s=o.kT]=t[e];(0,o.mf)(n)&&(n={mounted:n,updated:n}),n.deep&&ve(a),i.push({dir:n,instance:r,value:a,oldValue:void 0,arg:l,modifiers:s})}return e}function wt(e,t,n,o){const i=e.dirs,a=t&&t.dirs;for(let l=0;l<i.length;l++){const s=i[l];a&&(s.oldValue=a[l].value);let u=s.dir[o];u&&((0,r.Jd)(),c(u,n,8,[e.el,s,e,t]),(0,r.lk)())}}function Ot(){return{app:null,config:{isNativeTag:o.NO,performance:!1,globalProperties:{},optionMergeStrategies:{},errorHandler:void 0,warnHandler:void 0,compilerOptions:{}},mixins:[],components:{},directives:{},provides:Object.create(null),optionsCache:new WeakMap,propsCache:new WeakMap,emitsCache:new WeakMap}}let kt=0;function St(e,t){return function(n,r=null){(0,o.mf)(n)||(n=Object.assign({},n)),null==r||(0,o.Kn)(r)||(r=null);const i=Ot(),a=new Set;let l=!1;const s=i.app={_uid:kt++,_component:n,_props:r,_container:null,_context:i,_instance:null,version:Or,get config(){return i.config},set config(e){0},use:(e,...t)=>(a.has(e)||(e&&(0,o.mf)(e.install)?(a.add(e),e.install(s,...t)):(0,o.mf)(e)&&(a.add(e),e(s,...t))),s),mixin:e=>(i.mixins.includes(e)||i.mixins.push(e),s),component:(e,t)=>t?(i.components[e]=t,s):i.components[e],directive:(e,t)=>t?(i.directives[e]=t,s):i.directives[e],mount(o,a,u){if(!l){const c=vn(n,r);return c.appContext=i,a&&t?t(c,o):e(c,o,u),l=!0,s._container=o,o.__vue_app__=s,er(c.component)||c.component.proxy}},unmount(){l&&(e(null,s._container),delete s._container.__vue_app__)},provide:(e,t)=>(i.provides[e]=t,s)};return s}}function xt(e,t,n,i,a=!1){if((0,o.kJ)(e))return void e.forEach(((e,r)=>xt(e,t&&((0,o.kJ)(t)?t[r]:t),n,i,a)));if(je(i)&&!a)return;const l=4&i.shapeFlag?er(i.component)||i.component.proxy:i.el,s=a?null:l,{i:c,r:f}=e;const p=t&&t.r,d=c.refs===o.kT?c.refs={}:c.refs,h=c.setupState;if(null!=p&&p!==f&&((0,o.HD)(p)?(d[p]=null,(0,o.RI)(h,p)&&(h[p]=null)):(0,r.dq)(p)&&(p.value=null)),(0,o.mf)(f))u(f,c,12,[s,d]);else{const t=(0,o.HD)(f),i=(0,r.dq)(f);if(t||i){const i=()=>{if(e.f){const n=t?d[f]:f.value;a?(0,o.kJ)(n)&&(0,o.Od)(n,l):(0,o.kJ)(n)?n.includes(l)||n.push(l):t?(d[f]=[l],(0,o.RI)(h,f)&&(h[f]=d[f])):(f.value=[l],e.k&&(d[e.k]=f.value))}else t?(d[f]=s,(0,o.RI)(h,f)&&(h[f]=s)):(0,r.dq)(f)&&(f.value=s,e.k&&(d[e.k]=s))};s?(i.id=-1,Tt(i,n)):i()}else 0}}let Et=!1;const jt=e=>/svg/.test(e.namespaceURI)&&"foreignObject"!==e.tagName,At=e=>8===e.nodeType;function Pt(e){const{mt:t,p:n,o:{patchProp:r,nextSibling:i,parentNode:a,remove:l,insert:s,createComment:u}}=e,c=(n,r,o,l,s,u=!1)=>{const v=At(n)&&"["===n.data,m=()=>h(n,r,o,l,s,v),{type:g,ref:b,shapeFlag:_}=r,w=n.nodeType;r.el=n;let O=null;switch(g){case Yt:3!==w?O=m():(n.data!==r.children&&(Et=!0,n.data=r.children),O=i(n));break;case Gt:O=8!==w||v?m():i(n);break;case Jt:if(1===w){O=n;const e=!r.children.length;for(let t=0;t<r.staticCount;t++)e&&(r.children+=O.outerHTML),t===r.staticCount-1&&(r.anchor=O),O=i(O);return O}O=m();break;case Zt:O=v?d(n,r,o,l,s,u):m();break;default:if(1&_)O=1!==w||r.type.toLowerCase()!==n.tagName.toLowerCase()?m():f(n,r,o,l,s,u);else if(6&_){r.slotScopeIds=s;const e=a(n);if(t(r,e,null,o,l,jt(e),u),O=v?y(n):i(n),je(r)){let t;v?(t=vn(Zt),t.anchor=O?O.previousSibling:e.lastChild):t=3===n.nodeType?_n(""):vn("div"),t.el=n,r.component.subTree=t}}else 64&_?O=8!==w?m():r.type.hydrate(n,r,o,l,s,u,e,p):128&_&&(O=r.type.hydrate(n,r,o,l,jt(a(n)),s,u,e,c))}return null!=b&&xt(b,null,l,r),O},f=(e,t,n,i,a,s)=>{s=s||!!t.dynamicChildren;const{type:u,props:c,patchFlag:f,shapeFlag:d,dirs:h}=t,y="input"===u&&h||"option"===u;if(y||-1!==f){if(h&&wt(t,null,n,"created"),c)if(y||!s||48&f)for(const t in c)(y&&t.endsWith("value")||(0,o.F7)(t)&&!(0,o.Gg)(t))&&r(e,t,null,c[t],!1,void 0,n);else c.onClick&&r(e,"onClick",null,c.onClick,!1,void 0,n);let u;if((u=c&&c.onVnodeBeforeMount)&&jn(u,n,t),h&&wt(t,null,n,"beforeMount"),((u=c&&c.onVnodeMounted)||h)&&oe((()=>{u&&jn(u,n,t),h&&wt(t,null,n,"mounted")}),i),16&d&&(!c||!c.innerHTML&&!c.textContent)){let r=p(e.firstChild,t,e,n,i,a,s);for(;r;){Et=!0;const e=r;r=r.nextSibling,l(e)}}else 8&d&&e.textContent!==t.children&&(Et=!0,e.textContent=t.children)}return e.nextSibling},p=(e,t,r,o,i,a,l)=>{l=l||!!t.dynamicChildren;const s=t.children,u=s.length;for(let t=0;t<u;t++){const u=l?s[t]:s[t]=kn(s[t]);if(e)e=c(e,u,o,i,a,l);else{if(u.type===Yt&&!u.children)continue;Et=!0,n(null,u,r,null,o,i,jt(r),a)}}return e},d=(e,t,n,r,o,l)=>{const{slotScopeIds:c}=t;c&&(o=o?o.concat(c):c);const f=a(e),d=p(i(e),t,f,n,r,o,l);return d&&At(d)&&"]"===d.data?i(t.anchor=d):(Et=!0,s(t.anchor=u("]"),f,d),d)},h=(e,t,r,o,s,u)=>{if(Et=!0,t.el=null,u){const t=y(e);for(;;){const n=i(e);if(!n||n===t)break;l(n)}}const c=i(e),f=a(e);return l(e),n(null,t,f,c,r,o,jt(f),s),c},y=e=>{let t=0;for(;e;)if((e=i(e))&&At(e)&&("["===e.data&&t++,"]"===e.data)){if(0===t)return i(e);t--}return e};return[(e,t)=>{if(!t.hasChildNodes())return n(null,e,t),void C();Et=!1,c(t.firstChild,e,null,null,null),C(),Et&&console.error("Hydration completed but contains mismatches.")},c]}const Tt=oe;function Ct(e){return qt(e)}function Nt(e){return qt(e,Pt)}function qt(e,t){(0,o.E9)().__VUE__=!0;const{insert:n,remove:i,patchProp:a,createElement:l,createText:s,createComment:u,setText:c,setElementText:f,parentNode:p,nextSibling:d,setScopeId:v=o.dG,cloneNode:m,insertStaticContent:g}=e,b=(e,t,n,r=null,o=null,i=null,a=!1,l=null,s=!!t.dynamicChildren)=>{if(e===t)return;e&&!cn(e,t)&&(r=J(e),z(e,o,i,!0),e=null),-2===t.patchFlag&&(s=!1,t.dynamicChildren=null);const{type:u,ref:c,shapeFlag:f}=t;switch(u){case Yt:_(e,t,n,r);break;case Gt:w(e,t,n,r);break;case Jt:null==e&&O(t,n,r,a);break;case Zt:L(e,t,n,r,o,i,a,l,s);break;default:1&f?S(e,t,n,r,o,i,a,l,s):6&f?R(e,t,n,r,o,i,a,l,s):(64&f||128&f)&&u.process(e,t,n,r,o,i,a,l,s,te)}null!=c&&o&&xt(c,e&&e.ref,i,t||e,!t)},_=(e,t,r,o)=>{if(null==e)n(t.el=s(t.children),r,o);else{const n=t.el=e.el;t.children!==e.children&&c(n,t.children)}},w=(e,t,r,o)=>{null==e?n(t.el=u(t.children||""),r,o):t.el=e.el},O=(e,t,n,r)=>{[e.el,e.anchor]=g(e.children,t,n,r,e.el,e.anchor)},k=({el:e,anchor:t})=>{let n;for(;e&&e!==t;)n=d(e),i(e),e=n;i(t)},S=(e,t,n,r,o,i,a,l,s)=>{a=a||"svg"===t.type,null==e?x(t,n,r,o,i,a,l,s):P(e,t,o,i,a,l,s)},x=(e,t,r,i,s,u,c,p)=>{let d,h;const{type:y,props:v,shapeFlag:g,transition:b,patchFlag:_,dirs:w}=e;if(e.el&&void 0!==m&&-1===_)d=e.el=m(e.el);else{if(d=e.el=l(e.type,u,v&&v.is,v),8&g?f(d,e.children):16&g&&A(e.children,d,null,i,s,u&&"foreignObject"!==y,c,p),w&&wt(e,null,i,"created"),v){for(const t in v)"value"===t||(0,o.Gg)(t)||a(d,t,null,v[t],u,e.children,i,s,G);"value"in v&&a(d,"value",null,v.value),(h=v.onVnodeBeforeMount)&&jn(h,i,e)}j(d,e,e.scopeId,c,i)}w&&wt(e,null,i,"beforeMount");const O=(!s||s&&!s.pendingBranch)&&b&&!b.persisted;O&&b.beforeEnter(d),n(d,t,r),((h=v&&v.onVnodeMounted)||O||w)&&Tt((()=>{h&&jn(h,i,e),O&&b.enter(d),w&&wt(e,null,i,"mounted")}),s)},j=(e,t,n,r,o)=>{if(n&&v(e,n),r)for(let t=0;t<r.length;t++)v(e,r[t]);if(o){if(t===o.subTree){const t=o.vnode;j(e,t,t.scopeId,t.slotScopeIds,o.parent)}}},A=(e,t,n,r,o,i,a,l,s=0)=>{for(let u=s;u<e.length;u++){const s=e[u]=l?Sn(e[u]):kn(e[u]);b(null,s,t,n,r,o,i,a,l)}},P=(e,t,n,r,i,l,s)=>{const u=t.el=e.el;let{patchFlag:c,dynamicChildren:p,dirs:d}=t;c|=16&e.patchFlag;const h=e.props||o.kT,y=t.props||o.kT;let v;n&&Lt(n,!1),(v=y.onVnodeBeforeUpdate)&&jn(v,n,t,e),d&&wt(t,e,n,"beforeUpdate"),n&&Lt(n,!0);const m=i&&"foreignObject"!==t.type;if(p?N(e.dynamicChildren,p,u,n,r,m,l):s||F(e,t,u,null,n,r,m,l,!1),c>0){if(16&c)q(u,t,h,y,n,r,i);else if(2&c&&h.class!==y.class&&a(u,"class",null,y.class,i),4&c&&a(u,"style",h.style,y.style,i),8&c){const o=t.dynamicProps;for(let t=0;t<o.length;t++){const l=o[t],s=h[l],c=y[l];c===s&&"value"!==l||a(u,l,s,c,i,e.children,n,r,G)}}1&c&&e.children!==t.children&&f(u,t.children)}else s||null!=p||q(u,t,h,y,n,r,i);((v=y.onVnodeUpdated)||d)&&Tt((()=>{v&&jn(v,n,t,e),d&&wt(t,e,n,"updated")}),r)},N=(e,t,n,r,o,i,a)=>{for(let l=0;l<t.length;l++){const s=e[l],u=t[l],c=s.el&&(s.type===Zt||!cn(s,u)||70&s.shapeFlag)?p(s.el):n;b(s,u,c,null,r,o,i,a,!0)}},q=(e,t,n,r,i,l,s)=>{if(n!==r){for(const u in r){if((0,o.Gg)(u))continue;const c=r[u],f=n[u];c!==f&&"value"!==u&&a(e,u,f,c,s,t.children,i,l,G)}if(n!==o.kT)for(const u in n)(0,o.Gg)(u)||u in r||a(e,u,n[u],null,s,t.children,i,l,G);"value"in r&&a(e,"value",n.value,r.value)}},L=(e,t,r,o,i,a,l,u,c)=>{const f=t.el=e?e.el:s(""),p=t.anchor=e?e.anchor:s("");let{patchFlag:d,dynamicChildren:h,slotScopeIds:y}=t;y&&(u=u?u.concat(y):y),null==e?(n(f,r,o),n(p,r,o),A(t.children,r,p,i,a,l,u,c)):d>0&&64&d&&h&&e.dynamicChildren?(N(e.dynamicChildren,h,r,i,a,l,u),(null!=t.key||i&&t===i.subTree)&&Rt(e,t,!0)):F(e,t,r,p,i,a,l,u,c)},R=(e,t,n,r,o,i,a,l,s)=>{t.slotScopeIds=l,null==e?512&t.shapeFlag?o.ctx.activate(t,n,r,a,s):I(t,n,r,o,i,a,s):M(e,t,s)},I=(e,t,n,r,o,i,a)=>{const l=e.component=Un(e,r,o);if(Te(e)&&(l.ctx.renderer=te),Zn(l),l.asyncDep){if(o&&o.registerDep(l,D),!e.el){const e=l.subTree=vn(Gt);w(null,e,t,n)}}else D(l,e,t,n,o,i,a)},M=(e,t,n)=>{const r=t.component=e.component;if(function(e,t,n){const{props:r,children:o,component:i}=e,{props:a,children:l,patchFlag:s}=t,u=i.emitsOptions;if(t.dirs||t.transition)return!0;if(!(n&&s>=0))return!(!o&&!l||l&&l.$stable)||r!==a&&(r?!a||X(r,a,u):!!a);if(1024&s)return!0;if(16&s)return r?X(r,a,u):!!a;if(8&s){const e=t.dynamicProps;for(let t=0;t<e.length;t++){const n=e[t];if(a[n]!==r[n]&&!B(u,n))return!0}}return!1}(e,t,n)){if(r.asyncDep&&!r.asyncResolved)return void U(r,t,n);r.next=t,function(e){const t=h.indexOf(e);t>y&&h.splice(t,1)}(r.update),r.update()}else t.component=e.component,t.el=e.el,r.vnode=t},D=(e,t,n,i,a,l,s)=>{const u=e.effect=new r.qq((()=>{if(e.isMounted){let t,{next:n,bu:r,u:i,parent:u,vnode:c}=e,f=n;0,Lt(e,!1),n?(n.el=c.el,U(e,n,s)):n=c,r&&(0,o.ir)(r),(t=n.props&&n.props.onVnodeBeforeUpdate)&&jn(t,u,n,c),Lt(e,!0);const d=Z(e);0;const h=e.subTree;e.subTree=d,b(h,d,p(h.el),J(h),e,a,l),n.el=d.el,null===f&&Q(e,d.el),i&&Tt(i,a),(t=n.props&&n.props.onVnodeUpdated)&&Tt((()=>jn(t,u,n,c)),a)}else{let r;const{el:s,props:u}=t,{bm:c,m:f,parent:p}=e,d=je(t);if(Lt(e,!1),c&&(0,o.ir)(c),!d&&(r=u&&u.onVnodeBeforeMount)&&jn(r,p,t),Lt(e,!0),s&&re){const n=()=>{e.subTree=Z(e),re(s,e.subTree,e,a,null)};d?t.type.__asyncLoader().then((()=>!e.isUnmounted&&n())):n()}else{0;const r=e.subTree=Z(e);0,b(null,r,n,i,e,a,l),t.el=r.el}if(f&&Tt(f,a),!d&&(r=u&&u.onVnodeMounted)){const e=t;Tt((()=>jn(r,p,e)),a)}256&t.shapeFlag&&e.a&&Tt(e.a,a),e.isMounted=!0,t=n=i=null}}),(()=>E(e.update)),e.scope),c=e.update=u.run.bind(u);c.id=e.uid,Lt(e,!0),c()},U=(e,t,n)=>{t.component=e;const i=e.vnode.props;e.vnode=t,e.next=null,function(e,t,n,i){const{props:a,attrs:l,vnode:{patchFlag:s}}=e,u=(0,r.IU)(a),[c]=e.propsOptions;let f=!1;if(!(i||s>0)||16&s){let r;st(e,t,a,l)&&(f=!0);for(const i in u)t&&((0,o.RI)(t,i)||(r=(0,o.rs)(i))!==i&&(0,o.RI)(t,r))||(c?!n||void 0===n[i]&&void 0===n[r]||(a[i]=ut(c,u,i,void 0,e,!0)):delete a[i]);if(l!==u)for(const e in l)t&&(0,o.RI)(t,e)||(delete l[e],f=!0)}else if(8&s){const n=e.vnode.dynamicProps;for(let r=0;r<n.length;r++){let i=n[r];if(B(e.emitsOptions,i))continue;const s=t[i];if(c)if((0,o.RI)(l,i))s!==l[i]&&(l[i]=s,f=!0);else{const t=(0,o._A)(i);a[t]=ut(c,u,t,s,e,!1)}else s!==l[i]&&(l[i]=s,f=!0)}}f&&(0,r.X$)(e,"set","$attrs")}(e,t.props,i,n),((e,t,n)=>{const{vnode:r,slots:i}=e;let a=!0,l=o.kT;if(32&r.shapeFlag){const e=t._;e?n&&1===e?a=!1:((0,o.l7)(i,t),n||1!==e||delete i._):(a=!t.$stable,gt(t,i)),l=t}else t&&(bt(e,t),l={default:1});if(a)for(const e in i)yt(e)||e in l||delete i[e]})(e,t.children,n),(0,r.Jd)(),T(void 0,e.update),(0,r.lk)()},F=(e,t,n,r,o,i,a,l,s=!1)=>{const u=e&&e.children,c=e?e.shapeFlag:0,p=t.children,{patchFlag:d,shapeFlag:h}=t;if(d>0){if(128&d)return void V(u,p,n,r,o,i,a,l,s);if(256&d)return void $(u,p,n,r,o,i,a,l,s)}8&h?(16&c&&G(u,o,i),p!==u&&f(n,p)):16&c?16&h?V(u,p,n,r,o,i,a,l,s):G(u,o,i,!0):(8&c&&f(n,""),16&h&&A(p,n,r,o,i,a,l,s))},$=(e,t,n,r,i,a,l,s,u)=>{e=e||o.Z6,t=t||o.Z6;const c=e.length,f=t.length,p=Math.min(c,f);let d;for(d=0;d<p;d++){const r=t[d]=u?Sn(t[d]):kn(t[d]);b(e[d],r,n,null,i,a,l,s,u)}c>f?G(e,i,a,!0,!1,p):A(t,n,r,i,a,l,s,u,p)},V=(e,t,n,r,i,a,l,s,u)=>{let c=0;const f=t.length;let p=e.length-1,d=f-1;for(;c<=p&&c<=d;){const r=e[c],o=t[c]=u?Sn(t[c]):kn(t[c]);if(!cn(r,o))break;b(r,o,n,null,i,a,l,s,u),c++}for(;c<=p&&c<=d;){const r=e[p],o=t[d]=u?Sn(t[d]):kn(t[d]);if(!cn(r,o))break;b(r,o,n,null,i,a,l,s,u),p--,d--}if(c>p){if(c<=d){const e=d+1,o=e<f?t[e].el:r;for(;c<=d;)b(null,t[c]=u?Sn(t[c]):kn(t[c]),n,o,i,a,l,s,u),c++}}else if(c>d)for(;c<=p;)z(e[c],i,a,!0),c++;else{const h=c,y=c,v=new Map;for(c=y;c<=d;c++){const e=t[c]=u?Sn(t[c]):kn(t[c]);null!=e.key&&v.set(e.key,c)}let m,g=0;const _=d-y+1;let w=!1,O=0;const k=new Array(_);for(c=0;c<_;c++)k[c]=0;for(c=h;c<=p;c++){const r=e[c];if(g>=_){z(r,i,a,!0);continue}let o;if(null!=r.key)o=v.get(r.key);else for(m=y;m<=d;m++)if(0===k[m-y]&&cn(r,t[m])){o=m;break}void 0===o?z(r,i,a,!0):(k[o-y]=c+1,o>=O?O=o:w=!0,b(r,t[o],n,null,i,a,l,s,u),g++)}const S=w?function(e){const t=e.slice(),n=[0];let r,o,i,a,l;const s=e.length;for(r=0;r<s;r++){const s=e[r];if(0!==s){if(o=n[n.length-1],e[o]<s){t[r]=o,n.push(r);continue}for(i=0,a=n.length-1;i<a;)l=i+a>>1,e[n[l]]<s?i=l+1:a=l;s<e[n[i]]&&(i>0&&(t[r]=n[i-1]),n[i]=r)}}i=n.length,a=n[i-1];for(;i-- >0;)n[i]=a,a=t[a];return n}(k):o.Z6;for(m=S.length-1,c=_-1;c>=0;c--){const e=y+c,o=t[e],p=e+1<f?t[e+1].el:r;0===k[c]?b(null,o,n,p,i,a,l,s,u):w&&(m<0||c!==S[m]?H(o,n,p,2):m--)}}},H=(e,t,r,o,i=null)=>{const{el:a,type:l,transition:s,children:u,shapeFlag:c}=e;if(6&c)return void H(e.component.subTree,t,r,o);if(128&c)return void e.suspense.move(t,r,o);if(64&c)return void l.move(e,t,r,te);if(l===Zt){n(a,t,r);for(let e=0;e<u.length;e++)H(u[e],t,r,o);return void n(e.anchor,t,r)}if(l===Jt)return void(({el:e,anchor:t},r,o)=>{let i;for(;e&&e!==t;)i=d(e),n(e,r,o),e=i;n(t,r,o)})(e,t,r);if(2!==o&&1&c&&s)if(0===o)s.beforeEnter(a),n(a,t,r),Tt((()=>s.enter(a)),i);else{const{leave:e,delayLeave:o,afterLeave:i}=s,l=()=>n(a,t,r),u=()=>{e(a,(()=>{l(),i&&i()}))};o?o(a,l,u):u()}else n(a,t,r)},z=(e,t,n,r=!1,o=!1)=>{const{type:i,props:a,ref:l,children:s,dynamicChildren:u,shapeFlag:c,patchFlag:f,dirs:p}=e;if(null!=l&&xt(l,null,n,e,!0),256&c)return void t.ctx.deactivate(e);const d=1&c&&p,h=!je(e);let y;if(h&&(y=a&&a.onVnodeBeforeUnmount)&&jn(y,t,e),6&c)Y(e.component,n,r);else{if(128&c)return void e.suspense.unmount(n,r);d&&wt(e,null,t,"beforeUnmount"),64&c?e.type.remove(e,t,n,o,te,r):u&&(i!==Zt||f>0&&64&f)?G(u,t,n,!1,!0):(i===Zt&&384&f||!o&&16&c)&&G(s,t,n),r&&W(e)}(h&&(y=a&&a.onVnodeUnmounted)||d)&&Tt((()=>{y&&jn(y,t,e),d&&wt(e,null,t,"unmounted")}),n)},W=e=>{const{type:t,el:n,anchor:r,transition:o}=e;if(t===Zt)return void K(n,r);if(t===Jt)return void k(e);const a=()=>{i(n),o&&!o.persisted&&o.afterLeave&&o.afterLeave()};if(1&e.shapeFlag&&o&&!o.persisted){const{leave:t,delayLeave:r}=o,i=()=>t(n,a);r?r(e.el,a,i):i()}else a()},K=(e,t)=>{let n;for(;e!==t;)n=d(e),i(e),e=n;i(t)},Y=(e,t,n)=>{const{bum:r,scope:i,update:a,subTree:l,um:s}=e;r&&(0,o.ir)(r),i.stop(),a&&(a.active=!1,z(l,e,t,n)),s&&Tt(s,t),Tt((()=>{e.isUnmounted=!0}),t),t&&t.pendingBranch&&!t.isUnmounted&&e.asyncDep&&!e.asyncResolved&&e.suspenseId===t.pendingId&&(t.deps--,0===t.deps&&t.resolve())},G=(e,t,n,r=!1,o=!1,i=0)=>{for(let a=i;a<e.length;a++)z(e[a],t,n,r,o)},J=e=>6&e.shapeFlag?J(e.component.subTree):128&e.shapeFlag?e.suspense.next():d(e.anchor||e.el),ee=(e,t,n)=>{null==e?t._vnode&&z(t._vnode,null,null,!0):b(t._vnode||null,e,t,null,null,null,n),C(),t._vnode=e},te={p:b,um:z,m:H,r:W,mt:I,mc:A,pc:F,pbc:N,n:J,o:e};let ne,re;return t&&([ne,re]=t(te)),{render:ee,hydrate:ne,createApp:St(ee,ne)}}function Lt({effect:e,update:t},n){e.allowRecurse=t.allowRecurse=n}function Rt(e,t,n=!1){const r=e.children,i=t.children;if((0,o.kJ)(r)&&(0,o.kJ)(i))for(let e=0;e<r.length;e++){const t=r[e];let o=i[e];1&o.shapeFlag&&!o.dynamicChildren&&((o.patchFlag<=0||32===o.patchFlag)&&(o=i[e]=Sn(i[e]),o.el=t.el),n||Rt(t,o))}}const It=e=>e&&(e.disabled||""===e.disabled),Mt=e=>"undefined"!=typeof SVGElement&&e instanceof SVGElement,Dt=(e,t)=>{const n=e&&e.to;if((0,o.HD)(n)){if(t){const e=t(n);return e}return null}return n};function Ut(e,t,n,{o:{insert:r},m:o},i=2){0===i&&r(e.targetAnchor,t,n);const{el:a,anchor:l,shapeFlag:s,children:u,props:c}=e,f=2===i;if(f&&r(a,t,n),(!f||It(c))&&16&s)for(let e=0;e<u.length;e++)o(u[e],t,n,2);f&&r(l,t,n)}const Bt={__isTeleport:!0,process(e,t,n,r,o,i,a,l,s,u){const{mc:c,pc:f,pbc:p,o:{insert:d,querySelector:h,createText:y,createComment:v}}=u,m=It(t.props);let{shapeFlag:g,children:b,dynamicChildren:_}=t;if(null==e){const e=t.el=y(""),u=t.anchor=y("");d(e,n,r),d(u,n,r);const f=t.target=Dt(t.props,h),p=t.targetAnchor=y("");f&&(d(p,f),a=a||Mt(f));const v=(e,t)=>{16&g&&c(b,e,t,o,i,a,l,s)};m?v(n,u):f&&v(f,p)}else{t.el=e.el;const r=t.anchor=e.anchor,c=t.target=e.target,d=t.targetAnchor=e.targetAnchor,y=It(e.props),v=y?n:c,g=y?r:d;if(a=a||Mt(c),_?(p(e.dynamicChildren,_,v,o,i,a,l),Rt(e,t,!0)):s||f(e,t,v,g,o,i,a,l,!1),m)y||Ut(t,n,r,u,1);else if((t.props&&t.props.to)!==(e.props&&e.props.to)){const e=t.target=Dt(t.props,h);e&&Ut(t,e,null,u,0)}else y&&Ut(t,c,d,u,1)}},remove(e,t,n,r,{um:o,o:{remove:i}},a){const{shapeFlag:l,children:s,anchor:u,targetAnchor:c,target:f,props:p}=e;if(f&&i(c),(a||!It(p))&&(i(u),16&l))for(let e=0;e<s.length;e++){const r=s[e];o(r,t,n,!0,!!r.dynamicChildren)}},move:Ut,hydrate:function(e,t,n,r,o,i,{o:{nextSibling:a,parentNode:l,querySelector:s}},u){const c=t.target=Dt(t.props,s);if(c){const s=c._lpa||c.firstChild;16&t.shapeFlag&&(It(t.props)?(t.anchor=u(a(e),t,l(e),n,r,o,i),t.targetAnchor=s):(t.anchor=a(e),t.targetAnchor=u(s,t,c,n,r,o,i)),c._lpa=t.targetAnchor&&a(t.targetAnchor))}return t.anchor&&a(t.anchor)}},Ft="components";function $t(e,t){return Wt(Ft,e,!0,t)||e}const Vt=Symbol();function Ht(e){return(0,o.HD)(e)?Wt(Ft,e,!1)||e:e||Vt}function zt(e){return Wt("directives",e)}function Wt(e,t,n=!0,r=!1){const i=F||Bn;if(i){const n=i.type;if(e===Ft){const e=nr(n);if(e&&(e===t||e===(0,o._A)(t)||e===(0,o.kC)((0,o._A)(t))))return n}const a=Kt(i[e]||n[e],t)||Kt(i.appContext[e],t);return!a&&r?n:a}}function Kt(e,t){return e&&(e[t]||e[(0,o._A)(t)]||e[(0,o.kC)((0,o._A)(t))])}const Zt=Symbol(void 0),Yt=Symbol(void 0),Gt=Symbol(void 0),Jt=Symbol(void 0),Xt=[];let Qt=null;function en(e=!1){Xt.push(Qt=e?null:[])}function tn(){Xt.pop(),Qt=Xt[Xt.length-1]||null}let nn,rn=1;function on(e){rn+=e}function an(e){return e.dynamicChildren=rn>0?Qt||o.Z6:null,tn(),rn>0&&Qt&&Qt.push(e),e}function ln(e,t,n,r,o,i){return an(yn(e,t,n,r,o,i,!0))}function sn(e,t,n,r,o){return an(vn(e,t,n,r,o,!0))}function un(e){return!!e&&!0===e.__v_isVNode}function cn(e,t){return e.type===t.type&&e.key===t.key}function fn(e){nn=e}const pn="__vInternal",dn=({key:e})=>null!=e?e:null,hn=({ref:e,ref_key:t,ref_for:n})=>null!=e?(0,o.HD)(e)||(0,r.dq)(e)||(0,o.mf)(e)?{i:F,r:e,k:t,f:!!n}:e:null;function yn(e,t=null,n=null,r=0,i=null,a=(e===Zt?0:1),l=!1,s=!1){const u={__v_isVNode:!0,__v_skip:!0,type:e,props:t,key:t&&dn(t),ref:t&&hn(t),scopeId:$,slotScopeIds:null,children:n,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetAnchor:null,staticCount:0,shapeFlag:a,patchFlag:r,dynamicProps:i,dynamicChildren:null,appContext:null};return s?(xn(u,n),128&a&&e.normalize(u)):n&&(u.shapeFlag|=(0,o.HD)(n)?8:16),rn>0&&!l&&Qt&&(u.patchFlag>0||6&a)&&32!==u.patchFlag&&Qt.push(u),u}const vn=mn;function mn(e,t=null,n=null,i=0,a=null,l=!1){if(e&&e!==Vt||(e=Gt),un(e)){const r=bn(e,t,!0);return n&&xn(r,n),r}if(or(e)&&(e=e.__vccOpts),t){t=gn(t);let{class:e,style:n}=t;e&&!(0,o.HD)(e)&&(t.class=(0,o.C_)(e)),(0,o.Kn)(n)&&((0,r.X3)(n)&&!(0,o.kJ)(n)&&(n=(0,o.l7)({},n)),t.style=(0,o.j5)(n))}return yn(e,t,n,i,a,(0,o.HD)(e)?1:(e=>e.__isSuspense)(e)?128:(e=>e.__isTeleport)(e)?64:(0,o.Kn)(e)?4:(0,o.mf)(e)?2:0,l,!0)}function gn(e){return e?(0,r.X3)(e)||pn in e?(0,o.l7)({},e):e:null}function bn(e,t,n=!1){const{props:r,ref:i,patchFlag:a,children:l}=e,s=t?En(r||{},t):r;return{__v_isVNode:!0,__v_skip:!0,type:e.type,props:s,key:s&&dn(s),ref:t&&t.ref?n&&i?(0,o.kJ)(i)?i.concat(hn(t)):[i,hn(t)]:hn(t):i,scopeId:e.scopeId,slotScopeIds:e.slotScopeIds,children:l,target:e.target,targetAnchor:e.targetAnchor,staticCount:e.staticCount,shapeFlag:e.shapeFlag,patchFlag:t&&e.type!==Zt?-1===a?16:16|a:a,dynamicProps:e.dynamicProps,dynamicChildren:e.dynamicChildren,appContext:e.appContext,dirs:e.dirs,transition:e.transition,component:e.component,suspense:e.suspense,ssContent:e.ssContent&&bn(e.ssContent),ssFallback:e.ssFallback&&bn(e.ssFallback),el:e.el,anchor:e.anchor}}function _n(e=" ",t=0){return vn(Yt,null,e,t)}function wn(e,t){const n=vn(Jt,null,e);return n.staticCount=t,n}function On(e="",t=!1){return t?(en(),sn(Gt,null,e)):vn(Gt,null,e)}function kn(e){return null==e||"boolean"==typeof e?vn(Gt):(0,o.kJ)(e)?vn(Zt,null,e.slice()):"object"==typeof e?Sn(e):vn(Yt,null,String(e))}function Sn(e){return null===e.el||e.memo?e:bn(e)}function xn(e,t){let n=0;const{shapeFlag:r}=e;if(null==t)t=null;else if((0,o.kJ)(t))n=16;else if("object"==typeof t){if(65&r){const n=t.default;return void(n&&(n._c&&(n._d=!1),xn(e,n()),n._c&&(n._d=!0)))}{n=32;const r=t._;r||pn in t?3===r&&F&&(1===F.slots._?t._=1:(t._=2,e.patchFlag|=1024)):t._ctx=F}}else(0,o.mf)(t)?(t={default:t,_ctx:F},n=32):(t=String(t),64&r?(n=16,t=[_n(t)]):n=8);e.children=t,e.shapeFlag|=n}function En(...e){const t={};for(let n=0;n<e.length;n++){const r=e[n];for(const e in r)if("class"===e)t.class!==r.class&&(t.class=(0,o.C_)([t.class,r.class]));else if("style"===e)t.style=(0,o.j5)([t.style,r.style]);else if((0,o.F7)(e)){const n=t[e],i=r[e];!i||n===i||(0,o.kJ)(n)&&n.includes(i)||(t[e]=n?[].concat(n,i):i)}else""!==e&&(t[e]=r[e])}return t}function jn(e,t,n,r=null){c(e,t,7,[n,r])}function An(e,t,n,r){let i;const a=n&&n[r];if((0,o.kJ)(e)||(0,o.HD)(e)){i=new Array(e.length);for(let n=0,r=e.length;n<r;n++)i[n]=t(e[n],n,void 0,a&&a[n])}else if("number"==typeof e){0,i=new Array(e);for(let n=0;n<e;n++)i[n]=t(n+1,n,void 0,a&&a[n])}else if((0,o.Kn)(e))if(e[Symbol.iterator])i=Array.from(e,((e,n)=>t(e,n,void 0,a&&a[n])));else{const n=Object.keys(e);i=new Array(n.length);for(let r=0,o=n.length;r<o;r++){const o=n[r];i[r]=t(e[o],o,r,a&&a[r])}}else i=[];return n&&(n[r]=i),i}function Pn(e,t){for(let n=0;n<t.length;n++){const r=t[n];if((0,o.kJ)(r))for(let t=0;t<r.length;t++)e[r[t].name]=r[t].fn;else r&&(e[r.name]=r.fn)}return e}function Tn(e,t,n={},r,o){if(F.isCE||F.parent&&je(F.parent)&&F.parent.isCE)return vn("slot","default"===t?null:{name:t},r&&r());let i=e[t];i&&i._c&&(i._d=!1),en();const a=i&&Cn(i(n)),l=sn(Zt,{key:n.key||`_${t}`},a||(r?r():[]),a&&1===e._?64:-2);return!o&&l.scopeId&&(l.slotScopeIds=[l.scopeId+"-s"]),i&&i._c&&(i._d=!0),l}function Cn(e){return e.some((e=>!un(e)||e.type!==Gt&&!(e.type===Zt&&!Cn(e.children))))?e:null}function Nn(e){const t={};for(const n in e)t[(0,o.hR)(n)]=e[n];return t}const qn=e=>e?Hn(e)?er(e)||e.proxy:qn(e.parent):null,Ln=(0,o.l7)(Object.create(null),{$:e=>e,$el:e=>e.vnode.el,$data:e=>e.data,$props:e=>e.props,$attrs:e=>e.attrs,$slots:e=>e.slots,$refs:e=>e.refs,$parent:e=>qn(e.parent),$root:e=>qn(e.root),$emit:e=>e.emit,$options:e=>tt(e),$forceUpdate:e=>()=>E(e.update),$nextTick:e=>x.bind(e.proxy),$watch:e=>he.bind(e)}),Rn={get({_:e},t){const{ctx:n,setupState:i,data:a,props:l,accessCache:s,type:u,appContext:c}=e;let f;if("$"!==t[0]){const r=s[t];if(void 0!==r)switch(r){case 1:return i[t];case 2:return a[t];case 4:return n[t];case 3:return l[t]}else{if(i!==o.kT&&(0,o.RI)(i,t))return s[t]=1,i[t];if(a!==o.kT&&(0,o.RI)(a,t))return s[t]=2,a[t];if((f=e.propsOptions[0])&&(0,o.RI)(f,t))return s[t]=3,l[t];if(n!==o.kT&&(0,o.RI)(n,t))return s[t]=4,n[t];Je&&(s[t]=0)}}const p=Ln[t];let d,h;return p?("$attrs"===t&&(0,r.j)(e,"get",t),p(e)):(d=u.__cssModules)&&(d=d[t])?d:n!==o.kT&&(0,o.RI)(n,t)?(s[t]=4,n[t]):(h=c.config.globalProperties,(0,o.RI)(h,t)?h[t]:void 0)},set({_:e},t,n){const{data:r,setupState:i,ctx:a}=e;return i!==o.kT&&(0,o.RI)(i,t)?(i[t]=n,!0):r!==o.kT&&(0,o.RI)(r,t)?(r[t]=n,!0):!(0,o.RI)(e.props,t)&&(("$"!==t[0]||!(t.slice(1)in e))&&(a[t]=n,!0))},has({_:{data:e,setupState:t,accessCache:n,ctx:r,appContext:i,propsOptions:a}},l){let s;return!!n[l]||e!==o.kT&&(0,o.RI)(e,l)||t!==o.kT&&(0,o.RI)(t,l)||(s=a[0])&&(0,o.RI)(s,l)||(0,o.RI)(r,l)||(0,o.RI)(Ln,l)||(0,o.RI)(i.config.globalProperties,l)},defineProperty(e,t,n){return null!=n.get?e._.accessCache[t]=0:(0,o.RI)(n,"value")&&this.set(e,t,n.value,null),Reflect.defineProperty(e,t,n)}};const In=(0,o.l7)({},Rn,{get(e,t){if(t!==Symbol.unscopables)return Rn.get(e,t,e)},has:(e,t)=>"_"!==t[0]&&!(0,o.e1)(t)});const Mn=Ot();let Dn=0;function Un(e,t,n){const i=e.type,a=(t?t.appContext:e.appContext)||Mn,l={uid:Dn++,vnode:e,type:i,parent:t,appContext:a,root:null,next:null,subTree:null,effect:null,update:null,scope:new r.Bj(!0),render:null,proxy:null,exposed:null,exposeProxy:null,withProxy:null,provides:t?t.provides:Object.create(a.provides),accessCache:null,renderCache:[],components:null,directives:null,propsOptions:ct(i,a),emitsOptions:U(i,a),emit:null,emitted:null,propsDefaults:o.kT,inheritAttrs:i.inheritAttrs,ctx:o.kT,data:o.kT,props:o.kT,attrs:o.kT,slots:o.kT,refs:o.kT,setupState:o.kT,setupContext:null,suspense:n,suspenseId:n?n.pendingId:0,asyncDep:null,asyncResolved:!1,isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null,sp:null};return l.ctx={_:l},l.root=t?t.root:l,l.emit=D.bind(null,l),e.ce&&e.ce(l),l}let Bn=null;const Fn=()=>Bn||F,$n=e=>{Bn=e,e.scope.on()},Vn=()=>{Bn&&Bn.scope.off(),Bn=null};function Hn(e){return 4&e.vnode.shapeFlag}let zn,Wn,Kn=!1;function Zn(e,t=!1){Kn=t;const{props:n,children:i}=e.vnode,a=Hn(e);!function(e,t,n,i=!1){const a={},l={};(0,o.Nj)(l,pn,1),e.propsDefaults=Object.create(null),st(e,t,a,l);for(const t in e.propsOptions[0])t in a||(a[t]=void 0);n?e.props=i?a:(0,r.Um)(a):e.type.props?e.props=a:e.props=l,e.attrs=l}(e,n,a,t),((e,t)=>{if(32&e.vnode.shapeFlag){const n=t._;n?(e.slots=(0,r.IU)(t),(0,o.Nj)(t,"_",n)):gt(t,e.slots={})}else e.slots={},t&&bt(e,t);(0,o.Nj)(e.slots,pn,1)})(e,i);const l=a?function(e,t){const n=e.type;0;e.accessCache=Object.create(null),e.proxy=(0,r.Xl)(new Proxy(e.ctx,Rn)),!1;const{setup:i}=n;if(i){const n=e.setupContext=i.length>1?Qn(e):null;$n(e),(0,r.Jd)();const a=u(i,e,0,[e.props,n]);if((0,r.lk)(),Vn(),(0,o.tI)(a)){if(a.then(Vn,Vn),t)return a.then((n=>{Yn(e,n,t)})).catch((t=>{f(t,e,0)}));e.asyncDep=a}else Yn(e,a,t)}else Xn(e,t)}(e,t):void 0;return Kn=!1,l}function Yn(e,t,n){(0,o.mf)(t)?e.type.__ssrInlineRender?e.ssrRender=t:e.render=t:(0,o.Kn)(t)&&(e.setupState=(0,r.WL)(t)),Xn(e,n)}function Gn(e){zn=e,Wn=e=>{e.render._rc&&(e.withProxy=new Proxy(e.ctx,In))}}const Jn=()=>!zn;function Xn(e,t,n){const i=e.type;if(!e.render){if(!t&&zn&&!i.render){const t=i.template;if(t){0;const{isCustomElement:n,compilerOptions:r}=e.appContext.config,{delimiters:a,compilerOptions:l}=i,s=(0,o.l7)((0,o.l7)({isCustomElement:n,delimiters:a},r),l);i.render=zn(t,s)}}e.render=i.render||o.dG,Wn&&Wn(e)}$n(e),(0,r.Jd)(),Xe(e),(0,r.lk)(),Vn()}function Qn(e){const t=t=>{e.exposed=t||{}};let n;return{get attrs(){return n||(n=function(e){return new Proxy(e.attrs,{get:(t,n)=>((0,r.j)(e,"get","$attrs"),t[n])})}(e))},slots:e.slots,emit:e.emit,expose:t}}function er(e){if(e.exposed)return e.exposeProxy||(e.exposeProxy=new Proxy((0,r.WL)((0,r.Xl)(e.exposed)),{get:(t,n)=>n in t?t[n]:n in Ln?Ln[n](e):void 0}))}const tr=/(?:^|[-_])(\w)/g;function nr(e){return(0,o.mf)(e)&&e.displayName||e.name}function rr(e,t,n=!1){let r=nr(t);if(!r&&t.__file){const e=t.__file.match(/([^/\\]+)\.\w+$/);e&&(r=e[1])}if(!r&&e&&e.parent){const n=e=>{for(const n in e)if(e[n]===t)return n};r=n(e.components||e.parent.type.components)||n(e.appContext.components)}return r?r.replace(tr,(e=>e.toUpperCase())).replace(/[-_]/g,""):n?"App":"Anonymous"}function or(e){return(0,o.mf)(e)&&"__vccOpts"in e}const ir=(e,t)=>(0,r.Fl)(e,t,Kn);function ar(){return null}function lr(){return null}function sr(e){0}function ur(e,t){return null}function cr(){return pr().slots}function fr(){return pr().attrs}function pr(){const e=Fn();return e.setupContext||(e.setupContext=Qn(e))}function dr(e,t){const n=(0,o.kJ)(e)?e.reduce(((e,t)=>(e[t]={},e)),{}):e;for(const e in t){const r=n[e];r?(0,o.kJ)(r)||(0,o.mf)(r)?n[e]={type:r,default:t[e]}:r.default=t[e]:null===r&&(n[e]={default:t[e]})}return n}function hr(e,t){const n={};for(const r in e)t.includes(r)||Object.defineProperty(n,r,{enumerable:!0,get:()=>e[r]});return n}function yr(e){const t=Fn();let n=e();return Vn(),(0,o.tI)(n)&&(n=n.catch((e=>{throw $n(t),e}))),[n,()=>$n(t)]}function vr(e,t,n){const r=arguments.length;return 2===r?(0,o.Kn)(t)&&!(0,o.kJ)(t)?un(t)?vn(e,null,[t]):vn(e,t):vn(e,null,t):(r>3?n=Array.prototype.slice.call(arguments,2):3===r&&un(n)&&(n=[n]),vn(e,t,n))}const mr=Symbol(""),gr=()=>{{const e=le(mr);return e||a("Server rendering context not provided. Make sure to only call useSSRContext() conditionally in the server build."),e}};function br(){return void 0}function _r(e,t,n,r){const o=n[r];if(o&&wr(o,e))return o;const i=t();return i.memo=e.slice(),n[r]=i}function wr(e,t){const n=e.memo;if(n.length!=t.length)return!1;for(let e=0;e<n.length;e++)if(n[e]!==t[e])return!1;return rn>0&&Qt&&Qt.push(e),!0}const Or="3.2.33",kr={createComponentInstance:Un,setupComponent:Zn,renderComponentRoot:Z,setCurrentRenderingInstance:V,isVNode:un,normalizeVNode:kn},Sr=null,xr=null},9963:(e,t,n)=>{"use strict";n.d(t,{$d:()=>o.$d,$y:()=>o.$y,Ah:()=>S,B:()=>o.B,BK:()=>o.BK,Bj:()=>o.Bj,Bz:()=>o.Bz,C3:()=>o.C3,C_:()=>o.C_,Cn:()=>o.Cn,D2:()=>ge,EB:()=>o.EB,Eo:()=>o.Eo,F4:()=>o.F4,F8:()=>be,FN:()=>o.FN,Fl:()=>o.Fl,G:()=>o.G,G2:()=>le,HX:()=>o.HX,HY:()=>o.HY,Ho:()=>o.Ho,IU:()=>o.IU,JJ:()=>o.JJ,Jd:()=>o.Jd,KU:()=>o.KU,Ko:()=>o.Ko,LL:()=>o.LL,MW:()=>k,MX:()=>o.MX,Mr:()=>o.Mr,Nd:()=>Ne,Nv:()=>o.Nv,OT:()=>o.OT,Ob:()=>o.Ob,P$:()=>o.P$,PG:()=>o.PG,Q2:()=>o.Q2,Q6:()=>o.Q6,RC:()=>o.RC,Rh:()=>o.Rh,Rr:()=>o.Rr,S3:()=>o.S3,SK:()=>o.Ah,SU:()=>o.SU,U2:()=>o.U2,Uc:()=>o.Uc,Uk:()=>o.Uk,Um:()=>o.Um,Us:()=>o.Us,Vh:()=>o.Vh,W3:()=>J,WI:()=>o.WI,WL:()=>o.WL,WY:()=>o.WY,Wm:()=>o.Wm,X3:()=>o.X3,XI:()=>o.XI,Xl:()=>o.Xl,Xn:()=>o.Xn,Y1:()=>o.Y1,Y3:()=>o.Y3,Y8:()=>o.Y8,YP:()=>o.YP,YS:()=>o.YS,YZ:()=>pe,Yq:()=>o.Yq,ZB:()=>je,ZK:()=>o.ZK,ZM:()=>o.ZM,Zq:()=>o.Zq,_:()=>o._,_A:()=>o._A,a2:()=>E,aZ:()=>o.aZ,b9:()=>o.b9,bM:()=>se,bT:()=>o.bT,bv:()=>o.bv,cE:()=>o.cE,d1:()=>o.d1,dD:()=>o.dD,dG:()=>o.dG,dl:()=>o.dl,dq:()=>o.dq,e8:()=>ie,ec:()=>o.ec,eq:()=>o.eq,f3:()=>o.f3,fb:()=>j,h:()=>o.h,hR:()=>o.hR,i8:()=>o.i8,iD:()=>o.iD,iH:()=>o.iH,iM:()=>ve,ic:()=>o.ic,j4:()=>o.j4,j5:()=>o.j5,kC:()=>o.kC,kq:()=>o.kq,l1:()=>o.l1,lA:()=>o.lA,lR:()=>o.lR,m0:()=>o.m0,mW:()=>o.mW,mv:()=>o.mv,mx:()=>o.mx,n4:()=>o.n4,nK:()=>o.nK,nQ:()=>o.nQ,nZ:()=>o.nZ,nr:()=>oe,oR:()=>o.oR,of:()=>o.of,p1:()=>o.p1,qG:()=>o.qG,qZ:()=>o.qZ,qb:()=>o.qb,qj:()=>o.qj,qq:()=>o.qq,ri:()=>Ae,ry:()=>o.ry,sT:()=>o.sT,sY:()=>Ee,se:()=>o.se,sj:()=>A,sv:()=>o.sv,uE:()=>o.uE,uT:()=>q,u_:()=>o.u_,up:()=>o.up,vl:()=>o.vl,vr:()=>Pe,vs:()=>o.vs,w5:()=>o.w5,wF:()=>o.wF,wg:()=>o.wg,wy:()=>o.wy,xv:()=>o.xv,yT:()=>o.yT,yX:()=>o.yX,yb:()=>o.MW,zw:()=>o.zw});var r=n(3577),o=n(6252),i=n(2262);const a="undefined"!=typeof document?document:null,l=a&&a.createElement("template"),s={insert:(e,t,n)=>{t.insertBefore(e,n||null)},remove:e=>{const t=e.parentNode;t&&t.removeChild(e)},createElement:(e,t,n,r)=>{const o=t?a.createElementNS("http://www.w3.org/2000/svg",e):a.createElement(e,n?{is:n}:void 0);return"select"===e&&r&&null!=r.multiple&&o.setAttribute("multiple",r.multiple),o},createText:e=>a.createTextNode(e),createComment:e=>a.createComment(e),setText:(e,t)=>{e.nodeValue=t},setElementText:(e,t)=>{e.textContent=t},parentNode:e=>e.parentNode,nextSibling:e=>e.nextSibling,querySelector:e=>a.querySelector(e),setScopeId(e,t){e.setAttribute(t,"")},cloneNode(e){const t=e.cloneNode(!0);return"_value"in e&&(t._value=e._value),t},insertStaticContent(e,t,n,r,o,i){const a=n?n.previousSibling:t.lastChild;if(o&&(o===i||o.nextSibling))for(;t.insertBefore(o.cloneNode(!0),n),o!==i&&(o=o.nextSibling););else{l.innerHTML=r?`<svg>${e}</svg>`:e;const o=l.content;if(r){const e=o.firstChild;for(;e.firstChild;)o.appendChild(e.firstChild);o.removeChild(e)}t.insertBefore(o,n)}return[a?a.nextSibling:t.firstChild,n?n.previousSibling:t.lastChild]}};const u=/\s*!important$/;function c(e,t,n){if((0,r.kJ)(n))n.forEach((n=>c(e,t,n)));else if(null==n&&(n=""),t.startsWith("--"))e.setProperty(t,n);else{const o=function(e,t){const n=p[t];if(n)return n;let o=(0,r._A)(t);if("filter"!==o&&o in e)return p[t]=o;o=(0,r.kC)(o);for(let n=0;n<f.length;n++){const r=f[n]+o;if(r in e)return p[t]=r}return t}(e,t);u.test(n)?e.setProperty((0,r.rs)(o),n.replace(u,""),"important"):e[o]=n}}const f=["Webkit","Moz","ms"],p={};const d="http://www.w3.org/1999/xlink";const[h,y]=(()=>{let e=Date.now,t=!1;if("undefined"!=typeof window){Date.now()>document.createEvent("Event").timeStamp&&(e=()=>performance.now());const n=navigator.userAgent.match(/firefox\/(\d+)/i);t=!!(n&&Number(n[1])<=53)}return[e,t]})();let v=0;const m=Promise.resolve(),g=()=>{v=0};function b(e,t,n,r){e.addEventListener(t,n,r)}function _(e,t,n,i,a=null){const l=e._vei||(e._vei={}),s=l[t];if(i&&s)s.value=i;else{const[n,u]=function(e){let t;if(w.test(e)){let n;for(t={};n=e.match(w);)e=e.slice(0,e.length-n[0].length),t[n[0].toLowerCase()]=!0}return[(0,r.rs)(e.slice(2)),t]}(t);if(i){const s=l[t]=function(e,t){const n=e=>{const i=e.timeStamp||h();(y||i>=n.attached-1)&&(0,o.$d)(function(e,t){if((0,r.kJ)(t)){const n=e.stopImmediatePropagation;return e.stopImmediatePropagation=()=>{n.call(e),e._stopped=!0},t.map((e=>t=>!t._stopped&&e&&e(t)))}return t}(e,n.value),t,5,[e])};return n.value=e,n.attached=(()=>v||(m.then(g),v=h()))(),n}(i,a);b(e,n,s,u)}else s&&(!function(e,t,n,r){e.removeEventListener(t,n,r)}(e,n,s,u),l[t]=void 0)}}const w=/(?:Once|Passive|Capture)$/;const O=/^on[a-z]/;function k(e,t){const n=(0,o.aZ)(e);class r extends E{constructor(e){super(n,e,t)}}return r.def=n,r}const S=e=>k(e,je),x="undefined"!=typeof HTMLElement?HTMLElement:class{};class E extends x{constructor(e,t={},n){super(),this._def=e,this._props=t,this._instance=null,this._connected=!1,this._resolved=!1,this._numberProps=null,this.shadowRoot&&n?n(this._createVNode(),this.shadowRoot):this.attachShadow({mode:"open"})}connectedCallback(){this._connected=!0,this._instance||this._resolveDef()}disconnectedCallback(){this._connected=!1,(0,o.Y3)((()=>{this._connected||(Ee(null,this.shadowRoot),this._instance=null)}))}_resolveDef(){if(this._resolved)return;this._resolved=!0;for(let e=0;e<this.attributes.length;e++)this._setAttr(this.attributes[e].name);new MutationObserver((e=>{for(const t of e)this._setAttr(t.attributeName)})).observe(this,{attributes:!0});const e=e=>{const{props:t,styles:n}=e,o=!(0,r.kJ)(t),i=t?o?Object.keys(t):t:[];let a;if(o)for(const e in this._props){const n=t[e];(n===Number||n&&n.type===Number)&&(this._props[e]=(0,r.He)(this._props[e]),(a||(a=Object.create(null)))[e]=!0)}this._numberProps=a;for(const e of Object.keys(this))"_"!==e[0]&&this._setProp(e,this[e],!0,!1);for(const e of i.map(r._A))Object.defineProperty(this,e,{get(){return this._getProp(e)},set(t){this._setProp(e,t)}});this._applyStyles(n),this._update()},t=this._def.__asyncLoader;t?t().then(e):e(this._def)}_setAttr(e){let t=this.getAttribute(e);this._numberProps&&this._numberProps[e]&&(t=(0,r.He)(t)),this._setProp((0,r._A)(e),t,!1)}_getProp(e){return this._props[e]}_setProp(e,t,n=!0,o=!0){t!==this._props[e]&&(this._props[e]=t,o&&this._instance&&this._update(),n&&(!0===t?this.setAttribute((0,r.rs)(e),""):"string"==typeof t||"number"==typeof t?this.setAttribute((0,r.rs)(e),t+""):t||this.removeAttribute((0,r.rs)(e))))}_update(){Ee(this._createVNode(),this.shadowRoot)}_createVNode(){const e=(0,o.Wm)(this._def,(0,r.l7)({},this._props));return this._instance||(e.ce=e=>{this._instance=e,e.isCE=!0,e.emit=(e,...t)=>{this.dispatchEvent(new CustomEvent(e,{detail:t}))};let t=this;for(;t=t&&(t.parentNode||t.host);)if(t instanceof E){e.parent=t._instance;break}}),e}_applyStyles(e){e&&e.forEach((e=>{const t=document.createElement("style");t.textContent=e,this.shadowRoot.appendChild(t)}))}}function j(e="$style"){{const t=(0,o.FN)();if(!t)return r.kT;const n=t.type.__cssModules;if(!n)return r.kT;const i=n[e];return i||r.kT}}function A(e){const t=(0,o.FN)();if(!t)return;const n=()=>P(t.subTree,e(t.proxy));(0,o.Rh)(n),(0,o.bv)((()=>{const e=new MutationObserver(n);e.observe(t.subTree.el.parentNode,{childList:!0}),(0,o.Ah)((()=>e.disconnect()))}))}function P(e,t){if(128&e.shapeFlag){const n=e.suspense;e=n.activeBranch,n.pendingBranch&&!n.isHydrating&&n.effects.push((()=>{P(n.activeBranch,t)}))}for(;e.component;)e=e.component.subTree;if(1&e.shapeFlag&&e.el)T(e.el,t);else if(e.type===o.HY)e.children.forEach((e=>P(e,t)));else if(e.type===o.qG){let{el:n,anchor:r}=e;for(;n&&(T(n,t),n!==r);)n=n.nextSibling}}function T(e,t){if(1===e.nodeType){const n=e.style;for(const e in t)n.setProperty(`--${e}`,t[e])}}const C="transition",N="animation",q=(e,{slots:t})=>(0,o.h)(o.P$,D(e),t);q.displayName="Transition";const L={name:String,type:String,css:{type:Boolean,default:!0},duration:[String,Number,Object],enterFromClass:String,enterActiveClass:String,enterToClass:String,appearFromClass:String,appearActiveClass:String,appearToClass:String,leaveFromClass:String,leaveActiveClass:String,leaveToClass:String},R=q.props=(0,r.l7)({},o.P$.props,L),I=(e,t=[])=>{(0,r.kJ)(e)?e.forEach((e=>e(...t))):e&&e(...t)},M=e=>!!e&&((0,r.kJ)(e)?e.some((e=>e.length>1)):e.length>1);function D(e){const t={};for(const n in e)n in L||(t[n]=e[n]);if(!1===e.css)return t;const{name:n="v",type:o,duration:i,enterFromClass:a=`${n}-enter-from`,enterActiveClass:l=`${n}-enter-active`,enterToClass:s=`${n}-enter-to`,appearFromClass:u=a,appearActiveClass:c=l,appearToClass:f=s,leaveFromClass:p=`${n}-leave-from`,leaveActiveClass:d=`${n}-leave-active`,leaveToClass:h=`${n}-leave-to`}=e,y=function(e){if(null==e)return null;if((0,r.Kn)(e))return[U(e.enter),U(e.leave)];{const t=U(e);return[t,t]}}(i),v=y&&y[0],m=y&&y[1],{onBeforeEnter:g,onEnter:b,onEnterCancelled:_,onLeave:w,onLeaveCancelled:O,onBeforeAppear:k=g,onAppear:S=b,onAppearCancelled:x=_}=t,E=(e,t,n)=>{F(e,t?f:s),F(e,t?c:l),n&&n()},j=(e,t)=>{F(e,h),F(e,d),t&&t()},A=e=>(t,n)=>{const r=e?S:b,i=()=>E(t,e,n);I(r,[t,i]),$((()=>{F(t,e?u:a),B(t,e?f:s),M(r)||H(t,o,v,i)}))};return(0,r.l7)(t,{onBeforeEnter(e){I(g,[e]),B(e,a),B(e,l)},onBeforeAppear(e){I(k,[e]),B(e,u),B(e,c)},onEnter:A(!1),onAppear:A(!0),onLeave(e,t){const n=()=>j(e,t);B(e,p),Z(),B(e,d),$((()=>{F(e,p),B(e,h),M(w)||H(e,o,m,n)})),I(w,[e,n])},onEnterCancelled(e){E(e,!1),I(_,[e])},onAppearCancelled(e){E(e,!0),I(x,[e])},onLeaveCancelled(e){j(e),I(O,[e])}})}function U(e){return(0,r.He)(e)}function B(e,t){t.split(/\s+/).forEach((t=>t&&e.classList.add(t))),(e._vtc||(e._vtc=new Set)).add(t)}function F(e,t){t.split(/\s+/).forEach((t=>t&&e.classList.remove(t)));const{_vtc:n}=e;n&&(n.delete(t),n.size||(e._vtc=void 0))}function $(e){requestAnimationFrame((()=>{requestAnimationFrame(e)}))}let V=0;function H(e,t,n,r){const o=e._endId=++V,i=()=>{o===e._endId&&r()};if(n)return setTimeout(i,n);const{type:a,timeout:l,propCount:s}=z(e,t);if(!a)return r();const u=a+"end";let c=0;const f=()=>{e.removeEventListener(u,p),i()},p=t=>{t.target===e&&++c>=s&&f()};setTimeout((()=>{c<s&&f()}),l+1),e.addEventListener(u,p)}function z(e,t){const n=window.getComputedStyle(e),r=e=>(n[e]||"").split(", "),o=r("transitionDelay"),i=r("transitionDuration"),a=W(o,i),l=r("animationDelay"),s=r("animationDuration"),u=W(l,s);let c=null,f=0,p=0;t===C?a>0&&(c=C,f=a,p=i.length):t===N?u>0&&(c=N,f=u,p=s.length):(f=Math.max(a,u),c=f>0?a>u?C:N:null,p=c?c===C?i.length:s.length:0);return{type:c,timeout:f,propCount:p,hasTransform:c===C&&/\b(transform|all)(,|$)/.test(n.transitionProperty)}}function W(e,t){for(;e.length<t.length;)e=e.concat(e);return Math.max(...t.map(((t,n)=>K(t)+K(e[n]))))}function K(e){return 1e3*Number(e.slice(0,-1).replace(",","."))}function Z(){return document.body.offsetHeight}const Y=new WeakMap,G=new WeakMap,J={name:"TransitionGroup",props:(0,r.l7)({},R,{tag:String,moveClass:String}),setup(e,{slots:t}){const n=(0,o.FN)(),r=(0,o.Y8)();let a,l;return(0,o.ic)((()=>{if(!a.length)return;const t=e.moveClass||`${e.name||"v"}-move`;if(!function(e,t,n){const r=e.cloneNode();e._vtc&&e._vtc.forEach((e=>{e.split(/\s+/).forEach((e=>e&&r.classList.remove(e)))}));n.split(/\s+/).forEach((e=>e&&r.classList.add(e))),r.style.display="none";const o=1===t.nodeType?t:t.parentNode;o.appendChild(r);const{hasTransform:i}=z(r);return o.removeChild(r),i}(a[0].el,n.vnode.el,t))return;a.forEach(X),a.forEach(Q);const r=a.filter(ee);Z(),r.forEach((e=>{const n=e.el,r=n.style;B(n,t),r.transform=r.webkitTransform=r.transitionDuration="";const o=n._moveCb=e=>{e&&e.target!==n||e&&!/transform$/.test(e.propertyName)||(n.removeEventListener("transitionend",o),n._moveCb=null,F(n,t))};n.addEventListener("transitionend",o)}))})),()=>{const s=(0,i.IU)(e),u=D(s);let c=s.tag||o.HY;a=l,l=t.default?(0,o.Q6)(t.default()):[];for(let e=0;e<l.length;e++){const t=l[e];null!=t.key&&(0,o.nK)(t,(0,o.U2)(t,u,r,n))}if(a)for(let e=0;e<a.length;e++){const t=a[e];(0,o.nK)(t,(0,o.U2)(t,u,r,n)),Y.set(t,t.el.getBoundingClientRect())}return(0,o.Wm)(c,null,l)}}};function X(e){const t=e.el;t._moveCb&&t._moveCb(),t._enterCb&&t._enterCb()}function Q(e){G.set(e,e.el.getBoundingClientRect())}function ee(e){const t=Y.get(e),n=G.get(e),r=t.left-n.left,o=t.top-n.top;if(r||o){const t=e.el.style;return t.transform=t.webkitTransform=`translate(${r}px,${o}px)`,t.transitionDuration="0s",e}}const te=e=>{const t=e.props["onUpdate:modelValue"];return(0,r.kJ)(t)?e=>(0,r.ir)(t,e):t};function ne(e){e.target.composing=!0}function re(e){const t=e.target;t.composing&&(t.composing=!1,function(e,t){const n=document.createEvent("HTMLEvents");n.initEvent(t,!0,!0),e.dispatchEvent(n)}(t,"input"))}const oe={created(e,{modifiers:{lazy:t,trim:n,number:o}},i){e._assign=te(i);const a=o||i.props&&"number"===i.props.type;b(e,t?"change":"input",(t=>{if(t.target.composing)return;let o=e.value;n?o=o.trim():a&&(o=(0,r.He)(o)),e._assign(o)})),n&&b(e,"change",(()=>{e.value=e.value.trim()})),t||(b(e,"compositionstart",ne),b(e,"compositionend",re),b(e,"change",re))},mounted(e,{value:t}){e.value=null==t?"":t},beforeUpdate(e,{value:t,modifiers:{lazy:n,trim:o,number:i}},a){if(e._assign=te(a),e.composing)return;if(document.activeElement===e){if(n)return;if(o&&e.value.trim()===t)return;if((i||"number"===e.type)&&(0,r.He)(e.value)===t)return}const l=null==t?"":t;e.value!==l&&(e.value=l)}},ie={deep:!0,created(e,t,n){e._assign=te(n),b(e,"change",(()=>{const t=e._modelValue,n=ce(e),o=e.checked,i=e._assign;if((0,r.kJ)(t)){const e=(0,r.hq)(t,n),a=-1!==e;if(o&&!a)i(t.concat(n));else if(!o&&a){const n=[...t];n.splice(e,1),i(n)}}else if((0,r.DM)(t)){const e=new Set(t);o?e.add(n):e.delete(n),i(e)}else i(fe(e,o))}))},mounted:ae,beforeUpdate(e,t,n){e._assign=te(n),ae(e,t,n)}};function ae(e,{value:t,oldValue:n},o){e._modelValue=t,(0,r.kJ)(t)?e.checked=(0,r.hq)(t,o.props.value)>-1:(0,r.DM)(t)?e.checked=t.has(o.props.value):t!==n&&(e.checked=(0,r.WV)(t,fe(e,!0)))}const le={created(e,{value:t},n){e.checked=(0,r.WV)(t,n.props.value),e._assign=te(n),b(e,"change",(()=>{e._assign(ce(e))}))},beforeUpdate(e,{value:t,oldValue:n},o){e._assign=te(o),t!==n&&(e.checked=(0,r.WV)(t,o.props.value))}},se={deep:!0,created(e,{value:t,modifiers:{number:n}},o){const i=(0,r.DM)(t);b(e,"change",(()=>{const t=Array.prototype.filter.call(e.options,(e=>e.selected)).map((e=>n?(0,r.He)(ce(e)):ce(e)));e._assign(e.multiple?i?new Set(t):t:t[0])})),e._assign=te(o)},mounted(e,{value:t}){ue(e,t)},beforeUpdate(e,t,n){e._assign=te(n)},updated(e,{value:t}){ue(e,t)}};function ue(e,t){const n=e.multiple;if(!n||(0,r.kJ)(t)||(0,r.DM)(t)){for(let o=0,i=e.options.length;o<i;o++){const i=e.options[o],a=ce(i);if(n)(0,r.kJ)(t)?i.selected=(0,r.hq)(t,a)>-1:i.selected=t.has(a);else if((0,r.WV)(ce(i),t))return void(e.selectedIndex!==o&&(e.selectedIndex=o))}n||-1===e.selectedIndex||(e.selectedIndex=-1)}}function ce(e){return"_value"in e?e._value:e.value}function fe(e,t){const n=t?"_trueValue":"_falseValue";return n in e?e[n]:t}const pe={created(e,t,n){de(e,t,n,null,"created")},mounted(e,t,n){de(e,t,n,null,"mounted")},beforeUpdate(e,t,n,r){de(e,t,n,r,"beforeUpdate")},updated(e,t,n,r){de(e,t,n,r,"updated")}};function de(e,t,n,r,o){let i;switch(e.tagName){case"SELECT":i=se;break;case"TEXTAREA":i=oe;break;default:switch(n.props&&n.props.type){case"checkbox":i=ie;break;case"radio":i=le;break;default:i=oe}}const a=i[o];a&&a(e,t,n,r)}const he=["ctrl","shift","alt","meta"],ye={stop:e=>e.stopPropagation(),prevent:e=>e.preventDefault(),self:e=>e.target!==e.currentTarget,ctrl:e=>!e.ctrlKey,shift:e=>!e.shiftKey,alt:e=>!e.altKey,meta:e=>!e.metaKey,left:e=>"button"in e&&0!==e.button,middle:e=>"button"in e&&1!==e.button,right:e=>"button"in e&&2!==e.button,exact:(e,t)=>he.some((n=>e[`${n}Key`]&&!t.includes(n)))},ve=(e,t)=>(n,...r)=>{for(let e=0;e<t.length;e++){const r=ye[t[e]];if(r&&r(n,t))return}return e(n,...r)},me={esc:"escape",space:" ",up:"arrow-up",left:"arrow-left",right:"arrow-right",down:"arrow-down",delete:"backspace"},ge=(e,t)=>n=>{if(!("key"in n))return;const o=(0,r.rs)(n.key);return t.some((e=>e===o||me[e]===o))?e(n):void 0},be={beforeMount(e,{value:t},{transition:n}){e._vod="none"===e.style.display?"":e.style.display,n&&t?n.beforeEnter(e):_e(e,t)},mounted(e,{value:t},{transition:n}){n&&t&&n.enter(e)},updated(e,{value:t,oldValue:n},{transition:r}){!t!=!n&&(r?t?(r.beforeEnter(e),_e(e,!0),r.enter(e)):r.leave(e,(()=>{_e(e,!1)})):_e(e,t))},beforeUnmount(e,{value:t}){_e(e,t)}};function _e(e,t){e.style.display=t?e._vod:"none"}const we=(0,r.l7)({patchProp:(e,t,n,o,i=!1,a,l,s,u)=>{"class"===t?function(e,t,n){const r=e._vtc;r&&(t=(t?[t,...r]:[...r]).join(" ")),null==t?e.removeAttribute("class"):n?e.setAttribute("class",t):e.className=t}(e,o,i):"style"===t?function(e,t,n){const o=e.style,i=(0,r.HD)(n);if(n&&!i){for(const e in n)c(o,e,n[e]);if(t&&!(0,r.HD)(t))for(const e in t)null==n[e]&&c(o,e,"")}else{const r=o.display;i?t!==n&&(o.cssText=n):t&&e.removeAttribute("style"),"_vod"in e&&(o.display=r)}}(e,n,o):(0,r.F7)(t)?(0,r.tR)(t)||_(e,t,0,o,l):("."===t[0]?(t=t.slice(1),1):"^"===t[0]?(t=t.slice(1),0):function(e,t,n,o){if(o)return"innerHTML"===t||"textContent"===t||!!(t in e&&O.test(t)&&(0,r.mf)(n));if("spellcheck"===t||"draggable"===t||"translate"===t)return!1;if("form"===t)return!1;if("list"===t&&"INPUT"===e.tagName)return!1;if("type"===t&&"TEXTAREA"===e.tagName)return!1;if(O.test(t)&&(0,r.HD)(n))return!1;return t in e}(e,t,o,i))?function(e,t,n,o,i,a,l){if("innerHTML"===t||"textContent"===t)return o&&l(o,i,a),void(e[t]=null==n?"":n);if("value"===t&&"PROGRESS"!==e.tagName&&!e.tagName.includes("-")){e._value=n;const r=null==n?"":n;return e.value===r&&"OPTION"!==e.tagName||(e.value=r),void(null==n&&e.removeAttribute(t))}let s=!1;if(""===n||null==n){const o=typeof e[t];"boolean"===o?n=(0,r.yA)(n):null==n&&"string"===o?(n="",s=!0):"number"===o&&(n=0,s=!0)}try{e[t]=n}catch(e){}s&&e.removeAttribute(t)}(e,t,o,a,l,s,u):("true-value"===t?e._trueValue=o:"false-value"===t&&(e._falseValue=o),function(e,t,n,o,i){if(o&&t.startsWith("xlink:"))null==n?e.removeAttributeNS(d,t.slice(6,t.length)):e.setAttributeNS(d,t,n);else{const o=(0,r.Pq)(t);null==n||o&&!(0,r.yA)(n)?e.removeAttribute(t):e.setAttribute(t,o?"":n)}}(e,t,o,i))}},s);let Oe,ke=!1;function Se(){return Oe||(Oe=(0,o.Us)(we))}function xe(){return Oe=ke?Oe:(0,o.Eo)(we),ke=!0,Oe}const Ee=(...e)=>{Se().render(...e)},je=(...e)=>{xe().hydrate(...e)},Ae=(...e)=>{const t=Se().createApp(...e);const{mount:n}=t;return t.mount=e=>{const o=Te(e);if(!o)return;const i=t._component;(0,r.mf)(i)||i.render||i.template||(i.template=o.innerHTML),o.innerHTML="";const a=n(o,!1,o instanceof SVGElement);return o instanceof Element&&(o.removeAttribute("v-cloak"),o.setAttribute("data-v-app","")),a},t},Pe=(...e)=>{const t=xe().createApp(...e);const{mount:n}=t;return t.mount=e=>{const t=Te(e);if(t)return n(t,!0,t instanceof SVGElement)},t};function Te(e){if((0,r.HD)(e)){return document.querySelector(e)}return e}let Ce=!1;const Ne=()=>{Ce||(Ce=!0,oe.getSSRProps=({value:e})=>({value:e}),le.getSSRProps=({value:e},t)=>{if(t.props&&(0,r.WV)(t.props.value,e))return{checked:!0}},ie.getSSRProps=({value:e},t)=>{if((0,r.kJ)(e)){if(t.props&&(0,r.hq)(e,t.props.value)>-1)return{checked:!0}}else if((0,r.DM)(e)){if(t.props&&e.has(t.props.value))return{checked:!0}}else if(e)return{checked:!0}},be.getSSRProps=({value:e})=>{if(!e)return{style:{display:"none"}}})}},3577:(e,t,n)=>{"use strict";function r(e,t){const n=Object.create(null),r=e.split(",");for(let e=0;e<r.length;e++)n[r[e]]=!0;return t?e=>!!n[e.toLowerCase()]:e=>!!n[e]}n.d(t,{C_:()=>p,DM:()=>C,E9:()=>ne,F7:()=>k,Gg:()=>V,HD:()=>L,He:()=>ee,Kn:()=>I,NO:()=>w,Nj:()=>Q,Od:()=>E,PO:()=>F,Pq:()=>a,RI:()=>A,S0:()=>$,W7:()=>B,WV:()=>h,Z6:()=>b,_A:()=>W,_N:()=>T,aU:()=>J,dG:()=>_,e1:()=>o,fY:()=>r,hR:()=>G,hq:()=>y,ir:()=>X,j5:()=>s,kC:()=>Y,kJ:()=>P,kT:()=>g,l7:()=>x,mf:()=>q,rs:()=>Z,tI:()=>M,tR:()=>S,vs:()=>d,yA:()=>l,yk:()=>R,zw:()=>v});const o=r("Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt");const i="itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly",a=r(i);function l(e){return!!e||""===e}function s(e){if(P(e)){const t={};for(let n=0;n<e.length;n++){const r=e[n],o=L(r)?f(r):s(r);if(o)for(const e in o)t[e]=o[e]}return t}return L(e)||I(e)?e:void 0}const u=/;(?![^(]*\))/g,c=/:(.+)/;function f(e){const t={};return e.split(u).forEach((e=>{if(e){const n=e.split(c);n.length>1&&(t[n[0].trim()]=n[1].trim())}})),t}function p(e){let t="";if(L(e))t=e;else if(P(e))for(let n=0;n<e.length;n++){const r=p(e[n]);r&&(t+=r+" ")}else if(I(e))for(const n in e)e[n]&&(t+=n+" ");return t.trim()}function d(e){if(!e)return null;let{class:t,style:n}=e;return t&&!L(t)&&(e.class=p(t)),n&&(e.style=s(n)),e}function h(e,t){if(e===t)return!0;let n=N(e),r=N(t);if(n||r)return!(!n||!r)&&e.getTime()===t.getTime();if(n=P(e),r=P(t),n||r)return!(!n||!r)&&function(e,t){if(e.length!==t.length)return!1;let n=!0;for(let r=0;n&&r<e.length;r++)n=h(e[r],t[r]);return n}(e,t);if(n=I(e),r=I(t),n||r){if(!n||!r)return!1;if(Object.keys(e).length!==Object.keys(t).length)return!1;for(const n in e){const r=e.hasOwnProperty(n),o=t.hasOwnProperty(n);if(r&&!o||!r&&o||!h(e[n],t[n]))return!1}}return String(e)===String(t)}function y(e,t){return e.findIndex((e=>h(e,t)))}const v=e=>L(e)?e:null==e?"":P(e)||I(e)&&(e.toString===D||!q(e.toString))?JSON.stringify(e,m,2):String(e),m=(e,t)=>t&&t.__v_isRef?m(e,t.value):T(t)?{[`Map(${t.size})`]:[...t.entries()].reduce(((e,[t,n])=>(e[`${t} =>`]=n,e)),{})}:C(t)?{[`Set(${t.size})`]:[...t.values()]}:!I(t)||P(t)||F(t)?t:String(t),g={},b=[],_=()=>{},w=()=>!1,O=/^on[^a-z]/,k=e=>O.test(e),S=e=>e.startsWith("onUpdate:"),x=Object.assign,E=(e,t)=>{const n=e.indexOf(t);n>-1&&e.splice(n,1)},j=Object.prototype.hasOwnProperty,A=(e,t)=>j.call(e,t),P=Array.isArray,T=e=>"[object Map]"===U(e),C=e=>"[object Set]"===U(e),N=e=>e instanceof Date,q=e=>"function"==typeof e,L=e=>"string"==typeof e,R=e=>"symbol"==typeof e,I=e=>null!==e&&"object"==typeof e,M=e=>I(e)&&q(e.then)&&q(e.catch),D=Object.prototype.toString,U=e=>D.call(e),B=e=>U(e).slice(8,-1),F=e=>"[object Object]"===U(e),$=e=>L(e)&&"NaN"!==e&&"-"!==e[0]&&""+parseInt(e,10)===e,V=r(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),H=e=>{const t=Object.create(null);return n=>t[n]||(t[n]=e(n))},z=/-(\w)/g,W=H((e=>e.replace(z,((e,t)=>t?t.toUpperCase():"")))),K=/\B([A-Z])/g,Z=H((e=>e.replace(K,"-$1").toLowerCase())),Y=H((e=>e.charAt(0).toUpperCase()+e.slice(1))),G=H((e=>e?`on${Y(e)}`:"")),J=(e,t)=>!Object.is(e,t),X=(e,t)=>{for(let n=0;n<e.length;n++)e[n](t)},Q=(e,t,n)=>{Object.defineProperty(e,t,{configurable:!0,enumerable:!1,value:n})},ee=e=>{const t=parseFloat(e);return isNaN(t)?e:t};let te;const ne=()=>te||(te="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==n.g?n.g:{})},9669:(e,t,n)=>{e.exports=n(1609)},5448:(e,t,n)=>{"use strict";var r=n(4867),o=n(6026),i=n(4372),a=n(5327),l=n(4097),s=n(4109),u=n(7985),c=n(5061);e.exports=function(e){return new Promise((function(t,n){var f=e.data,p=e.headers,d=e.responseType;r.isFormData(f)&&delete p["Content-Type"];var h=new XMLHttpRequest;if(e.auth){var y=e.auth.username||"",v=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";p.Authorization="Basic "+btoa(y+":"+v)}var m=l(e.baseURL,e.url);function g(){if(h){var r="getAllResponseHeaders"in h?s(h.getAllResponseHeaders()):null,i={data:d&&"text"!==d&&"json"!==d?h.response:h.responseText,status:h.status,statusText:h.statusText,headers:r,config:e,request:h};o(t,n,i),h=null}}if(h.open(e.method.toUpperCase(),a(m,e.params,e.paramsSerializer),!0),h.timeout=e.timeout,"onloadend"in h?h.onloadend=g:h.onreadystatechange=function(){h&&4===h.readyState&&(0!==h.status||h.responseURL&&0===h.responseURL.indexOf("file:"))&&setTimeout(g)},h.onabort=function(){h&&(n(c("Request aborted",e,"ECONNABORTED",h)),h=null)},h.onerror=function(){n(c("Network Error",e,null,h)),h=null},h.ontimeout=function(){var t="timeout of "+e.timeout+"ms exceeded";e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),n(c(t,e,e.transitional&&e.transitional.clarifyTimeoutError?"ETIMEDOUT":"ECONNABORTED",h)),h=null},r.isStandardBrowserEnv()){var b=(e.withCredentials||u(m))&&e.xsrfCookieName?i.read(e.xsrfCookieName):void 0;b&&(p[e.xsrfHeaderName]=b)}"setRequestHeader"in h&&r.forEach(p,(function(e,t){void 0===f&&"content-type"===t.toLowerCase()?delete p[t]:h.setRequestHeader(t,e)})),r.isUndefined(e.withCredentials)||(h.withCredentials=!!e.withCredentials),d&&"json"!==d&&(h.responseType=e.responseType),"function"==typeof e.onDownloadProgress&&h.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&h.upload&&h.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then((function(e){h&&(h.abort(),n(e),h=null)})),f||(f=null),h.send(f)}))}},1609:(e,t,n)=>{"use strict";var r=n(4867),o=n(1849),i=n(321),a=n(7185);function l(e){var t=new i(e),n=o(i.prototype.request,t);return r.extend(n,i.prototype,t),r.extend(n,t),n}var s=l(n(5655));s.Axios=i,s.create=function(e){return l(a(s.defaults,e))},s.Cancel=n(5263),s.CancelToken=n(4972),s.isCancel=n(6502),s.all=function(e){return Promise.all(e)},s.spread=n(8713),s.isAxiosError=n(6268),e.exports=s,e.exports.default=s},5263:e=>{"use strict";function t(e){this.message=e}t.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},t.prototype.__CANCEL__=!0,e.exports=t},4972:(e,t,n)=>{"use strict";var r=n(5263);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var n=this;e((function(e){n.reason||(n.reason=new r(e),t(n.reason))}))}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var e;return{token:new o((function(t){e=t})),cancel:e}},e.exports=o},6502:e=>{"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},321:(e,t,n)=>{"use strict";var r=n(4867),o=n(5327),i=n(782),a=n(3572),l=n(7185),s=n(4875),u=s.validators;function c(e){this.defaults=e,this.interceptors={request:new i,response:new i}}c.prototype.request=function(e){"string"==typeof e?(e=arguments[1]||{}).url=arguments[0]:e=e||{},(e=l(this.defaults,e)).method?e.method=e.method.toLowerCase():this.defaults.method?e.method=this.defaults.method.toLowerCase():e.method="get";var t=e.transitional;void 0!==t&&s.assertOptions(t,{silentJSONParsing:u.transitional(u.boolean,"1.0.0"),forcedJSONParsing:u.transitional(u.boolean,"1.0.0"),clarifyTimeoutError:u.transitional(u.boolean,"1.0.0")},!1);var n=[],r=!0;this.interceptors.request.forEach((function(t){"function"==typeof t.runWhen&&!1===t.runWhen(e)||(r=r&&t.synchronous,n.unshift(t.fulfilled,t.rejected))}));var o,i=[];if(this.interceptors.response.forEach((function(e){i.push(e.fulfilled,e.rejected)})),!r){var c=[a,void 0];for(Array.prototype.unshift.apply(c,n),c=c.concat(i),o=Promise.resolve(e);c.length;)o=o.then(c.shift(),c.shift());return o}for(var f=e;n.length;){var p=n.shift(),d=n.shift();try{f=p(f)}catch(e){d(e);break}}try{o=a(f)}catch(e){return Promise.reject(e)}for(;i.length;)o=o.then(i.shift(),i.shift());return o},c.prototype.getUri=function(e){return e=l(this.defaults,e),o(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},r.forEach(["delete","get","head","options"],(function(e){c.prototype[e]=function(t,n){return this.request(l(n||{},{method:e,url:t,data:(n||{}).data}))}})),r.forEach(["post","put","patch"],(function(e){c.prototype[e]=function(t,n,r){return this.request(l(r||{},{method:e,url:t,data:n}))}})),e.exports=c},782:(e,t,n)=>{"use strict";var r=n(4867);function o(){this.handlers=[]}o.prototype.use=function(e,t,n){return this.handlers.push({fulfilled:e,rejected:t,synchronous:!!n&&n.synchronous,runWhen:n?n.runWhen:null}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){r.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=o},4097:(e,t,n)=>{"use strict";var r=n(1793),o=n(7303);e.exports=function(e,t){return e&&!r(t)?o(e,t):t}},5061:(e,t,n)=>{"use strict";var r=n(481);e.exports=function(e,t,n,o,i){var a=new Error(e);return r(a,t,n,o,i)}},3572:(e,t,n)=>{"use strict";var r=n(4867),o=n(8527),i=n(6502),a=n(5655);function l(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return l(e),e.headers=e.headers||{},e.data=o.call(e,e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),r.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||a.adapter)(e).then((function(t){return l(e),t.data=o.call(e,t.data,t.headers,e.transformResponse),t}),(function(t){return i(t)||(l(e),t&&t.response&&(t.response.data=o.call(e,t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},481:e=>{"use strict";e.exports=function(e,t,n,r,o){return e.config=t,n&&(e.code=n),e.request=r,e.response=o,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},e}},7185:(e,t,n)=>{"use strict";var r=n(4867);e.exports=function(e,t){t=t||{};var n={},o=["url","method","data"],i=["headers","auth","proxy","params"],a=["baseURL","transformRequest","transformResponse","paramsSerializer","timeout","timeoutMessage","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","decompress","maxContentLength","maxBodyLength","maxRedirects","transport","httpAgent","httpsAgent","cancelToken","socketPath","responseEncoding"],l=["validateStatus"];function s(e,t){return r.isPlainObject(e)&&r.isPlainObject(t)?r.merge(e,t):r.isPlainObject(t)?r.merge({},t):r.isArray(t)?t.slice():t}function u(o){r.isUndefined(t[o])?r.isUndefined(e[o])||(n[o]=s(void 0,e[o])):n[o]=s(e[o],t[o])}r.forEach(o,(function(e){r.isUndefined(t[e])||(n[e]=s(void 0,t[e]))})),r.forEach(i,u),r.forEach(a,(function(o){r.isUndefined(t[o])?r.isUndefined(e[o])||(n[o]=s(void 0,e[o])):n[o]=s(void 0,t[o])})),r.forEach(l,(function(r){r in t?n[r]=s(e[r],t[r]):r in e&&(n[r]=s(void 0,e[r]))}));var c=o.concat(i).concat(a).concat(l),f=Object.keys(e).concat(Object.keys(t)).filter((function(e){return-1===c.indexOf(e)}));return r.forEach(f,u),n}},6026:(e,t,n)=>{"use strict";var r=n(5061);e.exports=function(e,t,n){var o=n.config.validateStatus;n.status&&o&&!o(n.status)?t(r("Request failed with status code "+n.status,n.config,null,n.request,n)):e(n)}},8527:(e,t,n)=>{"use strict";var r=n(4867),o=n(5655);e.exports=function(e,t,n){var i=this||o;return r.forEach(n,(function(n){e=n.call(i,e,t)})),e}},5655:(e,t,n)=>{"use strict";var r=n(4155),o=n(4867),i=n(6016),a=n(481),l={"Content-Type":"application/x-www-form-urlencoded"};function s(e,t){!o.isUndefined(e)&&o.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var u,c={transitional:{silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},adapter:(("undefined"!=typeof XMLHttpRequest||void 0!==r&&"[object process]"===Object.prototype.toString.call(r))&&(u=n(5448)),u),transformRequest:[function(e,t){return i(t,"Accept"),i(t,"Content-Type"),o.isFormData(e)||o.isArrayBuffer(e)||o.isBuffer(e)||o.isStream(e)||o.isFile(e)||o.isBlob(e)?e:o.isArrayBufferView(e)?e.buffer:o.isURLSearchParams(e)?(s(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):o.isObject(e)||t&&"application/json"===t["Content-Type"]?(s(t,"application/json"),function(e,t,n){if(o.isString(e))try{return(t||JSON.parse)(e),o.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(n||JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){var t=this.transitional,n=t&&t.silentJSONParsing,r=t&&t.forcedJSONParsing,i=!n&&"json"===this.responseType;if(i||r&&o.isString(e)&&e.length)try{return JSON.parse(e)}catch(e){if(i){if("SyntaxError"===e.name)throw a(e,this,"E_JSON_PARSE");throw e}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,validateStatus:function(e){return e>=200&&e<300}};c.headers={common:{Accept:"application/json, text/plain, */*"}},o.forEach(["delete","get","head"],(function(e){c.headers[e]={}})),o.forEach(["post","put","patch"],(function(e){c.headers[e]=o.merge(l)})),e.exports=c},1849:e=>{"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},5327:(e,t,n)=>{"use strict";var r=n(4867);function o(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var i;if(n)i=n(t);else if(r.isURLSearchParams(t))i=t.toString();else{var a=[];r.forEach(t,(function(e,t){null!=e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,(function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),a.push(o(t)+"="+o(e))})))})),i=a.join("&")}if(i){var l=e.indexOf("#");-1!==l&&(e=e.slice(0,l)),e+=(-1===e.indexOf("?")?"?":"&")+i}return e}},7303:e=>{"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},4372:(e,t,n)=>{"use strict";var r=n(4867);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,o,i,a){var l=[];l.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&l.push("expires="+new Date(n).toGMTString()),r.isString(o)&&l.push("path="+o),r.isString(i)&&l.push("domain="+i),!0===a&&l.push("secure"),document.cookie=l.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},1793:e=>{"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},6268:e=>{"use strict";e.exports=function(e){return"object"==typeof e&&!0===e.isAxiosError}},7985:(e,t,n)=>{"use strict";var r=n(4867);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function o(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=o(window.location.href),function(t){var n=r.isString(t)?o(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},6016:(e,t,n)=>{"use strict";var r=n(4867);e.exports=function(e,t){r.forEach(e,(function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])}))}},4109:(e,t,n)=>{"use strict";var r=n(4867),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,i,a={};return e?(r.forEach(e.split("\n"),(function(e){if(i=e.indexOf(":"),t=r.trim(e.substr(0,i)).toLowerCase(),n=r.trim(e.substr(i+1)),t){if(a[t]&&o.indexOf(t)>=0)return;a[t]="set-cookie"===t?(a[t]?a[t]:[]).concat([n]):a[t]?a[t]+", "+n:n}})),a):a}},8713:e=>{"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},4875:(e,t,n)=>{"use strict";var r=n(8593),o={};["object","boolean","number","function","string","symbol"].forEach((function(e,t){o[e]=function(n){return typeof n===e||"a"+(t<1?"n ":" ")+e}}));var i={},a=r.version.split(".");function l(e,t){for(var n=t?t.split("."):a,r=e.split("."),o=0;o<3;o++){if(n[o]>r[o])return!0;if(n[o]<r[o])return!1}return!1}o.transitional=function(e,t,n){var o=t&&l(t);function a(e,t){return"[Axios v"+r.version+"] Transitional option '"+e+"'"+t+(n?". "+n:"")}return function(n,r,l){if(!1===e)throw new Error(a(r," has been removed in "+t));return o&&!i[r]&&(i[r]=!0,console.warn(a(r," has been deprecated since v"+t+" and will be removed in the near future"))),!e||e(n,r,l)}},e.exports={isOlderVersion:l,assertOptions:function(e,t,n){if("object"!=typeof e)throw new TypeError("options must be an object");for(var r=Object.keys(e),o=r.length;o-- >0;){var i=r[o],a=t[i];if(a){var l=e[i],s=void 0===l||a(l,i,e);if(!0!==s)throw new TypeError("option "+i+" must be "+s)}else if(!0!==n)throw Error("Unknown option "+i)}},validators:o}},4867:(e,t,n)=>{"use strict";var r=n(1849),o=Object.prototype.toString;function i(e){return"[object Array]"===o.call(e)}function a(e){return void 0===e}function l(e){return null!==e&&"object"==typeof e}function s(e){if("[object Object]"!==o.call(e))return!1;var t=Object.getPrototypeOf(e);return null===t||t===Object.prototype}function u(e){return"[object Function]"===o.call(e)}function c(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),i(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.call(null,e[o],o,e)}e.exports={isArray:i,isArrayBuffer:function(e){return"[object ArrayBuffer]"===o.call(e)},isBuffer:function(e){return null!==e&&!a(e)&&null!==e.constructor&&!a(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:l,isPlainObject:s,isUndefined:a,isDate:function(e){return"[object Date]"===o.call(e)},isFile:function(e){return"[object File]"===o.call(e)},isBlob:function(e){return"[object Blob]"===o.call(e)},isFunction:u,isStream:function(e){return l(e)&&u(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&("undefined"!=typeof window&&"undefined"!=typeof document)},forEach:c,merge:function e(){var t={};function n(n,r){s(t[r])&&s(n)?t[r]=e(t[r],n):s(n)?t[r]=e({},n):i(n)?t[r]=n.slice():t[r]=n}for(var r=0,o=arguments.length;r<o;r++)c(arguments[r],n);return t},extend:function(e,t,n){return c(t,(function(t,o){e[o]=n&&"function"==typeof t?r(t,n):t})),e},trim:function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")},stripBOM:function(e){return 65279===e.charCodeAt(0)&&(e=e.slice(1)),e}}},2236:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(6252),o=["innerHTML"];const i={props:{template:{type:String,default:null},async:{type:Boolean,default:!1},url:{type:String,default:null}},inheritAttrs:!1,mounted:function(){this.async&&this.fetch()},data:function(){return{content:this.template}},methods:{fetch:function(){var e=this;this.$http.get(this.url).then((function(t){e.content=t.data}))}}};const a={name:"WidgetHandler",components:{Widget:(0,n(3744).Z)(i,[["render",function(e,t,n,i,a,l){return(0,r.wg)(),(0,r.iD)("div",{innerHTML:a.content},null,8,o)}]])},props:{component:{type:String,default:"Widget"}},inheritAttrs:!1,render:function(){return(0,r.h)((0,r.up)(this.component),this.$attrs,this.$slots)}}},704:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r={data:function(){return{isOpen:!1}},methods:{open:function(){this.isOpen||(this.isOpen=!0,this.$dispatcher.emit("open"))},close:function(){this.isOpen&&(this.isOpen=!1,this.$dispatcher.emit("close"))},toggle:function(){this.isOpen?this.close():this.open()}}}},506:(e,t,n)=>{"use strict";var r=n(9812),o=n(6252),i=n(9963),a=n(9038),l=n(9669),s=n.n(l);function u(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var f=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,n,r;return t=e,n=[{key:"set",value:function(e,t){var n,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"/",i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{SameSite:"Lax"},a=Object.assign((u(n={},e,t),u(n,"expires",r instanceof Date?r.toUTCString():r),u(n,"path",o),n),i);document.cookie=Object.entries(a).reduce((function(e,t){return e.concat(t.join("="))}),[]).join("; ")}},{key:"get",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=document.cookie.match(new RegExp("(^| )"+e+"=([^;]+)"));return n&&n[2]?n[2]:t}},{key:"isset",value:function(e){return null!==document.cookie.match(new RegExp("(^| )"+e+"=([^;]+)"))}},{key:"remove",value:function(e){this.set(e,null,"Thu, 01 Jan 1970 00:00:01 GMT")}}],n&&c(t.prototype,n),r&&c(t,r),Object.defineProperty(t,"prototype",{writable:!1}),e}(),p=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:300,n=null;return function(){clearTimeout(n);var r=arguments,o=this;n=setTimeout((function(){e.apply(o,r)}),t)}};const d={beforeMount:function(e,t){t.value!==t.oldValue&&(e.oninput=p((function(t){e.dispatchEvent(new Event("change"))}),parseInt(t.value)||300))}};function h(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var y=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.dispatcher=document.createElement("dispatcher")}var t,n,r;return t=e,n=[{key:"addEventListener",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};this.dispatcher.addEventListener(e,t,n)}},{key:"removeEventListener",value:function(e,t){this.dispatcher.removeEventListener(e,t)}},{key:"dispatchEvent",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.dispatcher.dispatchEvent(new CustomEvent(e,{detail:t}))}}],n&&h(t.prototype,n),r&&h(t,r),Object.defineProperty(t,"prototype",{writable:!1}),e}();function v(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function m(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?v(Object(n),!0).forEach((function(t){g(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):v(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function g(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}const b={beforeCreate:function(){var e=new y;this.$dispatcher={on:function(){return e.addEventListener.apply(e,arguments)},once:function(t,n){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return e.addEventListener(t,n,m({once:!0},r))},off:function(){return e.removeEventListener.apply(e,arguments)},emit:function(){return e.dispatchEvent.apply(e,arguments)}}}};var _={class:"dropdown"},w=["aria-expanded","aria-controls"],O=["id"];var k=n(704);const S={mixins:[k.Z],props:{id:{type:String,required:!0}},mounted:function(){var e=this;window.addEventListener("keyup",(function(t){e.isOpen&&"Escape"===t.code&&e.close()})),window.addEventListener("click",(function(t){e.isOpen&&!e.$el.contains(t.target)&&e.close()}))}};var x=n(3744);const E=(0,x.Z)(S,[["render",function(e,t,n,r,i,a){var l=(0,o.up)("Icon");return(0,o.wg)(),(0,o.iD)("div",_,[(0,o._)("button",{type:"button",class:"dropdown__btn","aria-expanded":e.isOpen?"true":"false","aria-controls":n.id,onClick:t[0]||(t[0]=function(){return e.toggle&&e.toggle.apply(e,arguments)})},[(0,o.Wm)(l,{name:"more-vert"})],8,w),(0,o._)("ul",{class:"dropdown__menu",id:n.id},[(0,o.WI)(e.$slots,"default")],8,O)])}]]);var j=n(3577),A=["for"],P=["aria-label"],T={class:"tag__label"},C=["onClick"],N={key:0,class:"field-feedback field-feedback--invalid"},q={role:"listbox",style:{"z-index":"1000"}},L=["innerHTML","aria-selected","onMousedown"],R={key:0,"aria-live":"polite",role:"status",class:"field-feedback field-feedback--invalid"};function I(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}const M={mixins:[k.Z],props:{class:{type:[String,Array,Object],default:null},style:{type:[String,Array,Object],default:null},modelValue:{type:[String,Number,Array,Object],default:null},label:{type:String,required:!0},name:{type:String,required:!0},error:{type:String,default:null},multiple:{type:Boolean,default:!1},url:{type:String,required:!0},selectResolver:{type:Function,default:function(e,t){return e}},value:{type:[String,Number,Array,Object],default:null},formatted_value:{type:[String,Number,Array,Object],default:null}},inheritAttrs:!1,emits:["update:modelValue"],mounted:function(){this.$dispatcher.once("open",this.fetch),this.formattedValue=null===this.formatted_value?{}:Object.assign({},this.multiple?this.formatted_value:I({},this.modelValue,this.formatted_value))},data:function(){return{active:-1,processing:!1,response:{data:[]},search:null,formattedValue:null}},methods:{commit:function(){this.close();var e=this.response.data[this.active].value,t=this.multiple?this.modelValue.concat([e]):[e];this.$emit("update:modelValue",this.selectResolver(this.multiple?t:t[0],JSON.parse(JSON.stringify(this.response.data)))),this.updateFormattedValue(t),this.search=null},select:function(e){this.highlight(e),this.commit()},highlight:function(e){var t=this;this.open(),this.active=e,this.$refs.option&&this.$refs.option[e]&&this.$nextTick((function(){t.$refs.option[e].scrollIntoView({block:"nearest"})}))},highlightNext:function(){this.isOpen&&this.highlight(this.active+1>=this.response.data.length?0:this.active+1)},highlightPrev:function(){this.isOpen&&this.highlight(0===this.active?this.response.data.length-1:this.active-1)},clear:function(){this.search=null,this.$emit("update:modelValue",this.multiple?[]:null)},fetch:function(){var e=this;this.processing=!0,this.$http.get(this.url,{params:{search:this.search}}).then((function(t){e.response=t.data})).catch((function(e){})).finally((function(){e.processing=!1}))},selected:function(e){return this.multiple?this.modelValue.includes(e):e===this.modelValue},remove:function(e){if(this.multiple){var t=Array.from(this.modelValue);t.splice(t.findIndex((function(t){return t===e})),1),this.updateFormattedValue(t),this.$emit("update:modelValue",t)}else this.$emit("update:modelValue",null),this.formattedValue={}},updateFormattedValue:function(e){var t=this;this.formattedValue=e.reduce((function(e,n){return Object.assign(e,I({},n,t.formattedValue.hasOwnProperty(n)?t.formattedValue[n]:t.response.data.find((function(e){return e.value===n})).formatted_value))}),{})}}},D=(0,x.Z)(M,[["render",function(e,t,n,r,a,l){var s=(0,o.up)("Icon"),u=(0,o.Q2)("debounce");return(0,o.wg)(),(0,o.iD)("div",{class:(0,j.C_)(["form-group form-group--autocomplete",n.class]),style:(0,j.j5)(n.style)},[(0,o._)("label",{class:"form-label",for:e.$attrs.id},[(0,o._)("span",null,(0,j.zw)(n.label),1),e.$attrs.required?((0,o.wg)(),(0,o.iD)("span",{key:0,class:"form-label__required-marker","aria-label":e.__("Required")},"*",8,P)):(0,o.kq)("",!0)],8,A),(0,o._)("div",{class:(0,j.C_)(["form-control tag-control",{"form-control--invalid":null!==n.error}]),onClick:t[7]||(t[7]=(0,i.iM)((function(){var t;return e.$refs.input.focus&&(t=e.$refs.input).focus.apply(t,arguments)}),["self"]))},[((0,o.wg)(!0),(0,o.iD)(o.HY,null,(0,o.Ko)(a.formattedValue,(function(e,t){return(0,o.wg)(),(0,o.iD)("span",{class:"tag",key:t},[(0,o._)("span",T,(0,j.zw)(e),1),(0,o._)("button",{type:"button",class:"tag__remove",onClick:function(e){return l.remove(t)}},[(0,o.Wm)(s,{name:"close"})],8,C)])})),128)),(0,o.wy)((0,o._)("input",(0,o.dG)({ref:"input",type:"text",style:{width:"150px"},autocomplete:"off"},e.$attrs,{"onUpdate:modelValue":t[0]||(t[0]=function(e){return a.search=e}),class:{"form-control--invalid":null!==n.error},onFocus:t[1]||(t[1]=function(){return e.open&&e.open.apply(e,arguments)}),onBlur:t[2]||(t[2]=function(){return e.close&&e.close.apply(e,arguments)}),onKeydown:[t[3]||(t[3]=(0,i.D2)((function(){return l.highlightPrev&&l.highlightPrev.apply(l,arguments)}),["up"])),t[4]||(t[4]=(0,i.D2)((function(){return l.highlightNext&&l.highlightNext.apply(l,arguments)}),["down"])),t[5]||(t[5]=(0,i.D2)((0,i.iM)((function(){return l.commit&&l.commit.apply(l,arguments)}),["prevent"]),["enter"]))],onChange:t[6]||(t[6]=function(){return l.fetch&&l.fetch.apply(l,arguments)})}),null,16),[[i.nr,a.search,void 0,{lazy:!0}],[u,300]])],2),n.error?((0,o.wg)(),(0,o.iD)("span",N,(0,j.zw)(n.error),1)):(0,o.kq)("",!0),(0,o.wy)((0,o._)("ul",q,[((0,o.wg)(!0),(0,o.iD)(o.HY,null,(0,o.Ko)(a.response.data,(function(e,t){return(0,o.wg)(),(0,o.iD)("li",{ref_for:!0,ref:"option",innerHTML:e.formatted_value,tabindex:"-1","aria-selected":t===a.active?"true":"false",class:(0,j.C_)({"is-active":t===a.active,"is-selected":l.selected(e.value)}),key:e.value,onMousedown:function(e){return l.select(t)}},null,42,L)})),128)),0===a.response.data.length?((0,o.wg)(),(0,o.iD)("li",R,(0,j.zw)(e.__("No items found for the given keyword.")),1)):(0,o.kq)("",!0)],512),[[i.F8,e.isOpen]])],6)}]]);var U=["for"],B=["aria-label"],F=["name","value"],$=["innerHTML"],V={key:0,class:"form-check"},H=["id","name"],z={class:"form-check__label"};const W={props:{class:{type:[String,Array,Object],default:null},style:{type:[String,Array,Object],default:null},modelValue:{default:null},value:{default:null},formatted_value:{default:null},label:{type:String,required:!0},error:{type:String,default:null},id:{type:String,requried:!0},name:{type:String,requried:!0},options:{type:Array,default:function(){return[]}}},inheritAttrs:!1,emits:["update:modelValue"],computed:{_value:{set:function(e){this.$emit("update:modelValue",e)},get:function(){return null===this.modelValue&&this.options.length>0?[]:this.modelValue}}}},K=(0,x.Z)(W,[["render",function(e,t,n,r,a,l){return(0,o.wg)(),(0,o.iD)("div",{class:(0,j.C_)(["form-group form-group--vertical-check",n.class]),style:(0,j.j5)(n.style)},[(0,o._)("label",{class:"form-label",for:n.id},[(0,o._)("span",null,(0,j.zw)(n.label),1),e.$attrs.required?((0,o.wg)(),(0,o.iD)("span",{key:0,class:"form-label__required-marker","aria-label":e.__("Required")},"*",8,B)):(0,o.kq)("",!0)],8,U),((0,o.wg)(!0),(0,o.iD)(o.HY,null,(0,o.Ko)(n.options,(function(r){return(0,o.wg)(),(0,o.iD)("label",{class:"form-check",key:r.value},[(0,o.wy)((0,o._)("input",(0,o.dG)(e.$attrs,{class:"form-check__control","onUpdate:modelValue":t[0]||(t[0]=function(e){return l._value=e}),name:"".concat(n.name,".").concat(r.value),value:r.value}),null,16,F),[[i.YZ,l._value]]),(0,o._)("span",{class:"form-check__label",innerHTML:r.formatted_value},null,8,$)])})),128)),0===n.options.length?((0,o.wg)(),(0,o.iD)("label",V,[(0,o.wy)((0,o._)("input",(0,o.dG)(e.$attrs,{class:"form-check__control","onUpdate:modelValue":t[1]||(t[1]=function(e){return l._value=e}),id:n.id,name:n.name}),null,16,H),[[i.YZ,l._value]]),(0,o._)("span",z,(0,j.zw)(n.label),1)])):(0,o.kq)("",!0)],6)}]]);var Z=["for"],Y=["aria-label"],G={class:"form-group-inner--stack"},J=["disabled"],X={key:0,class:"field-feedback field-feedback--invalid"};const Q={props:{class:{type:[String,Array,Object],default:null},style:{type:[String,Array,Object],default:null},modelValue:{type:String,default:null},label:{type:String,default:null},error:{type:String,default:null},with_time:{type:Boolean,default:!1},value:{type:String,default:null},formatted_value:{type:String,default:null}},inheritAttrs:!1,emits:["update:modelValue"],data:function(){return{_value:new Date(this.modelValue)}},computed:{date:{set:function(e){e=e.split("-"),this._value.setFullYear(e[0]),this._value.setMonth(e[1]-1),this._value.setDate(e[2]),this.$emit("update:modelValue",this._value.toISOString())},get:function(){return this.modelValue?[this._value.getFullYear(),(this._value.getMonth()+1).toString().padStart(2,0),this._value.getDate().toString().padStart(2,0)].join("-"):null}},time:{set:function(e){e=e.split(":"),this._value.setHours(e[0]),this._value.setMinutes(e[1]),this._value.setSeconds(e[2]),this.$emit("update:modelValue",this._value.toISOString())},get:function(){return this.modelValue?[this._value.getHours().toString().padStart(2,0),this._value.getMinutes().toString().padStart(2,0),this._value.getSeconds().toString().padStart(2,0)].join(":"):null}}}},ee=(0,x.Z)(Q,[["render",function(e,t,n,r,a,l){return(0,o.wg)(),(0,o.iD)("div",{class:(0,j.C_)(["form-group",n.class]),style:(0,j.j5)(n.style)},[(0,o._)("label",{class:"form-label",for:e.$attrs.id},[(0,o._)("span",null,(0,j.zw)(n.label),1),e.$attrs.required?((0,o.wg)(),(0,o.iD)("span",{key:0,class:"form-label__required-marker","aria-label":e.__("Required")},"*",8,Y)):(0,o.kq)("",!0)],8,Z),(0,o._)("div",G,[(0,o.wy)((0,o._)("input",(0,o.dG)({class:"form-control"},e.$attrs,{"onUpdate:modelValue":t[0]||(t[0]=function(e){return l.date=e}),class:{"form-control--invalid":null!==n.error}}),null,16),[[i.YZ,l.date]]),n.with_time?(0,o.wy)(((0,o.wg)(),(0,o.iD)("input",{key:0,type:"time",step:"1",class:(0,j.C_)(["form-control",{"form-control--invalid":null!==n.error}]),"onUpdate:modelValue":t[1]||(t[1]=function(e){return l.time=e}),disabled:e.$attrs.disabled},null,10,J)),[[i.nr,l.time]]):(0,o.kq)("",!0)]),n.error?((0,o.wg)(),(0,o.iD)("span",X,(0,j.zw)(n.error),1)):(0,o.kq)("",!0)],6)}]]);var te=["for"],ne=["aria-label"],re={ref:"input",class:"editor",spellcheck:"false"},oe={key:1,class:"field-feedback field-feedback--invalid"};var ie=n(6095),ae=n.n(ie),le=["aria-label"],se={class:"modal-inner"},ue={class:"modal-header"},ce={class:"modal-title"},fe=["aria-label"],pe=["data-dropzone-text"],de={ref:"container"},he={class:"media-item-list__body"},ye={class:"media-item-list__sidebar"},ve={key:1,class:"alert alert--info",role:"alert"};var me=["src","alt"],ge={key:1,class:"media-item__caption"};const be={props:{item:{type:Object,required:!0}},data:function(){return{tries:0,loading:!1,url:this.item.urls.thumb||this.item.urls.original}},computed:{classNames:function(){return{"is-image":this.item.is_image,"is-svg":this.item.mime_type.startsWith("image/svg"),"is-document":!this.item.is_image,"is-selected":this.selected,"is-loading":this.loading}},selected:function(){var e=this;return this.$parent.selection.some((function(t){return t.id===e.item.id}))}},methods:{toggle:function(){this.$parent.processing||(this.selected?this.$parent.deselect(this.item):this.$parent.select(this.item))},reload:function(){var e=this;if(!(this.tries>=5)){this.loading=!0;var t=setInterval((function(){var n=new URL(e.url);n.searchParams.set("key",(new Date).getTime()),e.url=n.toString(),e.tries++,clearInterval(t)}),5e3)}}}},_e=(0,x.Z)(be,[["render",function(e,t,n,r,a,l){var s=(0,o.up)("Icon");return(0,o.wg)(),(0,o.iD)("div",{class:(0,j.C_)(["media-item",l.classNames]),style:{cursor:"pointer"},onClick:t[2]||(t[2]=(0,i.iM)((function(){return l.toggle&&l.toggle.apply(l,arguments)}),["prevent"]))},[n.item.is_image?((0,o.wg)(),(0,o.iD)("img",{key:0,src:a.url,alt:n.item.name,onError:t[0]||(t[0]=function(){return l.reload&&l.reload.apply(l,arguments)}),onLoad:t[1]||(t[1]=function(e){return a.loading=!1})},null,40,me)):((0,o.wg)(),(0,o.iD)("span",ge,[(0,o.Wm)(s,{name:"description"}),(0,o._)("span",null,(0,j.zw)(n.item.file_name),1)]))],2)}]]);var we={class:"modal-filter"},Oe={class:"form-group--inline"},ke={for:"media-search",class:"sr-only"},Se=["placeholder","readonly"],xe={class:"form-group--inline"},Ee={for:"media-type",class:"form-group__label is-prepend"},je={class:"form-group-text"},Ae={class:"custom-select"},Pe=["disabled"],Te={value:null},Ce={value:"file"},Ne={value:"image"};const qe={},Le=(0,x.Z)(qe,[["render",function(e,t,n,r,a,l){var s=(0,o.Q2)("debounce");return(0,o.wg)(),(0,o.iD)("div",we,[(0,o._)("div",Oe,[(0,o._)("label",ke,(0,j.zw)(e.__("Search")),1),(0,o.wy)((0,o._)("input",{id:"media-search",type:"text",class:"form-control form-control--sm",style:{width:"15rem"},placeholder:e.__("Search"),readonly:e.$parent.processing,"onUpdate:modelValue":t[0]||(t[0]=function(t){return e.$parent.query.search=t})},null,8,Se),[[i.nr,e.$parent.query.search,void 0,{lazy:!0}],[s,500]])]),(0,o._)("div",xe,[(0,o._)("label",Ee,[(0,o._)("span",je,(0,j.zw)(e.__("Type")),1)]),(0,o._)("div",Ae,[(0,o.wy)((0,o._)("select",{id:"media-type",class:"form-control form-control--sm",disabled:e.$parent.processing,"onUpdate:modelValue":t[1]||(t[1]=function(t){return e.$parent.query.type=t})},[(0,o._)("option",Te,(0,j.zw)(e.__("All")),1),(0,o._)("option",Ce,(0,j.zw)(e.__("File")),1),(0,o._)("option",Ne,(0,j.zw)(e.__("Image")),1)],8,Pe),[[i.bM,e.$parent.query.type]])])])])}]]);var Re={class:"media-sidebar"},Ie={class:"media-sidebar__section"},Me={class:"media-sidebar__title"},De={class:"accordion-wrapper"};var Ue=["src"],Be={key:1,class:"media-accordion__icon"},Fe={class:"media-accrodion__caption"},$e={class:"media-sidebar__list mt-3 mb-3"},Ve={key:0},He=(0,o.Uk)(": "),ze=["innerHTML"],We={class:"form-group-stack"},Ke={class:"form-group"};var Ze={class:"accordion"},Ye={class:"accordion__title"},Ge=["aria-expanded"],Je=(0,o._)("svg",{class:"accordion__icon","aria-hidden":"true",focusable:"false",height:"24px",viewBox:"0 0 24 24",width:"24px"},[(0,o._)("path",{d:"M12,2c-5.52,0 -10,4.48 -10,10c0,5.52 4.48,10 10,10c5.52,0 10,-4.48 10,-10c0,-5.52 -4.48,-10 -10,-10Zm0,18c-4.41,0 -8,-3.59 -8,-8c0,-4.41 3.59,-8 8,-8c4.41,0 8,3.59 8,8c0,4.41 -3.59,8 -8,8Z",fill:"currentColor"}),(0,o._)("path",{d:"M7,12c0,0.55 0.45,1 1,1l8,0c0.55,0 1,-0.45 1,-1c0,-0.55 -0.45,-1 -1,-1l-8,0c-0.55,0 -1,0.45 -1,1Z",fill:"currentColor"}),(0,o._)("path",{class:"vert",d:"M12,7c-0.55,0 -1,0.45 -1,1l0,8c0,0.55 0.45,1 1,1c0.55,0 1,-0.45 1,-1l0,-8c0,-0.55 -0.45,-1 -1,-1Z",fill:"currentColor"})],-1);const Xe={mixins:[k.Z],props:{title:{type:String,default:null}}},Qe={components:{Accordion:(0,x.Z)(Xe,[["render",function(e,t,n,r,i,a){return(0,o.wg)(),(0,o.iD)("div",Ze,[(0,o._)("h2",Ye,[(0,o._)("button",{type:"button","aria-expanded":e.isOpen,onClick:t[0]||(t[0]=function(){return e.toggle&&e.toggle.apply(e,arguments)})},[(0,o.WI)(e.$slots,"header",{},(function(){return[(0,o.Uk)((0,j.zw)(n.title),1)]})),Je],8,Ge)]),(0,o._)("div",{class:(0,j.C_)(["accordion__content",{hidden:!e.isOpen}])},[(0,o.WI)(e.$slots,"default")],2)])}]])},props:{item:{type:Object,required:!0}},emits:["deselect"],data:function(){return{tries:0,loading:!1,url:this.item.urls.thumb||this.item.urls.original}},computed:{size:function(){if(0===this.item.size)return"1 KB";var e=Math.floor(Math.log(this.item.size)/Math.log(1024));return 1*(this.item.size/Math.pow(1024,e)).toFixed(2)+" "+["KB","MB","GB","TB"][e]},dimensions:function(){return this.item.width&&this.item.height?"".concat(this.item.width,"&times;").concat(this.item.height," px"):null}},methods:{deselect:function(){this.$emit("deselect",this.item)},reload:function(){var e=this;if(this.tries>=5)this.loading=!1;else{this.loading=!0;var t=setInterval((function(){var n=new URL(e.url);n.searchParams.set("key",(new Date).getTime()),e.url=n.toString(),e.tries++,clearInterval(t)}),5e3)}}}},et={components:{Item:(0,x.Z)(Qe,[["render",function(e,t,n,r,i,a){var l=(0,o.up)("Icon"),s=(0,o.up)("FormHandler"),u=(0,o.up)("Accordion");return(0,o.wg)(),(0,o.j4)(u,{title:n.item.file_name},{header:(0,o.w5)((function(){return[n.item.is_image?((0,o.wg)(),(0,o.iD)("div",{key:0,class:(0,j.C_)(["media-accordion__image-wrapper",{"is-loading":i.loading}])},[(0,o._)("img",{src:i.url,class:"media-accordion__image",alt:"",onError:t[0]||(t[0]=function(){return a.reload&&a.reload.apply(a,arguments)}),onLoad:t[1]||(t[1]=function(e){return i.loading=!1})},null,40,Ue)],2)):((0,o.wg)(),(0,o.iD)("span",Be,[(0,o.Wm)(l,{name:"description"})])),(0,o._)("span",Fe,(0,j.zw)(n.item.file_name),1)]})),default:(0,o.w5)((function(){return[(0,o._)("ul",$e,[(0,o._)("li",null,[(0,o._)("strong",null,(0,j.zw)(e.__("Created at")),1),(0,o.Uk)(": "+(0,j.zw)(n.item.created_at),1)]),(0,o._)("li",null,[(0,o._)("strong",null,(0,j.zw)(e.__("Size")),1),(0,o.Uk)(": "+(0,j.zw)(a.size),1)]),a.dimensions?((0,o.wg)(),(0,o.iD)("li",Ve,[(0,o._)("strong",null,(0,j.zw)(e.__("Dimensions")),1),He,(0,o._)("span",{innerHTML:a.dimensions},null,8,ze)])):(0,o.kq)("",!0)]),(0,o._)("div",We,[((0,o.wg)(!0),(0,o.iD)(o.HY,null,(0,o.Ko)(n.item.fields,(function(t){return(0,o.wg)(),(0,o.j4)(s,(0,o.dG)(t,{modelValue:e.$parent.$parent.value[n.item.id][t.name],"onUpdate:modelValue":function(r){return e.$parent.$parent.value[n.item.id][t.name]=r},form:e.$parent.$parent.$parent.$parent.form,key:"".concat(n.item.id,"-").concat(t.name),id:"".concat(e.$parent.$parent.$parent.name,".").concat(n.item.id,".").concat(t.name),name:"".concat(e.$parent.$parent.$parent.name,".").concat(n.item.id,".").concat(t.name)}),null,16,["modelValue","onUpdate:modelValue","form","id","name"])})),128)),(0,o._)("div",Ke,[(0,o._)("button",{type:"button",class:"btn btn--delete btn--sm btn--tertiary",onClick:t[2]||(t[2]=function(){return a.deselect&&a.deselect.apply(a,arguments)})},(0,j.zw)(e.__("Remove")),1)])])]})),_:1},8,["title"])}]])},props:{items:{type:Array,required:!0}},methods:{deselect:function(e){this.items.splice(this.items.findIndex((function(t){return t.id===e.id})),1)}}};var tt={class:"modal-footer"},nt={class:"modal-footer-actions"},rt=["disabled"],ot=["disabled"];const it={};var at={class:"uploader-item"},lt={key:1,class:"uploader-item__error"};const st={props:{file:{type:File,required:!0},url:{type:String,required:!0}},beforeMount:function(){this.generateHash(),this.createChunks()},watch:{chunks:{handler:function(e,t){e.length>0&&this.upload()},deep:!0}},data:function(){return{chunks:[],hash:null,error:null,uploaded:0}},computed:{progress:function(){return Math.floor(100*this.uploaded/this.file.size)},formData:function(){var e=new FormData;return e.set("is_last",1===this.chunks.length),e.set("file",this.chunks[0],"".concat(this.hash,"__").concat(this.file.name,".chunk")),e}},methods:{upload:function(){var e=this;this.$http.post(this.url,this.formData,{headers:{"Content-Type":"multipart/form-data"},onUploadProgress:function(t){e.uploaded+=t.loaded}}).then((function(t){e.onSuccess(t.data)})).catch((function(t){e.error=e.__("Something went wrong!")}))},retry:function(){this.chunks=[],this.error=null,this.uploaded=0,this.generateHash(),this.createChunks()},onSuccess:function(e){this.chunks.shift(),0===this.chunks.length&&(this.$parent.response.total++,this.$parent.response.data.unshift(e),this.$parent.queue.splice(this.$parent.queue.indexOf(this.file),1))},generateHash:function(){this.hash=Math.random().toString(36).replace(/[^a-z]+/g,"").substr(0,5)},createChunks:function(){for(var e=[],t=1048576,n=Math.ceil(this.file.size/t),r=0;r<n;r++)e.push(this.file.slice(r*t,Math.min(r*t+t,this.file.size),this.file.type));this.chunks=e}}};function ut(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function ct(e){return function(e){if(Array.isArray(e))return ft(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return ft(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return ft(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ft(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const pt={components:{Item:_e,Filters:Le,Sidebar:(0,x.Z)(et,[["render",function(e,t,n,r,i,a){var l=(0,o.up)("Item");return(0,o.wg)(),(0,o.iD)("div",Re,[(0,o._)("div",Ie,[(0,o._)("h3",Me,(0,j.zw)(e.__(":count selected file",{count:n.items.length})),1),(0,o._)("div",De,[((0,o.wg)(!0),(0,o.iD)(o.HY,null,(0,o.Ko)(n.items,(function(e){return(0,o.wg)(),(0,o.j4)(l,{key:e.id,item:e,onDeselect:function(t){return a.deselect(e)}},null,8,["item","onDeselect"])})),128))])])])}]]),Toolbar:(0,x.Z)(it,[["render",function(e,t,n,r,a,l){return(0,o.wg)(),(0,o.iD)("div",tt,[(0,o._)("div",null,[(0,o.wy)((0,o._)("span",{class:"modal-help-text"},(0,j.zw)(e.__(":files files selected",{files:e.$parent.selection.length})),513),[[i.F8,e.$parent.selection.length]])]),(0,o._)("div",nt,[(0,o._)("button",{type:"button",class:"btn btn--primary",disabled:e.$parent.processing,onClick:t[0]||(t[0]=function(){var t;return e.$parent.updateSelection&&(t=e.$parent).updateSelection.apply(t,arguments)})},(0,j.zw)(e.__("Select")),9,rt),(0,o._)("button",{type:"button",class:"btn btn--tertiary",disabled:e.$parent.processing,onClick:t[1]||(t[1]=function(){var t;return e.$parent.close&&(t=e.$parent).close.apply(t,arguments)})},(0,j.zw)(e.__("Close")),9,ot)])])}]]),Uploader:(0,x.Z)(st,[["render",function(e,t,n,r,i,a){return(0,o.wg)(),(0,o.iD)("div",at,[i.error?((0,o.wg)(),(0,o.iD)("span",lt,[(0,o.Uk)((0,j.zw)(i.error)+" ",1),(0,o._)("button",{type:"button",class:"btn btn--secondary btn--sm",onClick:t[0]||(t[0]=function(){return a.retry&&a.retry.apply(a,arguments)})},(0,j.zw)(e.__("Retry")),1)])):((0,o.wg)(),(0,o.iD)("div",{key:0,class:"uploader-item__progress",style:(0,j.j5)({width:"".concat(a.progress,"%")})},null,4))])}]])},mixins:[k.Z],props:{modelValue:{type:[Array,Object],default:function(){return[]}},multiple:{type:Boolean,default:!1},url:{type:String,required:!0},title:{type:String,default:function(){return this.__("Media")}},selectResolver:{type:Function,default:function(e,t){return e}}},inheritAttrs:!1,emits:["update:modelValue"],watch:{isOpen:function(e,t){document.body.classList.toggle("has-modal-open",e)},query:{handler:function(e,t){this.fetch()},deep:!0}},mounted:function(){var e=this;this.$dispatcher.once("open",this.fetch),window.addEventListener("keyup",(function(t){e.isOpen&&"Escape"===t.code&&e.close()})),this.$refs.container.addEventListener("scroll",function(e){var t,n,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:300;return function(){var o=arguments,i=this;n?(clearTimeout(t),t=setTimeout((function(){Date.now()-n>=r&&(e.apply(i,o),n=Date.now())}),r-(Date.now()-n))):(e.apply(i,o),n=Date.now())}}((function(t){e.shouldPaginate()&&e.paginate()}),300))},data:function(){return{dragging:!1,processing:!1,query:{type:null,search:null},queue:[],response:{data:[],next_page_url:null,prev_page_url:null},selection:[],value:Object.assign({},JSON.parse(JSON.stringify(this.modelValue)))}},methods:{fetch:function(){var e=this;this.processing=!0,this.$http.get(this.url,{params:this.query}).then((function(t){e.response=t.data})).catch((function(e){})).finally((function(){e.processing=!1}))},paginate:function(){var e=this;this.processing=!0,this.$http.get(this.response.next_page_url).then((function(t){var n;(n=e.response.data).push.apply(n,ct(t.data.data)),e.response.next_page_url=t.data.next_page_url,e.response.prev_page_url=t.data.prev_page_url})).catch((function(e){})).finally((function(){e.processing=!1}))},handleFiles:function(e){this.dragging=!1;for(var t=0;t<e.length;t++)this.queue.unshift(e.item(t))},shouldPaginate:function(){var e=this.$refs.container;return!this.processing&&null!==this.response.next_page_url&&this.response.data.length>0&&e.scrollHeight-e.scrollTop-e.clientHeight<1},select:function(e){this.multiple?this.selection.push(e):(this.value={},this.selection=[e]),this.value=Object.assign(this.value,ut({},e.id,e.fields.reduce((function(e,t){return Object.assign(e,ut({},t.name,t.value))}),{})))},deselect:function(e){var t=this.selection.findIndex((function(t){return t.id===e.id}));this.selection.splice(t,1),delete this.value[e.id]},updateSelection:function(){this.update(),this.close()},update:function(){this.$emit("update:modelValue",this.selectResolver(this.value,this.selection))},clearSelection:function(){this.value={},this.selection=[],this.$emit("update:modelValue",this.value)}}},dt=(0,x.Z)(pt,[["render",function(e,t,n,r,a,l){var s=(0,o.up)("Icon"),u=(0,o.up)("Filters"),c=(0,o.up)("Uploader"),f=(0,o.up)("Item"),p=(0,o.up)("Sidebar"),d=(0,o.up)("Toolbar");return(0,o.wg)(),(0,o.iD)("div",{class:(0,j.C_)(["modal-backdrop",{"modal-backdrop--visible":e.isOpen}]),onClick:t[6]||(t[6]=(0,i.iM)((function(){return e.close&&e.close.apply(e,arguments)}),["self"]))},[(0,o._)("div",{role:"dialog","aria-modal":"true",class:(0,j.C_)(["modal modal--media",{hidden:!e.isOpen}]),"aria-label":n.title},[(0,o._)("div",se,[(0,o._)("div",ue,[(0,o._)("h2",ce,(0,j.zw)(n.title),1),(0,o._)("button",{type:"button",class:"modal-close btn btn--secondary btn--sm btn--icon","aria-label":e.__("Close modal"),onClick:t[0]||(t[0]=function(){return e.close&&e.close.apply(e,arguments)})},[(0,o.Wm)(s,{name:"close",class:"btn__icon"})],8,fe)]),(0,o._)("div",{class:(0,j.C_)(["modal-body",{"has-active-dropzone":a.dragging}]),"data-dropzone-text":e.__("Drop your files here"),onDragstart:t[1]||(t[1]=(0,i.iM)((function(){}),["prevent"])),onDragend:t[2]||(t[2]=(0,i.iM)((function(e){return a.dragging=!1}),["prevent"])),onDragover:t[3]||(t[3]=(0,i.iM)((function(e){return a.dragging=!0}),["prevent"])),onDragleave:t[4]||(t[4]=(0,i.iM)((function(e){return a.dragging=!1}),["prevent"])),onDrop:t[5]||(t[5]=(0,i.iM)((function(e){return l.handleFiles(e.dataTransfer.files)}),["prevent"]))},[(0,o._)("div",de,[(0,o.Wm)(u),a.queue.length||a.response.data.length?((0,o.wg)(),(0,o.iD)("div",{key:0,class:(0,j.C_)(["media-item-list-wrapper",{"is-sidebar-open":a.selection.length>0}])},[(0,o._)("div",he,[((0,o.wg)(!0),(0,o.iD)(o.HY,null,(0,o.Ko)(a.queue,(function(e,t){return(0,o.wg)(),(0,o.j4)(c,{key:"uploader-".concat(t),file:e,url:n.url},null,8,["file","url"])})),128)),((0,o.wg)(!0),(0,o.iD)(o.HY,null,(0,o.Ko)(a.response.data,(function(e,t){return(0,o.wg)(),(0,o.j4)(f,{key:"".concat(e.file_name,"-").concat(t),item:e},null,8,["item"])})),128))]),(0,o.wy)((0,o._)("div",ye,[(0,o.Wm)(p,{items:a.selection},null,8,["items"])],512),[[i.F8,a.selection.length]])],2)):((0,o.wg)(),(0,o.iD)("div",ve,(0,j.zw)(e.__("No results found.")),1))],512)],42,pe),(0,o.Wm)(d)])],10,le)],2)}]]),ht={components:{Media:dt},props:{class:{type:[String,Array,Object],default:null},style:{type:[String,Array,Object],default:null},modelValue:{type:String,default:""},value:{type:String,default:""},formatted_value:{type:String,default:""},with_media:{type:Boolean,default:!1},media_url:{type:String,default:null},label:{type:String,required:!0},error:{type:String,default:null},placeholder:{type:String,default:""},config:{type:Object,requried:!0}},inheritAttrs:!1,emits:["update:modelValue"],mounted:function(){var e=this,t=JSON.parse(JSON.stringify(Object.assign({},this.config,{placeholder:this.placeholder})));this.with_media&&(t.modules.toolbar.handlers.image=function(){e.$refs.media.open()});var n=new(ae())(this.$refs.input,t);n.root.innerHTML=this.modelValue,n.enable(!this.$attrs.disabled),n.on("text-change",(function(){e.$emit("update:modelValue","<p><br></p>"===n.root.innerHTML?"":n.root.innerHTML)})),this.selectResolver=function(t,r){return e.insertMedia(n,r),t}},data:function(){return{selectResolver:function(e){return e}}},methods:{insertMedia:function(e,t){var n=e.getSelection(!0);t.forEach((function(t){t.is_image?(e.editor.insertEmbed(n.index,"image",t.urls.original,ae().sources.USER),e.setSelection(n.index+1,0,ae().sources.SILENT)):(e.editor.insertText(n.index,t.name,"link",t.urls.original,ae().sources.USER),e.setSelection(n.index+t.name.length,0,ae().sources.SILENT))})),this.$refs.media.clearSelection()}}},yt=(0,x.Z)(ht,[["render",function(e,t,n,r,i,a){var l=(0,o.up)("Media");return(0,o.wg)(),(0,o.iD)("div",{class:(0,j.C_)(["form-group",n.class]),style:(0,j.j5)(n.style)},[(0,o._)("label",{class:"form-label",for:e.$attrs.id},[(0,o._)("span",null,(0,j.zw)(n.label),1),e.$attrs.required?((0,o.wg)(),(0,o.iD)("span",{key:0,class:"form-label__required-marker","aria-label":e.__("Required")},"*",8,ne)):(0,o.kq)("",!0)],8,te),(0,o._)("div",re,null,512),n.with_media?((0,o.wg)(),(0,o.j4)(l,{key:0,ref:"media",url:n.media_url,title:e.__("Media"),"select-resolver":i.selectResolver},null,8,["url","title","select-resolver"])):(0,o.kq)("",!0),n.error?((0,o.wg)(),(0,o.iD)("span",oe,(0,j.zw)(n.error),1)):(0,o.kq)("",!0)],6)}]]);var vt=["for"],mt=["aria-label"],gt={key:0,class:"field-feedback field-feedback--invalid"};const bt={props:{class:{type:[String,Array,Object],default:null},style:{type:[String,Array,Object],default:null},modelValue:{type:[String,Number],default:null},label:{type:String,required:!0},name:{type:String,required:!0},error:{type:String,default:null},value:{type:[String,Number],default:null},formatted_value:{type:[String,Number],default:null}},inheritAttrs:!1,emits:["update:modelValue"],computed:{_value:{set:function(e){this.$emit("update:modelValue",e)},get:function(){return this.modelValue}}}},_t=(0,x.Z)(bt,[["render",function(e,t,n,r,a,l){return(0,o.wg)(),(0,o.iD)("div",{class:(0,j.C_)(["form-group",n.class]),style:(0,j.j5)(n.style)},[(0,o._)("label",{class:"form-label",for:e.$attrs.id},[(0,o._)("span",null,(0,j.zw)(n.label),1),e.$attrs.required?((0,o.wg)(),(0,o.iD)("span",{key:0,class:"form-label__required-marker","aria-label":e.__("Required")},"*",8,mt)):(0,o.kq)("",!0)],8,vt),(0,o.wy)((0,o._)("input",(0,o.dG)({class:"form-control"},e.$attrs,{"onUpdate:modelValue":t[0]||(t[0]=function(e){return l._value=e}),class:{"form-control--invalid":null!==n.error}}),null,16),[[i.YZ,l._value]]),n.error?((0,o.wg)(),(0,o.iD)("span",gt,(0,j.zw)(n.error),1)):(0,o.kq)("",!0)],6)}]]);var wt={key:0},Ot={class:"form-group-stack"};const kt={props:{modelValue:{type:[Object,Array],default:function(){return[]}},fields:{type:Array,default:function(){return[]}},label:{type:String,required:!0},name:{type:String,required:!0},with_legend:{type:Boolean,default:!0}},inheritAttrs:!1},St=(0,x.Z)(kt,[["render",function(e,t,n,r,i,a){var l=(0,o.up)("FormHandler");return(0,o.wg)(),(0,o.iD)("fieldset",null,[n.with_legend?((0,o.wg)(),(0,o.iD)("legend",wt,(0,j.zw)(n.label),1)):(0,o.kq)("",!0),(0,o._)("div",Ot,[((0,o.wg)(!0),(0,o.iD)(o.HY,null,(0,o.Ko)(n.fields,(function(t){return(0,o.wg)(),(0,o.j4)(l,(0,o.dG)(t,{modelValue:n.modelValue[t.name],"onUpdate:modelValue":function(e){return n.modelValue[t.name]=e},form:e.$parent.form,key:"".concat(n.name,"-").concat(t.name),id:"".concat(n.name,".").concat(t.name),name:"".concat(n.name,".").concat(t.name)}),null,16,["modelValue","onUpdate:modelValue","form","id","name"])})),128))])])}]]);var xt=["for"],Et=["aria-label"],jt={class:"selected-media-item-list"},At=["onClick"],Pt=["src","alt"],Tt=["title"],Ct={key:0,class:"field-feedback field-feedback--invalid"};const Nt={components:{Media:dt},props:{class:{type:[String,Array,Object],default:null},style:{type:[String,Array,Object],default:null},modelValue:{type:[Array,Object],default:function(){return[]}},label:{type:String,required:!0},name:{type:String,required:!0},error:{type:String,default:null},url:{type:String,required:!0},selection:{type:Array,default:function(){return[]}},multiple:{type:Boolean,default:!1}},inheritAttrs:!1,emits:["update:modelValue"],mounted:function(){this.$refs.media.selection=Array.from(this.items)},data:function(){return{items:JSON.parse(JSON.stringify(this.selection))}},methods:{remove:function(e){this.$refs.media.deselect(e),this.items=this.$refs.media.selection},selectResolver:function(e,t){return this.items=t,e},update:function(e){this.$emit("update:modelValue",e)}}},qt=(0,x.Z)(Nt,[["render",function(e,t,n,r,i,a){var l=(0,o.up)("Media",!0),s=(0,o.up)("Icon");return(0,o.wg)(),(0,o.iD)("div",{class:(0,j.C_)(["form-group",n.class]),style:(0,j.j5)(n.style)},[(0,o._)("label",{class:"form-label",for:e.$attrs.id},[(0,o._)("span",null,(0,j.zw)(n.label),1),e.$attrs.required?((0,o.wg)(),(0,o.iD)("span",{key:0,class:"form-label__required-marker","aria-label":e.__("Required")},"*",8,Et)):(0,o.kq)("",!0)],8,xt),(0,o._)("div",null,[(0,o._)("button",{type:"button",class:"btn btn--sm btn--tertiary",onClick:t[0]||(t[0]=function(){var t;return e.$refs.media.open&&(t=e.$refs.media).open.apply(t,arguments)})},(0,j.zw)(e.__("Select :label",{label:n.label})),1),(0,o.Wm)(l,{ref:"media",url:n.url,title:n.label,modelValue:n.modelValue,"select-resolver":a.selectResolver,multiple:n.multiple,"onUpdate:modelValue":a.update},null,8,["url","title","modelValue","select-resolver","multiple","onUpdate:modelValue"])]),(0,o._)("div",jt,[((0,o.wg)(!0),(0,o.iD)(o.HY,null,(0,o.Ko)(i.items,(function(e){return(0,o.wg)(),(0,o.iD)("div",{class:"selected-media-item",key:e.id},[(0,o._)("button",{type:"button",class:"selected-media-item__remove",onClick:function(t){return a.remove(e)}},[(0,o.Wm)(s,{name:"close"})],8,At),e.is_image?((0,o.wg)(),(0,o.iD)("img",{key:0,src:e.urls.thumb||e.urls.original,alt:e.file_name},null,8,Pt)):((0,o.wg)(),(0,o.iD)("span",{key:1,class:"selected-media-item__document",title:e.file_name},[(0,o.Wm)(s,{name:"description"}),(0,o._)("span",null,(0,j.zw)(e.file_name),1)],8,Tt))])})),128))]),n.error?((0,o.wg)(),(0,o.iD)("span",Ct,(0,j.zw)(n.error),1)):(0,o.kq)("",!0)],6)}]]);var Lt=["for"],Rt=["aria-label"],It=["value"],Mt=["innerHTML"];const Dt={props:{class:{type:[String,Array,Object],default:null},style:{type:[String,Array,Object],default:null},modelValue:{default:null},value:{default:null},formatted_value:{default:null},label:{type:String,required:!0},error:{type:String,default:null},id:{type:String,requried:!0},options:{type:Array,default:function(){return[]}}},inheritAttrs:!1,emits:["update:modelValue"],computed:{_value:{set:function(e){this.$emit("update:modelValue",e)},get:function(){return this.modelValue}}}},Ut=(0,x.Z)(Dt,[["render",function(e,t,n,r,a,l){return(0,o.wg)(),(0,o.iD)("div",{class:(0,j.C_)(["form-group form-group--vertical-check",n.class]),style:(0,j.j5)(n.style)},[(0,o._)("label",{class:"form-label",for:n.id},[(0,o._)("span",null,(0,j.zw)(n.label),1),e.$attrs.required?((0,o.wg)(),(0,o.iD)("span",{key:0,class:"form-label__required-marker","aria-label":e.__("Required")},"*",8,Rt)):(0,o.kq)("",!0)],8,Lt),((0,o.wg)(!0),(0,o.iD)(o.HY,null,(0,o.Ko)(n.options,(function(n){return(0,o.wg)(),(0,o.iD)("label",{class:"form-check",key:n.value},[(0,o.wy)((0,o._)("input",(0,o.dG)(e.$attrs,{class:"form-check__control","onUpdate:modelValue":t[0]||(t[0]=function(e){return l._value=e}),value:n.value}),null,16,It),[[i.YZ,l._value]]),(0,o._)("span",{class:"form-check__label",innerHTML:n.formatted_value},null,8,Mt)])})),128))],6)}]]);var Bt=["for"],Ft=["aria-label"],$t={class:"form-range-display"},Vt={class:"form-range-display__item is-min"},Ht={class:"form-range-display__item is-current"},zt={class:"form-range-display__item is-max"},Wt={key:0,class:"field-feedback field-feedback--invalid"};const Kt={props:{class:{type:[String,Array,Object],default:null},style:{type:[String,Array,Object],default:null},modelValue:{type:[String,Number],default:null},value:{type:[String,Number],default:null},formatted_value:{type:[String,Number],default:null},label:{type:String,required:!0},name:{type:String,required:!0},error:{type:String,default:null}},inheritAttrs:!1,emits:["update:modelValue"],computed:{_value:{set:function(e){this.$emit("update:modelValue",e)},get:function(){return this.modelValue}}}},Zt=(0,x.Z)(Kt,[["render",function(e,t,n,r,a,l){return(0,o.wg)(),(0,o.iD)("div",{class:(0,j.C_)(["form-group form-group--range",n.class]),style:(0,j.j5)(n.style)},[(0,o._)("label",{class:"form-label",for:e.$attrs.id},[(0,o._)("span",null,(0,j.zw)(n.label),1),e.$attrs.required?((0,o.wg)(),(0,o.iD)("span",{key:0,class:"form-label__required-marker","aria-label":e.__("Required")},"*",8,Ft)):(0,o.kq)("",!0)],8,Bt),(0,o.wy)((0,o._)("input",(0,o.dG)({ref:"input",class:"form-range"},e.$attrs,{"onUpdate:modelValue":t[0]||(t[0]=function(e){return l._value=e}),class:{"form-control--invalid":null!==n.error}}),null,16),[[i.YZ,l._value]]),(0,o._)("div",$t,[(0,o._)("span",Vt,(0,j.zw)(e.$attrs.min),1),(0,o._)("span",Ht,(0,j.zw)(l._value||"-"),1),(0,o._)("span",zt,(0,j.zw)(e.$attrs.max),1)]),n.error?((0,o.wg)(),(0,o.iD)("span",Wt,(0,j.zw)(n.error),1)):(0,o.kq)("",!0)],6)}]]);var Yt=["for"],Gt=["aria-label"],Jt=["disabled"],Xt=["value"],Qt={key:0,class:"field-feedback field-feedback--invalid"};const en={props:{class:{type:[String,Array,Object],default:null},style:{type:[String,Array,Object],default:null},modelValue:{type:[String,Number,Array,Object],default:null},value:{type:[String,Number,Array,Object],default:null},formatted_value:{type:[String,Number,Array,Object],default:null},label:{type:String,required:!0},name:{type:String,required:!0},error:{type:String,default:null},options:{type:Object,required:!0},nullable:{type:Boolean,default:!1},selectResolver:{type:Function,default:function(e,t){return e}}},inheritAttrs:!1,emits:["update:modelValue"],computed:{_value:{set:function(e){this.$emit("update:modelValue",this.selectResolver(e,this.options))},get:function(){return JSON.parse(JSON.stringify(this.modelValue))}}}},tn=(0,x.Z)(en,[["render",function(e,t,n,r,a,l){return(0,o.wg)(),(0,o.iD)("div",{class:(0,j.C_)(["form-group",n.class]),style:(0,j.j5)(n.style)},[(0,o._)("label",{class:"form-label",for:e.$attrs.id},[(0,o._)("span",null,(0,j.zw)(n.label),1),e.$attrs.required?((0,o.wg)(),(0,o.iD)("span",{key:0,class:"form-label__required-marker","aria-label":e.__("Required")},"*",8,Gt)):(0,o.kq)("",!0)],8,Yt),(0,o.wy)((0,o._)("select",(0,o.dG)({class:"form-control"},e.$attrs,{"onUpdate:modelValue":t[0]||(t[0]=function(e){return l._value=e}),class:{"form-control--invalid":null!==n.error}}),[(0,o._)("option",{disabled:!n.nullable||e.$attrs.multiple,value:null,selected:""},(0,j.zw)(e.__("Select :label",{label:n.label})),9,Jt),((0,o.wg)(!0),(0,o.iD)(o.HY,null,(0,o.Ko)(n.options,(function(e){return(0,o.wg)(),(0,o.iD)("option",{value:e.value,key:e.value},(0,j.zw)(e.formatted_value),9,Xt)})),128))],16),[[i.bM,l._value]]),n.error?((0,o.wg)(),(0,o.iD)("span",Qt,(0,j.zw)(n.error),1)):(0,o.kq)("",!0)],6)}]]);var nn=["for"];const rn={components:{Link:a.rU},props:{class:{type:[String,Array,Object],default:null},style:{type:[String,Array,Object],default:null},modelValue:{type:[Array,Object],default:null},value:{type:[Array,Object],default:null},formatted_value:{type:[Array,Object],default:null},label:{type:String,required:!0},name:{type:String,required:!0},url:{type:String,required:!0}}};var on=["for"],an=["aria-label"],ln={class:"tag__label"},sn=["onClick"],un={key:0,class:"field-feedback field-feedback--invalid"};const cn={props:{class:{type:[String,Array,Object],default:null},style:{type:[String,Array,Object],default:null},modelValue:{type:Array,default:function(){return[]}},label:{type:String,required:!0},name:{type:String,required:!0},error:{type:String,default:null},value:{type:Array,default:function(){return[]}},formatted_value:{type:Array,default:function(){return[]}}},inheritAttrs:!1,emits:["update:modelValue"],data:function(){return{tag:null}},methods:{add:function(){var e=Array.from(this.modelValue||[]);this.tag&&!e.includes(this.tag)&&(e.push(this.tag),this.$emit("update:modelValue",e),this.tag=null)},remove:function(e){var t=Array.from(this.modelValue||[]);t.splice(e,1),this.$emit("update:modelValue",t)},removeLast:function(){Array.isArray(this.modelValue)&&!this.tag&&this.remove(this.modelValue.length-1)}}};var fn=["for"],pn=["aria-label"],dn={key:0,class:"field-feedback field-feedback--invalid"};const hn={props:{class:{type:[String,Array,Object],default:null},style:{type:[String,Array,Object],default:null},modelValue:{type:[String,Number],default:null},formatted_value:{type:[String,Number],default:null},label:{type:String,required:!0},name:{type:String,required:!0},error:{type:String,default:null}},inheritAttrs:!1,emits:["update:modelValue"],computed:{_value:{set:function(e){this.$emit("update:modelValue",e)},get:function(){return this.modelValue}}}};function yn(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function vn(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?yn(Object(n),!0).forEach((function(t){mn(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):yn(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function mn(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}const gn={name:"FormHandler",components:{AsyncSelect:D,Checkbox:K,DateTime:ee,Editor:yt,Input:_t,Json:St,Media:qt,Radio:Ut,Range:Zt,Select:tn,SubResource:(0,x.Z)(rn,[["render",function(e,t,n,r,i,a){var l=(0,o.up)("Link");return(0,o.wg)(),(0,o.iD)("div",{class:(0,j.C_)(["form-group",n.class]),style:(0,j.j5)(n.style)},[(0,o._)("label",{class:"form-label",for:e.$attrs.id},[(0,o._)("span",null,(0,j.zw)(n.label),1)],8,nn),(0,o._)("div",null,[(0,o.Wm)(l,{class:"btn btn--sm btn--tertiary",href:n.url},{default:(0,o.w5)((function(){return[(0,o.Uk)((0,j.zw)(n.label),1)]})),_:1},8,["href"])])],6)}]]),Tag:(0,x.Z)(cn,[["render",function(e,t,n,r,a,l){var s=(0,o.up)("Icon");return(0,o.wg)(),(0,o.iD)("div",{class:(0,j.C_)(["form-group",n.class]),style:(0,j.j5)(n.style)},[(0,o._)("label",{class:"form-label",for:e.$attrs.id},[(0,o._)("span",null,(0,j.zw)(n.label),1),e.$attrs.required?((0,o.wg)(),(0,o.iD)("span",{key:0,class:"form-label__required-marker","aria-label":e.__("Required")},"*",8,an)):(0,o.kq)("",!0)],8,on),(0,o._)("div",{class:(0,j.C_)(["form-control tag-control",{"form-control--invalid":null!==n.error}]),onClick:t[4]||(t[4]=(0,i.iM)((function(){var t;return e.$refs.input.focus&&(t=e.$refs.input).focus.apply(t,arguments)}),["self"]))},[((0,o.wg)(!0),(0,o.iD)(o.HY,null,(0,o.Ko)(n.modelValue,(function(e,t){return(0,o.wg)(),(0,o.iD)("span",{class:"tag",key:t},[(0,o._)("span",ln,(0,j.zw)(e),1),(0,o._)("button",{type:"button",class:"tag__remove",onClick:function(e){return l.remove(t)}},[(0,o.Wm)(s,{name:"close"})],8,sn)])})),128)),(0,o.wy)((0,o._)("input",(0,o.dG)({ref:"input",type:"text",style:{width:"150px"}},e.$attrs,{"onUpdate:modelValue":t[0]||(t[0]=function(e){return a.tag=e}),onBlur:t[1]||(t[1]=function(){return l.add&&l.add.apply(l,arguments)}),onKeydown:[t[2]||(t[2]=(0,i.D2)((0,i.iM)((function(){return l.add&&l.add.apply(l,arguments)}),["prevent"]),["enter"])),t[3]||(t[3]=(0,i.D2)((function(){return l.removeLast&&l.removeLast.apply(l,arguments)}),["backspace"]))]}),null,16),[[i.nr,a.tag]])],2),n.error?((0,o.wg)(),(0,o.iD)("span",un,(0,j.zw)(n.error),1)):(0,o.kq)("",!0)],6)}]]),Textarea:(0,x.Z)(hn,[["render",function(e,t,n,r,a,l){return(0,o.wg)(),(0,o.iD)("div",{class:(0,j.C_)(["form-group",n.class]),style:(0,j.j5)(n.style)},[(0,o._)("label",{class:"form-label",for:e.$attrs.id},[(0,o._)("span",null,(0,j.zw)(n.label),1),e.$attrs.required?((0,o.wg)(),(0,o.iD)("span",{key:0,class:"form-label__required-marker","aria-label":e.__("Required")},"*",8,pn)):(0,o.kq)("",!0)],8,fn),(0,o.wy)((0,o._)("textarea",(0,o.dG)({class:"form-control"},e.$attrs,{"onUpdate:modelValue":t[0]||(t[0]=function(e){return l._value=e}),class:{"form-control--invalid":null!==n.error}}),null,16),[[i.nr,l._value]]),n.error?((0,o.wg)(),(0,o.iD)("span",dn,(0,j.zw)(n.error),1)):(0,o.kq)("",!0)],6)}]])},props:{modelValue:{default:null},name:{type:String,required:!0},component:{type:String,default:"Input"},form:{type:Object,required:!0},componentResolver:{type:Function,default:function(e){return(0,o.up)(e)}},debounce:{type:Number,default:0}},inheritAttrs:!1,emits:["update:modelValue"],render:function(){var e=this;return(0,o.h)(this.componentResolver(this.component),vn(vn({},this.$attrs),{},{name:this.name,modelValue:this.modelValue,error:this.form.errors[this.name],disabled:this.form.processing||![void 0,"false",!1].includes(this.$attrs.disabled),required:![void 0,"false",!1].includes(this.$attrs.required),"onUpdate:modelValue":p((function(t){e.$emit("update:modelValue",t),e.form.clearErrors(e.name)}),this.debounce||0)}),this.$slots)}};var bn={class:"icon","aria-hidden":"true",focusable:"false",role:"img",fill:"currentColor",viewBox:"0 0 24 24",width:"24",height:"24"},_n=["xlink:href"];const wn={props:{name:{type:String,required:!0}}},On=(0,x.Z)(wn,[["render",function(e,t,n,r,i,a){return(0,o.wg)(),(0,o.iD)("svg",bn,[(0,o._)("use",{"xlink:href":"#icon-".concat(n.name)},null,8,_n)])}]]);var kn=["aria-label"],Sn={class:"modal-title"},xn={class:"modal-inner"},En={class:"modal-action"};const jn={mixins:[k.Z],props:{title:{type:String,required:!0}},watch:{isOpen:function(e,t){document.body.classList.toggle("has-modal-open",e)}}},An=(0,x.Z)(jn,[["render",function(e,t,n,r,a,l){return(0,o.wg)(),(0,o.iD)("div",{class:(0,j.C_)(["modal-backdrop",{"modal-backdrop--visible":e.isOpen}]),onClick:t[1]||(t[1]=(0,i.iM)((function(){return e.close&&e.close.apply(e,arguments)}),["self"]))},[(0,o._)("div",{role:"dialog","aria-modal":"true",class:(0,j.C_)(["modal",{hidden:!e.isOpen}]),"aria-label":n.title},[(0,o._)("h2",Sn,(0,j.zw)(n.title),1),(0,o._)("div",xn,[(0,o.WI)(e.$slots,"default")]),(0,o._)("div",En,[(0,o.WI)(e.$slots,"footer"),(0,o._)("button",{type:"button",class:"btn btn--secondary",onClick:t[0]||(t[0]=function(){return e.close&&e.close.apply(e,arguments)})},(0,j.zw)(e.__("Close")),1)])],10,kn)],2)}]]);function Pn(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var Tn=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.translations=t}var t,n,r;return t=e,n=[{key:"__",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};for(var n in e=this.translations[e]||e,t)e=e.toString().replace(":".concat(n),t[n]).replace(":".concat(n.toUpperCase()),t[n].toString().toUpperCase()).replace(":".concat(n.charAt(0).toUpperCase()).concat(n.slice(1)),t[n].toString().charAt(0).toUpperCase()+t[n].toString().slice(1));return e.toString().trim()}}],n&&Pn(t.prototype,n),r&&Pn(t,r),Object.defineProperty(t,"prototype",{writable:!1}),e}(),Cn=n(2236);const Nn={install:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};e.mixin(b),e.component("Dropdown",E),e.component("FormHandler",gn),e.component("Icon",On),e.component("Modal",An),e.component("WidgetHandler",Cn.Z),e.directive("debounce",d),e.config.globalProperties.$app=t,e.config.globalProperties.$cookie=new f;var n=new Tn(t.translations||{});e.config.globalProperties.__=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return n.__(e,t)},e.config.globalProperties.$http=s().create({headers:{Accept:"application/json","Content-Type":"application/json","X-Requested-With":"XMLHttpRequest"}})}};var qn={class:"app"},Ln={class:"app-body"},Rn={class:"app-body__inner"},In={key:0,class:"app-alert"},Mn={id:"logout-form",action:"/logout",method:"POST",style:{display:"none"}},Dn=["value"];var Un=["innerHTML"];const Bn={mixins:[k.Z],props:{message:{type:String,required:!0},type:{type:String,default:"info"}},inheritAttrs:!1,data:function(){return{isOpen:!0}}},Fn=(0,x.Z)(Bn,[["render",function(e,t,n,r,a,l){var s=(0,o.up)("Icon");return(0,o.wy)(((0,o.wg)(),(0,o.iD)("div",{class:(0,j.C_)(["alert","alert--".concat(n.type)])},[(0,o._)("div",{class:"alert__message",innerHTML:n.message},null,8,Un),(0,o._)("button",{type:"button",class:"alert__close",onClick:t[0]||(t[0]=function(){return e.close&&e.close.apply(e,arguments)})},[(0,o.Wm)(s,{name:"close"})])],2)),[[i.F8,a.isOpen]])}]]);var $n={class:"app-header"},Vn={class:"app-header__heading"},Hn={class:"app-header__title"},zn=(0,o._)("div",{class:"app-header__actions"},null,-1);const Wn={props:{title:{type:String,required:!0}}},Kn=(0,x.Z)(Wn,[["render",function(e,t,n,r,i,a){return(0,o.wg)(),(0,o.iD)("header",$n,[(0,o._)("div",Vn,[(0,o._)("h1",Hn,(0,j.zw)(n.title),1)]),zn])}]]);var Zn={class:"mobile-header"},Yn={class:"mobile-header__inner"},Gn=["src","alt"],Jn={class:"mobile-header__actions"};var Xn={class:"user-menu-wrapper"},Qn=["aria-expanded","aria-label"],er=["src"],tr={class:"user-menu__caption"},nr={class:"user-menu__name"},rr={class:"user-menu__role"},or={class:"user-menu__toggle"},ir={type:"submit",form:"logout-form",class:"user-menu-navigation__item"};const ar={mixins:[k.Z],props:{direction:{type:String,default:"top"}},computed:{classNames:function(){return"user-menu-navigation--".concat(this.direction)}}},lr=(0,x.Z)(ar,[["render",function(e,t,n,r,i,a){var l=(0,o.up)("Icon");return(0,o.wg)(),(0,o.iD)("div",Xn,[(0,o._)("button",{type:"button",class:"user-menu","aria-expanded":e.isOpen?"true":"false","aria-label":e.__("User Menu"),onClick:t[0]||(t[0]=function(){return e.toggle&&e.toggle.apply(e,arguments)})},[(0,o._)("img",{class:"user-menu__avatar",src:e.$app.user.avatar},null,8,er),(0,o._)("div",tr,[(0,o._)("span",nr,(0,j.zw)(e.$app.user.name),1),(0,o._)("span",rr,(0,j.zw)(e.$app.user.email),1)]),(0,o._)("div",or,[(0,o.Wm)(l,{class:"user-menu__arrow",name:"unfold-more"})])],8,Qn),(0,o._)("ul",{class:(0,j.C_)(["user-menu-navigation",a.classNames]),"aria-labelledby":"user-user-navigation"},[(0,o._)("li",null,[(0,o._)("button",ir,(0,j.zw)(e.__("Logout")),1)])],2)])}]]),sr={components:{Link:a.rU,UserMenu:lr},mounted:function(){this.sync(),this.$parent.$refs.sidebar.$dispatcher.on("open",this.sync),this.$parent.$refs.sidebar.$dispatcher.on("close",this.sync)},data:function(){return{isOpen:!1}},methods:{toggleSidebar:function(){this.$parent.$refs.sidebar.toggle()},sync:function(){this.isOpen=this.$parent.$refs.sidebar.isOpen}}},ur=(0,x.Z)(sr,[["render",function(e,t,n,r,i,a){var l=(0,o.up)("Link"),s=(0,o.up)("Icon"),u=(0,o.up)("UserMenu");return(0,o.wg)(),(0,o.iD)("div",Zn,[(0,o._)("div",Yn,[(0,o.Wm)(l,{href:e.$app.config.url},{default:(0,o.w5)((function(){return[(0,o._)("img",{class:"mobile-header__logo",src:e.$app.config.branding.logo,alt:e.$app.config.name},null,8,Gn)]})),_:1},8,["href"]),(0,o._)("div",Jn,[(0,o._)("button",{type:"button",class:"btn btn--secondary btn--icon",onClick:t[0]||(t[0]=function(){return a.toggleSidebar&&a.toggleSidebar.apply(a,arguments)})},[(0,o.Wm)(s,{class:"btn__icon btn__icon--start",name:i.isOpen?"menu-open":"menu"},null,8,["name"])]),(0,o.Wm)(u,{direction:"bottom"})])])])}]]);var cr={class:"app-sidebar__header"},fr=["src","alt"],pr=["aria-label"],dr={class:"navigation-item__caption"},hr={class:"app-sidebar__title"},yr={class:"navigation-item__caption"},vr={class:"navigation-submenu"},mr={key:0},gr={key:1},br={class:"app-sidebar__footer"};const _r={components:{Link:a.rU,UserMenu:lr},mixins:[k.Z],mounted:function(){this.$inertia.on("success",this.close)},methods:{isActive:function(e){return this.$page.props.url.startsWith(e)}}},wr={components:{Alert:Fn,Header:Kn,Nav:ur,Sidebar:(0,x.Z)(_r,[["render",function(e,t,n,r,i,a){var l=(0,o.up)("Link"),s=(0,o.up)("Icon"),u=(0,o.up)("UserMenu");return(0,o.wg)(),(0,o.iD)("aside",{class:(0,j.C_)(["app-sidebar",{"app-sidebar--open":e.isOpen}])},[(0,o._)("div",cr,[(0,o.Wm)(l,{href:e.$app.config.url},{default:(0,o.w5)((function(){return[(0,o._)("img",{class:"app-sidebar__logo",src:e.$app.config.branding.logo,alt:e.$app.config.name},null,8,fr)]})),_:1},8,["href"])]),(0,o._)("nav",{class:"navigation app-sidebar__navigation","aria-label":e.__("Site")},[(0,o._)("ul",null,[(0,o._)("li",{class:(0,j.C_)(["navigation-item",{"is-open":e.$app.config.url===e.$page.props.url}])},[(0,o.Wm)(l,{class:(0,j.C_)(["navigation-item__link",{"is-active":e.$app.config.url===e.$page.props.url}]),href:e.$app.config.url},{default:(0,o.w5)((function(){return[(0,o.Wm)(s,{class:"navigation-item__icon",name:"dashboard"}),(0,o._)("span",dr,(0,j.zw)(e.__("Dashboard")),1)]})),_:1},8,["href","class"])],2)]),(0,o._)("p",hr,(0,j.zw)(e.__("Resources")),1),(0,o._)("ul",null,[((0,o.wg)(!0),(0,o.iD)(o.HY,null,(0,o.Ko)(e.$app.resources,(function(t){return(0,o.wg)(),(0,o.iD)("li",{class:(0,j.C_)(["navigation-item",{"is-open":a.isActive(t.urls.index)}]),key:t.key},[(0,o.Wm)(l,{class:(0,j.C_)(["navigation-item__link",{"is-active":a.isActive(t.urls.index)}]),href:t.urls.index},{default:(0,o.w5)((function(){return[(0,o.Wm)(s,{class:"navigation-item__icon",name:t.icon},null,8,["name"]),(0,o._)("span",yr,(0,j.zw)(t.name),1)]})),_:2},1032,["href","class"]),(0,o._)("ul",vr,[t.abilities.viewAny?((0,o.wg)(),(0,o.iD)("li",mr,[(0,o.Wm)(l,{href:t.urls.index,"aria-current":t.urls.index===e.$page.props.url?"page":""},{default:(0,o.w5)((function(){return[(0,o.Uk)((0,j.zw)(e.__("All :resource",{resource:t.name})),1)]})),_:2},1032,["href","aria-current"])])):(0,o.kq)("",!0),t.abilities.create?((0,o.wg)(),(0,o.iD)("li",gr,[(0,o.Wm)(l,{href:t.urls.create,"aria-current":t.urls.create===e.$page.props.url?"page":""},{default:(0,o.w5)((function(){return[(0,o.Uk)((0,j.zw)(e.__("Create :model",{model:t.model_name})),1)]})),_:2},1032,["href","aria-current"])])):(0,o.kq)("",!0)])],2)})),128))])],8,pr),(0,o._)("div",br,[(0,o.Wm)(u)])],2)}]])},mounted:function(){var e=this,t=document.title;document.title="".concat(t," | ").concat(this.title),this.$inertia.on("finish",(function(){document.title="".concat(t," | ").concat(e.title)}))},computed:{token:function(){return this.$page.props.csrf_token},alerts:function(){return this.$page.props.alerts},title:function(){return this.$page.props.title||this.__("Dashboard")}}},Or=(0,x.Z)(wr,[["render",function(e,t,n,r,i,a){var l=(0,o.up)("Sidebar"),s=(0,o.up)("Nav"),u=(0,o.up)("Header"),c=(0,o.up)("Alert");return(0,o.wg)(),(0,o.iD)("div",qn,[(0,o.Wm)(l,{ref:"sidebar"},null,512),(0,o._)("main",Ln,[(0,o.Wm)(s),(0,o._)("div",Rn,[(0,o.Wm)(u,{title:a.title},null,8,["title"]),a.alerts.length>0?((0,o.wg)(),(0,o.iD)("div",In,[((0,o.wg)(!0),(0,o.iD)(o.HY,null,(0,o.Ko)(a.alerts,(function(e,t){return(0,o.wg)(),(0,o.j4)(c,(0,o.dG)({key:"".concat(e.timestamp,"-").concat(t)},e),null,16)})),128))])):(0,o.kq)("",!0),(0,o.WI)(e.$slots,"default")])]),(0,o._)("form",Mn,[(0,o._)("input",{type:"hidden",name:"_token",value:a.token},null,8,Dn)])])}]]);window.Vue=r,(0,a.yP)({resolve:function(e){var t;try{t=n(3218)("./".concat(e)).default}catch(n){t=o.up(e)}return t.resolveDefaultLayout=function(){return Or},t},setup:function(e){var t=e.el,n=e.App,r=e.props,a=e.plugin,l=i.ri({render:function(){return o.h(n,r)}});l.use(a),l.use(Nn,window.Root),document.dispatchEvent(new CustomEvent("root:booting",{detail:{app:l}}));var s=l.mount(t);document.dispatchEvent(new CustomEvent("root:booted",{detail:{app:l,instance:s}}))}})},9742:(e,t)=>{"use strict";t.byteLength=function(e){var t=s(e),n=t[0],r=t[1];return 3*(n+r)/4-r},t.toByteArray=function(e){var t,n,i=s(e),a=i[0],l=i[1],u=new o(function(e,t,n){return 3*(t+n)/4-n}(0,a,l)),c=0,f=l>0?a-4:a;for(n=0;n<f;n+=4)t=r[e.charCodeAt(n)]<<18|r[e.charCodeAt(n+1)]<<12|r[e.charCodeAt(n+2)]<<6|r[e.charCodeAt(n+3)],u[c++]=t>>16&255,u[c++]=t>>8&255,u[c++]=255&t;2===l&&(t=r[e.charCodeAt(n)]<<2|r[e.charCodeAt(n+1)]>>4,u[c++]=255&t);1===l&&(t=r[e.charCodeAt(n)]<<10|r[e.charCodeAt(n+1)]<<4|r[e.charCodeAt(n+2)]>>2,u[c++]=t>>8&255,u[c++]=255&t);return u},t.fromByteArray=function(e){for(var t,r=e.length,o=r%3,i=[],a=16383,l=0,s=r-o;l<s;l+=a)i.push(u(e,l,l+a>s?s:l+a));1===o?(t=e[r-1],i.push(n[t>>2]+n[t<<4&63]+"==")):2===o&&(t=(e[r-2]<<8)+e[r-1],i.push(n[t>>10]+n[t>>4&63]+n[t<<2&63]+"="));return i.join("")};for(var n=[],r=[],o="undefined"!=typeof Uint8Array?Uint8Array:Array,i="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a=0,l=i.length;a<l;++a)n[a]=i[a],r[i.charCodeAt(a)]=a;function s(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=e.indexOf("=");return-1===n&&(n=t),[n,n===t?0:4-n%4]}function u(e,t,r){for(var o,i,a=[],l=t;l<r;l+=3)o=(e[l]<<16&16711680)+(e[l+1]<<8&65280)+(255&e[l+2]),a.push(n[(i=o)>>18&63]+n[i>>12&63]+n[i>>6&63]+n[63&i]);return a.join("")}r["-".charCodeAt(0)]=62,r["_".charCodeAt(0)]=63},8764:(e,t,n)=>{"use strict";var r=n(9742),o=n(645),i=n(5826);function a(){return s.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function l(e,t){if(a()<t)throw new RangeError("Invalid typed array length");return s.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t)).__proto__=s.prototype:(null===e&&(e=new s(t)),e.length=t),e}function s(e,t,n){if(!(s.TYPED_ARRAY_SUPPORT||this instanceof s))return new s(e,t,n);if("number"==typeof e){if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return f(this,e)}return u(this,e,t,n)}function u(e,t,n,r){if("number"==typeof t)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer?function(e,t,n,r){if(t.byteLength,n<0||t.byteLength<n)throw new RangeError("'offset' is out of bounds");if(t.byteLength<n+(r||0))throw new RangeError("'length' is out of bounds");t=void 0===n&&void 0===r?new Uint8Array(t):void 0===r?new Uint8Array(t,n):new Uint8Array(t,n,r);s.TYPED_ARRAY_SUPPORT?(e=t).__proto__=s.prototype:e=p(e,t);return e}(e,t,n,r):"string"==typeof t?function(e,t,n){"string"==typeof n&&""!==n||(n="utf8");if(!s.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var r=0|h(t,n),o=(e=l(e,r)).write(t,n);o!==r&&(e=e.slice(0,o));return e}(e,t,n):function(e,t){if(s.isBuffer(t)){var n=0|d(t.length);return 0===(e=l(e,n)).length||t.copy(e,0,0,n),e}if(t){if("undefined"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||"length"in t)return"number"!=typeof t.length||(r=t.length)!=r?l(e,0):p(e,t);if("Buffer"===t.type&&i(t.data))return p(e,t.data)}var r;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(e,t)}function c(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function f(e,t){if(c(t),e=l(e,t<0?0:0|d(t)),!s.TYPED_ARRAY_SUPPORT)for(var n=0;n<t;++n)e[n]=0;return e}function p(e,t){var n=t.length<0?0:0|d(t.length);e=l(e,n);for(var r=0;r<n;r+=1)e[r]=255&t[r];return e}function d(e){if(e>=a())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+a().toString(16)+" bytes");return 0|e}function h(e,t){if(s.isBuffer(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var n=e.length;if(0===n)return 0;for(var r=!1;;)switch(t){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return F(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return $(e).length;default:if(r)return F(e).length;t=(""+t).toLowerCase(),r=!0}}function y(e,t,n){var r=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return T(this,t,n);case"utf8":case"utf-8":return E(this,t,n);case"ascii":return A(this,t,n);case"latin1":case"binary":return P(this,t,n);case"base64":return x(this,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return C(this,t,n);default:if(r)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),r=!0}}function v(e,t,n){var r=e[t];e[t]=e[n],e[n]=r}function m(e,t,n,r,o){if(0===e.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=o?0:e.length-1),n<0&&(n=e.length+n),n>=e.length){if(o)return-1;n=e.length-1}else if(n<0){if(!o)return-1;n=0}if("string"==typeof t&&(t=s.from(t,r)),s.isBuffer(t))return 0===t.length?-1:g(e,t,n,r,o);if("number"==typeof t)return t&=255,s.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(e,t,n):Uint8Array.prototype.lastIndexOf.call(e,t,n):g(e,[t],n,r,o);throw new TypeError("val must be string, number or Buffer")}function g(e,t,n,r,o){var i,a=1,l=e.length,s=t.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(e.length<2||t.length<2)return-1;a=2,l/=2,s/=2,n/=2}function u(e,t){return 1===a?e[t]:e.readUInt16BE(t*a)}if(o){var c=-1;for(i=n;i<l;i++)if(u(e,i)===u(t,-1===c?0:i-c)){if(-1===c&&(c=i),i-c+1===s)return c*a}else-1!==c&&(i-=i-c),c=-1}else for(n+s>l&&(n=l-s),i=n;i>=0;i--){for(var f=!0,p=0;p<s;p++)if(u(e,i+p)!==u(t,p)){f=!1;break}if(f)return i}return-1}function b(e,t,n,r){n=Number(n)||0;var o=e.length-n;r?(r=Number(r))>o&&(r=o):r=o;var i=t.length;if(i%2!=0)throw new TypeError("Invalid hex string");r>i/2&&(r=i/2);for(var a=0;a<r;++a){var l=parseInt(t.substr(2*a,2),16);if(isNaN(l))return a;e[n+a]=l}return a}function _(e,t,n,r){return V(F(t,e.length-n),e,n,r)}function w(e,t,n,r){return V(function(e){for(var t=[],n=0;n<e.length;++n)t.push(255&e.charCodeAt(n));return t}(t),e,n,r)}function O(e,t,n,r){return w(e,t,n,r)}function k(e,t,n,r){return V($(t),e,n,r)}function S(e,t,n,r){return V(function(e,t){for(var n,r,o,i=[],a=0;a<e.length&&!((t-=2)<0);++a)r=(n=e.charCodeAt(a))>>8,o=n%256,i.push(o),i.push(r);return i}(t,e.length-n),e,n,r)}function x(e,t,n){return 0===t&&n===e.length?r.fromByteArray(e):r.fromByteArray(e.slice(t,n))}function E(e,t,n){n=Math.min(e.length,n);for(var r=[],o=t;o<n;){var i,a,l,s,u=e[o],c=null,f=u>239?4:u>223?3:u>191?2:1;if(o+f<=n)switch(f){case 1:u<128&&(c=u);break;case 2:128==(192&(i=e[o+1]))&&(s=(31&u)<<6|63&i)>127&&(c=s);break;case 3:i=e[o+1],a=e[o+2],128==(192&i)&&128==(192&a)&&(s=(15&u)<<12|(63&i)<<6|63&a)>2047&&(s<55296||s>57343)&&(c=s);break;case 4:i=e[o+1],a=e[o+2],l=e[o+3],128==(192&i)&&128==(192&a)&&128==(192&l)&&(s=(15&u)<<18|(63&i)<<12|(63&a)<<6|63&l)>65535&&s<1114112&&(c=s)}null===c?(c=65533,f=1):c>65535&&(c-=65536,r.push(c>>>10&1023|55296),c=56320|1023&c),r.push(c),o+=f}return function(e){var t=e.length;if(t<=j)return String.fromCharCode.apply(String,e);var n="",r=0;for(;r<t;)n+=String.fromCharCode.apply(String,e.slice(r,r+=j));return n}(r)}t.Buffer=s,t.SlowBuffer=function(e){+e!=e&&(e=0);return s.alloc(+e)},t.INSPECT_MAX_BYTES=50,s.TYPED_ARRAY_SUPPORT=void 0!==n.g.TYPED_ARRAY_SUPPORT?n.g.TYPED_ARRAY_SUPPORT:function(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()&&"function"==typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(e){return!1}}(),t.kMaxLength=a(),s.poolSize=8192,s._augment=function(e){return e.__proto__=s.prototype,e},s.from=function(e,t,n){return u(null,e,t,n)},s.TYPED_ARRAY_SUPPORT&&(s.prototype.__proto__=Uint8Array.prototype,s.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&s[Symbol.species]===s&&Object.defineProperty(s,Symbol.species,{value:null,configurable:!0})),s.alloc=function(e,t,n){return function(e,t,n,r){return c(t),t<=0?l(e,t):void 0!==n?"string"==typeof r?l(e,t).fill(n,r):l(e,t).fill(n):l(e,t)}(null,e,t,n)},s.allocUnsafe=function(e){return f(null,e)},s.allocUnsafeSlow=function(e){return f(null,e)},s.isBuffer=function(e){return!(null==e||!e._isBuffer)},s.compare=function(e,t){if(!s.isBuffer(e)||!s.isBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var n=e.length,r=t.length,o=0,i=Math.min(n,r);o<i;++o)if(e[o]!==t[o]){n=e[o],r=t[o];break}return n<r?-1:r<n?1:0},s.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},s.concat=function(e,t){if(!i(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return s.alloc(0);var n;if(void 0===t)for(t=0,n=0;n<e.length;++n)t+=e[n].length;var r=s.allocUnsafe(t),o=0;for(n=0;n<e.length;++n){var a=e[n];if(!s.isBuffer(a))throw new TypeError('"list" argument must be an Array of Buffers');a.copy(r,o),o+=a.length}return r},s.byteLength=h,s.prototype._isBuffer=!0,s.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)v(this,t,t+1);return this},s.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)v(this,t,t+3),v(this,t+1,t+2);return this},s.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)v(this,t,t+7),v(this,t+1,t+6),v(this,t+2,t+5),v(this,t+3,t+4);return this},s.prototype.toString=function(){var e=0|this.length;return 0===e?"":0===arguments.length?E(this,0,e):y.apply(this,arguments)},s.prototype.equals=function(e){if(!s.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===s.compare(this,e)},s.prototype.inspect=function(){var e="",n=t.INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(e+=" ... ")),"<Buffer "+e+">"},s.prototype.compare=function(e,t,n,r,o){if(!s.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===n&&(n=e?e.length:0),void 0===r&&(r=0),void 0===o&&(o=this.length),t<0||n>e.length||r<0||o>this.length)throw new RangeError("out of range index");if(r>=o&&t>=n)return 0;if(r>=o)return-1;if(t>=n)return 1;if(this===e)return 0;for(var i=(o>>>=0)-(r>>>=0),a=(n>>>=0)-(t>>>=0),l=Math.min(i,a),u=this.slice(r,o),c=e.slice(t,n),f=0;f<l;++f)if(u[f]!==c[f]){i=u[f],a=c[f];break}return i<a?-1:a<i?1:0},s.prototype.includes=function(e,t,n){return-1!==this.indexOf(e,t,n)},s.prototype.indexOf=function(e,t,n){return m(this,e,t,n,!0)},s.prototype.lastIndexOf=function(e,t,n){return m(this,e,t,n,!1)},s.prototype.write=function(e,t,n,r){if(void 0===t)r="utf8",n=this.length,t=0;else if(void 0===n&&"string"==typeof t)r=t,n=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var o=this.length-t;if((void 0===n||n>o)&&(n=o),e.length>0&&(n<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var i=!1;;)switch(r){case"hex":return b(this,e,t,n);case"utf8":case"utf-8":return _(this,e,t,n);case"ascii":return w(this,e,t,n);case"latin1":case"binary":return O(this,e,t,n);case"base64":return k(this,e,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return S(this,e,t,n);default:if(i)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),i=!0}},s.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var j=4096;function A(e,t,n){var r="";n=Math.min(e.length,n);for(var o=t;o<n;++o)r+=String.fromCharCode(127&e[o]);return r}function P(e,t,n){var r="";n=Math.min(e.length,n);for(var o=t;o<n;++o)r+=String.fromCharCode(e[o]);return r}function T(e,t,n){var r=e.length;(!t||t<0)&&(t=0),(!n||n<0||n>r)&&(n=r);for(var o="",i=t;i<n;++i)o+=B(e[i]);return o}function C(e,t,n){for(var r=e.slice(t,n),o="",i=0;i<r.length;i+=2)o+=String.fromCharCode(r[i]+256*r[i+1]);return o}function N(e,t,n){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>n)throw new RangeError("Trying to access beyond buffer length")}function q(e,t,n,r,o,i){if(!s.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>o||t<i)throw new RangeError('"value" argument is out of bounds');if(n+r>e.length)throw new RangeError("Index out of range")}function L(e,t,n,r){t<0&&(t=65535+t+1);for(var o=0,i=Math.min(e.length-n,2);o<i;++o)e[n+o]=(t&255<<8*(r?o:1-o))>>>8*(r?o:1-o)}function R(e,t,n,r){t<0&&(t=4294967295+t+1);for(var o=0,i=Math.min(e.length-n,4);o<i;++o)e[n+o]=t>>>8*(r?o:3-o)&255}function I(e,t,n,r,o,i){if(n+r>e.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function M(e,t,n,r,i){return i||I(e,0,n,4),o.write(e,t,n,r,23,4),n+4}function D(e,t,n,r,i){return i||I(e,0,n,8),o.write(e,t,n,r,52,8),n+8}s.prototype.slice=function(e,t){var n,r=this.length;if((e=~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),(t=void 0===t?r:~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),t<e&&(t=e),s.TYPED_ARRAY_SUPPORT)(n=this.subarray(e,t)).__proto__=s.prototype;else{var o=t-e;n=new s(o,void 0);for(var i=0;i<o;++i)n[i]=this[i+e]}return n},s.prototype.readUIntLE=function(e,t,n){e|=0,t|=0,n||N(e,t,this.length);for(var r=this[e],o=1,i=0;++i<t&&(o*=256);)r+=this[e+i]*o;return r},s.prototype.readUIntBE=function(e,t,n){e|=0,t|=0,n||N(e,t,this.length);for(var r=this[e+--t],o=1;t>0&&(o*=256);)r+=this[e+--t]*o;return r},s.prototype.readUInt8=function(e,t){return t||N(e,1,this.length),this[e]},s.prototype.readUInt16LE=function(e,t){return t||N(e,2,this.length),this[e]|this[e+1]<<8},s.prototype.readUInt16BE=function(e,t){return t||N(e,2,this.length),this[e]<<8|this[e+1]},s.prototype.readUInt32LE=function(e,t){return t||N(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},s.prototype.readUInt32BE=function(e,t){return t||N(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},s.prototype.readIntLE=function(e,t,n){e|=0,t|=0,n||N(e,t,this.length);for(var r=this[e],o=1,i=0;++i<t&&(o*=256);)r+=this[e+i]*o;return r>=(o*=128)&&(r-=Math.pow(2,8*t)),r},s.prototype.readIntBE=function(e,t,n){e|=0,t|=0,n||N(e,t,this.length);for(var r=t,o=1,i=this[e+--r];r>0&&(o*=256);)i+=this[e+--r]*o;return i>=(o*=128)&&(i-=Math.pow(2,8*t)),i},s.prototype.readInt8=function(e,t){return t||N(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},s.prototype.readInt16LE=function(e,t){t||N(e,2,this.length);var n=this[e]|this[e+1]<<8;return 32768&n?4294901760|n:n},s.prototype.readInt16BE=function(e,t){t||N(e,2,this.length);var n=this[e+1]|this[e]<<8;return 32768&n?4294901760|n:n},s.prototype.readInt32LE=function(e,t){return t||N(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},s.prototype.readInt32BE=function(e,t){return t||N(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},s.prototype.readFloatLE=function(e,t){return t||N(e,4,this.length),o.read(this,e,!0,23,4)},s.prototype.readFloatBE=function(e,t){return t||N(e,4,this.length),o.read(this,e,!1,23,4)},s.prototype.readDoubleLE=function(e,t){return t||N(e,8,this.length),o.read(this,e,!0,52,8)},s.prototype.readDoubleBE=function(e,t){return t||N(e,8,this.length),o.read(this,e,!1,52,8)},s.prototype.writeUIntLE=function(e,t,n,r){(e=+e,t|=0,n|=0,r)||q(this,e,t,n,Math.pow(2,8*n)-1,0);var o=1,i=0;for(this[t]=255&e;++i<n&&(o*=256);)this[t+i]=e/o&255;return t+n},s.prototype.writeUIntBE=function(e,t,n,r){(e=+e,t|=0,n|=0,r)||q(this,e,t,n,Math.pow(2,8*n)-1,0);var o=n-1,i=1;for(this[t+o]=255&e;--o>=0&&(i*=256);)this[t+o]=e/i&255;return t+n},s.prototype.writeUInt8=function(e,t,n){return e=+e,t|=0,n||q(this,e,t,1,255,0),s.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=255&e,t+1},s.prototype.writeUInt16LE=function(e,t,n){return e=+e,t|=0,n||q(this,e,t,2,65535,0),s.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):L(this,e,t,!0),t+2},s.prototype.writeUInt16BE=function(e,t,n){return e=+e,t|=0,n||q(this,e,t,2,65535,0),s.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):L(this,e,t,!1),t+2},s.prototype.writeUInt32LE=function(e,t,n){return e=+e,t|=0,n||q(this,e,t,4,4294967295,0),s.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):R(this,e,t,!0),t+4},s.prototype.writeUInt32BE=function(e,t,n){return e=+e,t|=0,n||q(this,e,t,4,4294967295,0),s.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):R(this,e,t,!1),t+4},s.prototype.writeIntLE=function(e,t,n,r){if(e=+e,t|=0,!r){var o=Math.pow(2,8*n-1);q(this,e,t,n,o-1,-o)}var i=0,a=1,l=0;for(this[t]=255&e;++i<n&&(a*=256);)e<0&&0===l&&0!==this[t+i-1]&&(l=1),this[t+i]=(e/a>>0)-l&255;return t+n},s.prototype.writeIntBE=function(e,t,n,r){if(e=+e,t|=0,!r){var o=Math.pow(2,8*n-1);q(this,e,t,n,o-1,-o)}var i=n-1,a=1,l=0;for(this[t+i]=255&e;--i>=0&&(a*=256);)e<0&&0===l&&0!==this[t+i+1]&&(l=1),this[t+i]=(e/a>>0)-l&255;return t+n},s.prototype.writeInt8=function(e,t,n){return e=+e,t|=0,n||q(this,e,t,1,127,-128),s.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[t]=255&e,t+1},s.prototype.writeInt16LE=function(e,t,n){return e=+e,t|=0,n||q(this,e,t,2,32767,-32768),s.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):L(this,e,t,!0),t+2},s.prototype.writeInt16BE=function(e,t,n){return e=+e,t|=0,n||q(this,e,t,2,32767,-32768),s.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):L(this,e,t,!1),t+2},s.prototype.writeInt32LE=function(e,t,n){return e=+e,t|=0,n||q(this,e,t,4,2147483647,-2147483648),s.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):R(this,e,t,!0),t+4},s.prototype.writeInt32BE=function(e,t,n){return e=+e,t|=0,n||q(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),s.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):R(this,e,t,!1),t+4},s.prototype.writeFloatLE=function(e,t,n){return M(this,e,t,!0,n)},s.prototype.writeFloatBE=function(e,t,n){return M(this,e,t,!1,n)},s.prototype.writeDoubleLE=function(e,t,n){return D(this,e,t,!0,n)},s.prototype.writeDoubleBE=function(e,t,n){return D(this,e,t,!1,n)},s.prototype.copy=function(e,t,n,r){if(n||(n=0),r||0===r||(r=this.length),t>=e.length&&(t=e.length),t||(t=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),e.length-t<r-n&&(r=e.length-t+n);var o,i=r-n;if(this===e&&n<t&&t<r)for(o=i-1;o>=0;--o)e[o+t]=this[o+n];else if(i<1e3||!s.TYPED_ARRAY_SUPPORT)for(o=0;o<i;++o)e[o+t]=this[o+n];else Uint8Array.prototype.set.call(e,this.subarray(n,n+i),t);return i},s.prototype.fill=function(e,t,n,r){if("string"==typeof e){if("string"==typeof t?(r=t,t=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),1===e.length){var o=e.charCodeAt(0);o<256&&(e=o)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!s.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<n)throw new RangeError("Out of range index");if(n<=t)return this;var i;if(t>>>=0,n=void 0===n?this.length:n>>>0,e||(e=0),"number"==typeof e)for(i=t;i<n;++i)this[i]=e;else{var a=s.isBuffer(e)?e:F(new s(e,r).toString()),l=a.length;for(i=0;i<n-t;++i)this[i+t]=a[i%l]}return this};var U=/[^+\/0-9A-Za-z-_]/g;function B(e){return e<16?"0"+e.toString(16):e.toString(16)}function F(e,t){var n;t=t||1/0;for(var r=e.length,o=null,i=[],a=0;a<r;++a){if((n=e.charCodeAt(a))>55295&&n<57344){if(!o){if(n>56319){(t-=3)>-1&&i.push(239,191,189);continue}if(a+1===r){(t-=3)>-1&&i.push(239,191,189);continue}o=n;continue}if(n<56320){(t-=3)>-1&&i.push(239,191,189),o=n;continue}n=65536+(o-55296<<10|n-56320)}else o&&(t-=3)>-1&&i.push(239,191,189);if(o=null,n<128){if((t-=1)<0)break;i.push(n)}else if(n<2048){if((t-=2)<0)break;i.push(n>>6|192,63&n|128)}else if(n<65536){if((t-=3)<0)break;i.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;i.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return i}function $(e){return r.toByteArray(function(e){if((e=function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}(e).replace(U,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function V(e,t,n,r){for(var o=0;o<r&&!(o+n>=t.length||o>=e.length);++o)t[o+n]=e[o];return o}},1924:(e,t,n)=>{"use strict";var r=n(210),o=n(5559),i=o(r("String.prototype.indexOf"));e.exports=function(e,t){var n=r(e,!!t);return"function"==typeof n&&i(e,".prototype.")>-1?o(n):n}},5559:(e,t,n)=>{"use strict";var r=n(8612),o=n(210),i=o("%Function.prototype.apply%"),a=o("%Function.prototype.call%"),l=o("%Reflect.apply%",!0)||r.call(a,i),s=o("%Object.getOwnPropertyDescriptor%",!0),u=o("%Object.defineProperty%",!0),c=o("%Math.max%");if(u)try{u({},"a",{value:1})}catch(e){u=null}e.exports=function(e){var t=l(r,a,arguments);if(s&&u){var n=s(t,"length");n.configurable&&u(t,"length",{value:1+c(0,e.length-(arguments.length-1))})}return t};var f=function(){return l(r,i,arguments)};u?u(e.exports,"apply",{value:f}):e.exports.apply=f},9996:e=>{"use strict";var t=function(e){return function(e){return!!e&&"object"==typeof e}(e)&&!function(e){var t=Object.prototype.toString.call(e);return"[object RegExp]"===t||"[object Date]"===t||function(e){return e.$$typeof===n}(e)}(e)};var n="function"==typeof Symbol&&Symbol.for?Symbol.for("react.element"):60103;function r(e,t){return!1!==t.clone&&t.isMergeableObject(e)?s((n=e,Array.isArray(n)?[]:{}),e,t):e;var n}function o(e,t,n){return e.concat(t).map((function(e){return r(e,n)}))}function i(e){return Object.keys(e).concat(function(e){return Object.getOwnPropertySymbols?Object.getOwnPropertySymbols(e).filter((function(t){return e.propertyIsEnumerable(t)})):[]}(e))}function a(e,t){try{return t in e}catch(e){return!1}}function l(e,t,n){var o={};return n.isMergeableObject(e)&&i(e).forEach((function(t){o[t]=r(e[t],n)})),i(t).forEach((function(i){(function(e,t){return a(e,t)&&!(Object.hasOwnProperty.call(e,t)&&Object.propertyIsEnumerable.call(e,t))})(e,i)||(a(e,i)&&n.isMergeableObject(t[i])?o[i]=function(e,t){if(!t.customMerge)return s;var n=t.customMerge(e);return"function"==typeof n?n:s}(i,n)(e[i],t[i],n):o[i]=r(t[i],n))})),o}function s(e,n,i){(i=i||{}).arrayMerge=i.arrayMerge||o,i.isMergeableObject=i.isMergeableObject||t,i.cloneUnlessOtherwiseSpecified=r;var a=Array.isArray(n);return a===Array.isArray(e)?a?i.arrayMerge(e,n,i):l(e,n,i):r(n,i)}s.all=function(e,t){if(!Array.isArray(e))throw new Error("first argument should be an array");return e.reduce((function(e,n){return s(e,n,t)}),{})};var u=s;e.exports=u},7648:e=>{"use strict";var t="Function.prototype.bind called on incompatible ",n=Array.prototype.slice,r=Object.prototype.toString,o="[object Function]";e.exports=function(e){var i=this;if("function"!=typeof i||r.call(i)!==o)throw new TypeError(t+i);for(var a,l=n.call(arguments,1),s=function(){if(this instanceof a){var t=i.apply(this,l.concat(n.call(arguments)));return Object(t)===t?t:this}return i.apply(e,l.concat(n.call(arguments)))},u=Math.max(0,i.length-l.length),c=[],f=0;f<u;f++)c.push("$"+f);if(a=Function("binder","return function ("+c.join(",")+"){ return binder.apply(this,arguments); }")(s),i.prototype){var p=function(){};p.prototype=i.prototype,a.prototype=new p,p.prototype=null}return a}},8612:(e,t,n)=>{"use strict";var r=n(7648);e.exports=Function.prototype.bind||r},210:(e,t,n)=>{"use strict";var r,o=SyntaxError,i=Function,a=TypeError,l=function(e){try{return i('"use strict"; return ('+e+").constructor;")()}catch(e){}},s=Object.getOwnPropertyDescriptor;if(s)try{s({},"")}catch(e){s=null}var u=function(){throw new a},c=s?function(){try{return u}catch(e){try{return s(arguments,"callee").get}catch(e){return u}}}():u,f=n(1405)(),p=Object.getPrototypeOf||function(e){return e.__proto__},d={},h="undefined"==typeof Uint8Array?r:p(Uint8Array),y={"%AggregateError%":"undefined"==typeof AggregateError?r:AggregateError,"%Array%":Array,"%ArrayBuffer%":"undefined"==typeof ArrayBuffer?r:ArrayBuffer,"%ArrayIteratorPrototype%":f?p([][Symbol.iterator]()):r,"%AsyncFromSyncIteratorPrototype%":r,"%AsyncFunction%":d,"%AsyncGenerator%":d,"%AsyncGeneratorFunction%":d,"%AsyncIteratorPrototype%":d,"%Atomics%":"undefined"==typeof Atomics?r:Atomics,"%BigInt%":"undefined"==typeof BigInt?r:BigInt,"%Boolean%":Boolean,"%DataView%":"undefined"==typeof DataView?r:DataView,"%Date%":Date,"%decodeURI%":decodeURI,"%decodeURIComponent%":decodeURIComponent,"%encodeURI%":encodeURI,"%encodeURIComponent%":encodeURIComponent,"%Error%":Error,"%eval%":eval,"%EvalError%":EvalError,"%Float32Array%":"undefined"==typeof Float32Array?r:Float32Array,"%Float64Array%":"undefined"==typeof Float64Array?r:Float64Array,"%FinalizationRegistry%":"undefined"==typeof FinalizationRegistry?r:FinalizationRegistry,"%Function%":i,"%GeneratorFunction%":d,"%Int8Array%":"undefined"==typeof Int8Array?r:Int8Array,"%Int16Array%":"undefined"==typeof Int16Array?r:Int16Array,"%Int32Array%":"undefined"==typeof Int32Array?r:Int32Array,"%isFinite%":isFinite,"%isNaN%":isNaN,"%IteratorPrototype%":f?p(p([][Symbol.iterator]())):r,"%JSON%":"object"==typeof JSON?JSON:r,"%Map%":"undefined"==typeof Map?r:Map,"%MapIteratorPrototype%":"undefined"!=typeof Map&&f?p((new Map)[Symbol.iterator]()):r,"%Math%":Math,"%Number%":Number,"%Object%":Object,"%parseFloat%":parseFloat,"%parseInt%":parseInt,"%Promise%":"undefined"==typeof Promise?r:Promise,"%Proxy%":"undefined"==typeof Proxy?r:Proxy,"%RangeError%":RangeError,"%ReferenceError%":ReferenceError,"%Reflect%":"undefined"==typeof Reflect?r:Reflect,"%RegExp%":RegExp,"%Set%":"undefined"==typeof Set?r:Set,"%SetIteratorPrototype%":"undefined"!=typeof Set&&f?p((new Set)[Symbol.iterator]()):r,"%SharedArrayBuffer%":"undefined"==typeof SharedArrayBuffer?r:SharedArrayBuffer,"%String%":String,"%StringIteratorPrototype%":f?p(""[Symbol.iterator]()):r,"%Symbol%":f?Symbol:r,"%SyntaxError%":o,"%ThrowTypeError%":c,"%TypedArray%":h,"%TypeError%":a,"%Uint8Array%":"undefined"==typeof Uint8Array?r:Uint8Array,"%Uint8ClampedArray%":"undefined"==typeof Uint8ClampedArray?r:Uint8ClampedArray,"%Uint16Array%":"undefined"==typeof Uint16Array?r:Uint16Array,"%Uint32Array%":"undefined"==typeof Uint32Array?r:Uint32Array,"%URIError%":URIError,"%WeakMap%":"undefined"==typeof WeakMap?r:WeakMap,"%WeakRef%":"undefined"==typeof WeakRef?r:WeakRef,"%WeakSet%":"undefined"==typeof WeakSet?r:WeakSet},v=function e(t){var n;if("%AsyncFunction%"===t)n=l("async function () {}");else if("%GeneratorFunction%"===t)n=l("function* () {}");else if("%AsyncGeneratorFunction%"===t)n=l("async function* () {}");else if("%AsyncGenerator%"===t){var r=e("%AsyncGeneratorFunction%");r&&(n=r.prototype)}else if("%AsyncIteratorPrototype%"===t){var o=e("%AsyncGenerator%");o&&(n=p(o.prototype))}return y[t]=n,n},m={"%ArrayBufferPrototype%":["ArrayBuffer","prototype"],"%ArrayPrototype%":["Array","prototype"],"%ArrayProto_entries%":["Array","prototype","entries"],"%ArrayProto_forEach%":["Array","prototype","forEach"],"%ArrayProto_keys%":["Array","prototype","keys"],"%ArrayProto_values%":["Array","prototype","values"],"%AsyncFunctionPrototype%":["AsyncFunction","prototype"],"%AsyncGenerator%":["AsyncGeneratorFunction","prototype"],"%AsyncGeneratorPrototype%":["AsyncGeneratorFunction","prototype","prototype"],"%BooleanPrototype%":["Boolean","prototype"],"%DataViewPrototype%":["DataView","prototype"],"%DatePrototype%":["Date","prototype"],"%ErrorPrototype%":["Error","prototype"],"%EvalErrorPrototype%":["EvalError","prototype"],"%Float32ArrayPrototype%":["Float32Array","prototype"],"%Float64ArrayPrototype%":["Float64Array","prototype"],"%FunctionPrototype%":["Function","prototype"],"%Generator%":["GeneratorFunction","prototype"],"%GeneratorPrototype%":["GeneratorFunction","prototype","prototype"],"%Int8ArrayPrototype%":["Int8Array","prototype"],"%Int16ArrayPrototype%":["Int16Array","prototype"],"%Int32ArrayPrototype%":["Int32Array","prototype"],"%JSONParse%":["JSON","parse"],"%JSONStringify%":["JSON","stringify"],"%MapPrototype%":["Map","prototype"],"%NumberPrototype%":["Number","prototype"],"%ObjectPrototype%":["Object","prototype"],"%ObjProto_toString%":["Object","prototype","toString"],"%ObjProto_valueOf%":["Object","prototype","valueOf"],"%PromisePrototype%":["Promise","prototype"],"%PromiseProto_then%":["Promise","prototype","then"],"%Promise_all%":["Promise","all"],"%Promise_reject%":["Promise","reject"],"%Promise_resolve%":["Promise","resolve"],"%RangeErrorPrototype%":["RangeError","prototype"],"%ReferenceErrorPrototype%":["ReferenceError","prototype"],"%RegExpPrototype%":["RegExp","prototype"],"%SetPrototype%":["Set","prototype"],"%SharedArrayBufferPrototype%":["SharedArrayBuffer","prototype"],"%StringPrototype%":["String","prototype"],"%SymbolPrototype%":["Symbol","prototype"],"%SyntaxErrorPrototype%":["SyntaxError","prototype"],"%TypedArrayPrototype%":["TypedArray","prototype"],"%TypeErrorPrototype%":["TypeError","prototype"],"%Uint8ArrayPrototype%":["Uint8Array","prototype"],"%Uint8ClampedArrayPrototype%":["Uint8ClampedArray","prototype"],"%Uint16ArrayPrototype%":["Uint16Array","prototype"],"%Uint32ArrayPrototype%":["Uint32Array","prototype"],"%URIErrorPrototype%":["URIError","prototype"],"%WeakMapPrototype%":["WeakMap","prototype"],"%WeakSetPrototype%":["WeakSet","prototype"]},g=n(8612),b=n(7642),_=g.call(Function.call,Array.prototype.concat),w=g.call(Function.apply,Array.prototype.splice),O=g.call(Function.call,String.prototype.replace),k=g.call(Function.call,String.prototype.slice),S=/[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g,x=/\\(\\)?/g,E=function(e){var t=k(e,0,1),n=k(e,-1);if("%"===t&&"%"!==n)throw new o("invalid intrinsic syntax, expected closing `%`");if("%"===n&&"%"!==t)throw new o("invalid intrinsic syntax, expected opening `%`");var r=[];return O(e,S,(function(e,t,n,o){r[r.length]=n?O(o,x,"$1"):t||e})),r},j=function(e,t){var n,r=e;if(b(m,r)&&(r="%"+(n=m[r])[0]+"%"),b(y,r)){var i=y[r];if(i===d&&(i=v(r)),void 0===i&&!t)throw new a("intrinsic "+e+" exists, but is not available. Please file an issue!");return{alias:n,name:r,value:i}}throw new o("intrinsic "+e+" does not exist!")};e.exports=function(e,t){if("string"!=typeof e||0===e.length)throw new a("intrinsic name must be a non-empty string");if(arguments.length>1&&"boolean"!=typeof t)throw new a('"allowMissing" argument must be a boolean');var n=E(e),r=n.length>0?n[0]:"",i=j("%"+r+"%",t),l=i.name,u=i.value,c=!1,f=i.alias;f&&(r=f[0],w(n,_([0,1],f)));for(var p=1,d=!0;p<n.length;p+=1){var h=n[p],v=k(h,0,1),m=k(h,-1);if(('"'===v||"'"===v||"`"===v||'"'===m||"'"===m||"`"===m)&&v!==m)throw new o("property names with quotes must have matching quotes");if("constructor"!==h&&d||(c=!0),b(y,l="%"+(r+="."+h)+"%"))u=y[l];else if(null!=u){if(!(h in u)){if(!t)throw new a("base intrinsic for "+e+" exists, but the property is not available.");return}if(s&&p+1>=n.length){var g=s(u,h);u=(d=!!g)&&"get"in g&&!("originalValue"in g.get)?g.get:u[h]}else d=b(u,h),u=u[h];d&&!c&&(y[l]=u)}}return u}},1405:(e,t,n)=>{"use strict";var r="undefined"!=typeof Symbol&&Symbol,o=n(5419);e.exports=function(){return"function"==typeof r&&("function"==typeof Symbol&&("symbol"==typeof r("foo")&&("symbol"==typeof Symbol("bar")&&o())))}},5419:e=>{"use strict";e.exports=function(){if("function"!=typeof Symbol||"function"!=typeof Object.getOwnPropertySymbols)return!1;if("symbol"==typeof Symbol.iterator)return!0;var e={},t=Symbol("test"),n=Object(t);if("string"==typeof t)return!1;if("[object Symbol]"!==Object.prototype.toString.call(t))return!1;if("[object Symbol]"!==Object.prototype.toString.call(n))return!1;for(t in e[t]=42,e)return!1;if("function"==typeof Object.keys&&0!==Object.keys(e).length)return!1;if("function"==typeof Object.getOwnPropertyNames&&0!==Object.getOwnPropertyNames(e).length)return!1;var r=Object.getOwnPropertySymbols(e);if(1!==r.length||r[0]!==t)return!1;if(!Object.prototype.propertyIsEnumerable.call(e,t))return!1;if("function"==typeof Object.getOwnPropertyDescriptor){var o=Object.getOwnPropertyDescriptor(e,t);if(42!==o.value||!0!==o.enumerable)return!1}return!0}},7642:(e,t,n)=>{"use strict";var r=n(8612);e.exports=r.call(Function.call,Object.prototype.hasOwnProperty)},645:(e,t)=>{t.read=function(e,t,n,r,o){var i,a,l=8*o-r-1,s=(1<<l)-1,u=s>>1,c=-7,f=n?o-1:0,p=n?-1:1,d=e[t+f];for(f+=p,i=d&(1<<-c)-1,d>>=-c,c+=l;c>0;i=256*i+e[t+f],f+=p,c-=8);for(a=i&(1<<-c)-1,i>>=-c,c+=r;c>0;a=256*a+e[t+f],f+=p,c-=8);if(0===i)i=1-u;else{if(i===s)return a?NaN:1/0*(d?-1:1);a+=Math.pow(2,r),i-=u}return(d?-1:1)*a*Math.pow(2,i-r)},t.write=function(e,t,n,r,o,i){var a,l,s,u=8*i-o-1,c=(1<<u)-1,f=c>>1,p=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,d=r?0:i-1,h=r?1:-1,y=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(l=isNaN(t)?1:0,a=c):(a=Math.floor(Math.log(t)/Math.LN2),t*(s=Math.pow(2,-a))<1&&(a--,s*=2),(t+=a+f>=1?p/s:p*Math.pow(2,1-f))*s>=2&&(a++,s/=2),a+f>=c?(l=0,a=c):a+f>=1?(l=(t*s-1)*Math.pow(2,o),a+=f):(l=t*Math.pow(2,f-1)*Math.pow(2,o),a=0));o>=8;e[n+d]=255&l,d+=h,l/=256,o-=8);for(a=a<<o|l,u+=o;u>0;e[n+d]=255&a,d+=h,a/=256,u-=8);e[n+d-h]|=128*y}},5826:e=>{var t={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==t.call(e)}},3465:(e,t,n)=>{e=n.nmd(e);var r="__lodash_hash_undefined__",o=9007199254740991,i="[object Arguments]",a="[object Boolean]",l="[object Date]",s="[object Function]",u="[object GeneratorFunction]",c="[object Map]",f="[object Number]",p="[object Object]",d="[object Promise]",h="[object RegExp]",y="[object Set]",v="[object String]",m="[object Symbol]",g="[object WeakMap]",b="[object ArrayBuffer]",_="[object DataView]",w="[object Float32Array]",O="[object Float64Array]",k="[object Int8Array]",S="[object Int16Array]",x="[object Int32Array]",E="[object Uint8Array]",j="[object Uint8ClampedArray]",A="[object Uint16Array]",P="[object Uint32Array]",T=/\w*$/,C=/^\[object .+?Constructor\]$/,N=/^(?:0|[1-9]\d*)$/,q={};q[i]=q["[object Array]"]=q[b]=q[_]=q[a]=q[l]=q[w]=q[O]=q[k]=q[S]=q[x]=q[c]=q[f]=q[p]=q[h]=q[y]=q[v]=q[m]=q[E]=q[j]=q[A]=q[P]=!0,q["[object Error]"]=q[s]=q[g]=!1;var L="object"==typeof n.g&&n.g&&n.g.Object===Object&&n.g,R="object"==typeof self&&self&&self.Object===Object&&self,I=L||R||Function("return this")(),M=t&&!t.nodeType&&t,D=M&&e&&!e.nodeType&&e,U=D&&D.exports===M;function B(e,t){return e.set(t[0],t[1]),e}function F(e,t){return e.add(t),e}function $(e,t,n,r){var o=-1,i=e?e.length:0;for(r&&i&&(n=e[++o]);++o<i;)n=t(n,e[o],o,e);return n}function V(e){var t=!1;if(null!=e&&"function"!=typeof e.toString)try{t=!!(e+"")}catch(e){}return t}function H(e){var t=-1,n=Array(e.size);return e.forEach((function(e,r){n[++t]=[r,e]})),n}function z(e,t){return function(n){return e(t(n))}}function W(e){var t=-1,n=Array(e.size);return e.forEach((function(e){n[++t]=e})),n}var K,Z=Array.prototype,Y=Function.prototype,G=Object.prototype,J=I["__core-js_shared__"],X=(K=/[^.]+$/.exec(J&&J.keys&&J.keys.IE_PROTO||""))?"Symbol(src)_1."+K:"",Q=Y.toString,ee=G.hasOwnProperty,te=G.toString,ne=RegExp("^"+Q.call(ee).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),re=U?I.Buffer:void 0,oe=I.Symbol,ie=I.Uint8Array,ae=z(Object.getPrototypeOf,Object),le=Object.create,se=G.propertyIsEnumerable,ue=Z.splice,ce=Object.getOwnPropertySymbols,fe=re?re.isBuffer:void 0,pe=z(Object.keys,Object),de=De(I,"DataView"),he=De(I,"Map"),ye=De(I,"Promise"),ve=De(I,"Set"),me=De(I,"WeakMap"),ge=De(Object,"create"),be=Ve(de),_e=Ve(he),we=Ve(ye),Oe=Ve(ve),ke=Ve(me),Se=oe?oe.prototype:void 0,xe=Se?Se.valueOf:void 0;function Ee(e){var t=-1,n=e?e.length:0;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function je(e){var t=-1,n=e?e.length:0;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function Ae(e){var t=-1,n=e?e.length:0;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function Pe(e){this.__data__=new je(e)}function Te(e,t){var n=ze(e)||function(e){return function(e){return function(e){return!!e&&"object"==typeof e}(e)&&We(e)}(e)&&ee.call(e,"callee")&&(!se.call(e,"callee")||te.call(e)==i)}(e)?function(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}(e.length,String):[],r=n.length,o=!!r;for(var a in e)!t&&!ee.call(e,a)||o&&("length"==a||Fe(a,r))||n.push(a);return n}function Ce(e,t,n){var r=e[t];ee.call(e,t)&&He(r,n)&&(void 0!==n||t in e)||(e[t]=n)}function Ne(e,t){for(var n=e.length;n--;)if(He(e[n][0],t))return n;return-1}function qe(e,t,n,r,o,d,g){var C;if(r&&(C=d?r(e,o,d,g):r(e)),void 0!==C)return C;if(!Ye(e))return e;var N=ze(e);if(N){if(C=function(e){var t=e.length,n=e.constructor(t);t&&"string"==typeof e[0]&&ee.call(e,"index")&&(n.index=e.index,n.input=e.input);return n}(e),!t)return function(e,t){var n=-1,r=e.length;t||(t=Array(r));for(;++n<r;)t[n]=e[n];return t}(e,C)}else{var L=Be(e),R=L==s||L==u;if(Ke(e))return function(e,t){if(t)return e.slice();var n=new e.constructor(e.length);return e.copy(n),n}(e,t);if(L==p||L==i||R&&!d){if(V(e))return d?e:{};if(C=function(e){return"function"!=typeof e.constructor||$e(e)?{}:(t=ae(e),Ye(t)?le(t):{});var t}(R?{}:e),!t)return function(e,t){return Ie(e,Ue(e),t)}(e,function(e,t){return e&&Ie(t,Ge(t),e)}(C,e))}else{if(!q[L])return d?e:{};C=function(e,t,n,r){var o=e.constructor;switch(t){case b:return Re(e);case a:case l:return new o(+e);case _:return function(e,t){var n=t?Re(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.byteLength)}(e,r);case w:case O:case k:case S:case x:case E:case j:case A:case P:return function(e,t){var n=t?Re(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.length)}(e,r);case c:return function(e,t,n){return $(t?n(H(e),!0):H(e),B,new e.constructor)}(e,r,n);case f:case v:return new o(e);case h:return function(e){var t=new e.constructor(e.source,T.exec(e));return t.lastIndex=e.lastIndex,t}(e);case y:return function(e,t,n){return $(t?n(W(e),!0):W(e),F,new e.constructor)}(e,r,n);case m:return i=e,xe?Object(xe.call(i)):{}}var i}(e,L,qe,t)}}g||(g=new Pe);var I=g.get(e);if(I)return I;if(g.set(e,C),!N)var M=n?function(e){return function(e,t,n){var r=t(e);return ze(e)?r:function(e,t){for(var n=-1,r=t.length,o=e.length;++n<r;)e[o+n]=t[n];return e}(r,n(e))}(e,Ge,Ue)}(e):Ge(e);return function(e,t){for(var n=-1,r=e?e.length:0;++n<r&&!1!==t(e[n],n,e););}(M||e,(function(o,i){M&&(o=e[i=o]),Ce(C,i,qe(o,t,n,r,i,e,g))})),C}function Le(e){return!(!Ye(e)||(t=e,X&&X in t))&&(Ze(e)||V(e)?ne:C).test(Ve(e));var t}function Re(e){var t=new e.constructor(e.byteLength);return new ie(t).set(new ie(e)),t}function Ie(e,t,n,r){n||(n={});for(var o=-1,i=t.length;++o<i;){var a=t[o],l=r?r(n[a],e[a],a,n,e):void 0;Ce(n,a,void 0===l?e[a]:l)}return n}function Me(e,t){var n,r,o=e.__data__;return("string"==(r=typeof(n=t))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==n:null===n)?o["string"==typeof t?"string":"hash"]:o.map}function De(e,t){var n=function(e,t){return null==e?void 0:e[t]}(e,t);return Le(n)?n:void 0}Ee.prototype.clear=function(){this.__data__=ge?ge(null):{}},Ee.prototype.delete=function(e){return this.has(e)&&delete this.__data__[e]},Ee.prototype.get=function(e){var t=this.__data__;if(ge){var n=t[e];return n===r?void 0:n}return ee.call(t,e)?t[e]:void 0},Ee.prototype.has=function(e){var t=this.__data__;return ge?void 0!==t[e]:ee.call(t,e)},Ee.prototype.set=function(e,t){return this.__data__[e]=ge&&void 0===t?r:t,this},je.prototype.clear=function(){this.__data__=[]},je.prototype.delete=function(e){var t=this.__data__,n=Ne(t,e);return!(n<0)&&(n==t.length-1?t.pop():ue.call(t,n,1),!0)},je.prototype.get=function(e){var t=this.__data__,n=Ne(t,e);return n<0?void 0:t[n][1]},je.prototype.has=function(e){return Ne(this.__data__,e)>-1},je.prototype.set=function(e,t){var n=this.__data__,r=Ne(n,e);return r<0?n.push([e,t]):n[r][1]=t,this},Ae.prototype.clear=function(){this.__data__={hash:new Ee,map:new(he||je),string:new Ee}},Ae.prototype.delete=function(e){return Me(this,e).delete(e)},Ae.prototype.get=function(e){return Me(this,e).get(e)},Ae.prototype.has=function(e){return Me(this,e).has(e)},Ae.prototype.set=function(e,t){return Me(this,e).set(e,t),this},Pe.prototype.clear=function(){this.__data__=new je},Pe.prototype.delete=function(e){return this.__data__.delete(e)},Pe.prototype.get=function(e){return this.__data__.get(e)},Pe.prototype.has=function(e){return this.__data__.has(e)},Pe.prototype.set=function(e,t){var n=this.__data__;if(n instanceof je){var r=n.__data__;if(!he||r.length<199)return r.push([e,t]),this;n=this.__data__=new Ae(r)}return n.set(e,t),this};var Ue=ce?z(ce,Object):function(){return[]},Be=function(e){return te.call(e)};function Fe(e,t){return!!(t=null==t?o:t)&&("number"==typeof e||N.test(e))&&e>-1&&e%1==0&&e<t}function $e(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||G)}function Ve(e){if(null!=e){try{return Q.call(e)}catch(e){}try{return e+""}catch(e){}}return""}function He(e,t){return e===t||e!=e&&t!=t}(de&&Be(new de(new ArrayBuffer(1)))!=_||he&&Be(new he)!=c||ye&&Be(ye.resolve())!=d||ve&&Be(new ve)!=y||me&&Be(new me)!=g)&&(Be=function(e){var t=te.call(e),n=t==p?e.constructor:void 0,r=n?Ve(n):void 0;if(r)switch(r){case be:return _;case _e:return c;case we:return d;case Oe:return y;case ke:return g}return t});var ze=Array.isArray;function We(e){return null!=e&&function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=o}(e.length)&&!Ze(e)}var Ke=fe||function(){return!1};function Ze(e){var t=Ye(e)?te.call(e):"";return t==s||t==u}function Ye(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}function Ge(e){return We(e)?Te(e):function(e){if(!$e(e))return pe(e);var t=[];for(var n in Object(e))ee.call(e,n)&&"constructor"!=n&&t.push(n);return t}(e)}e.exports=function(e){return qe(e,!0,!0)}},2307:(e,t,n)=>{e=n.nmd(e);var r="__lodash_hash_undefined__",o=9007199254740991,i="[object Arguments]",a="[object Array]",l="[object Boolean]",s="[object Date]",u="[object Error]",c="[object Function]",f="[object Map]",p="[object Number]",d="[object Object]",h="[object Promise]",y="[object RegExp]",v="[object Set]",m="[object String]",g="[object Symbol]",b="[object WeakMap]",_="[object ArrayBuffer]",w="[object DataView]",O=/^\[object .+?Constructor\]$/,k=/^(?:0|[1-9]\d*)$/,S={};S["[object Float32Array]"]=S["[object Float64Array]"]=S["[object Int8Array]"]=S["[object Int16Array]"]=S["[object Int32Array]"]=S["[object Uint8Array]"]=S["[object Uint8ClampedArray]"]=S["[object Uint16Array]"]=S["[object Uint32Array]"]=!0,S[i]=S[a]=S[_]=S[l]=S[w]=S[s]=S[u]=S[c]=S[f]=S[p]=S[d]=S[y]=S[v]=S[m]=S[b]=!1;var x="object"==typeof n.g&&n.g&&n.g.Object===Object&&n.g,E="object"==typeof self&&self&&self.Object===Object&&self,j=x||E||Function("return this")(),A=t&&!t.nodeType&&t,P=A&&e&&!e.nodeType&&e,T=P&&P.exports===A,C=T&&x.process,N=function(){try{return C&&C.binding&&C.binding("util")}catch(e){}}(),q=N&&N.isTypedArray;function L(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(t(e[n],n,e))return!0;return!1}function R(e){var t=-1,n=Array(e.size);return e.forEach((function(e,r){n[++t]=[r,e]})),n}function I(e){var t=-1,n=Array(e.size);return e.forEach((function(e){n[++t]=e})),n}var M,D,U,B=Array.prototype,F=Function.prototype,$=Object.prototype,V=j["__core-js_shared__"],H=F.toString,z=$.hasOwnProperty,W=(M=/[^.]+$/.exec(V&&V.keys&&V.keys.IE_PROTO||""))?"Symbol(src)_1."+M:"",K=$.toString,Z=RegExp("^"+H.call(z).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Y=T?j.Buffer:void 0,G=j.Symbol,J=j.Uint8Array,X=$.propertyIsEnumerable,Q=B.splice,ee=G?G.toStringTag:void 0,te=Object.getOwnPropertySymbols,ne=Y?Y.isBuffer:void 0,re=(D=Object.keys,U=Object,function(e){return D(U(e))}),oe=Ne(j,"DataView"),ie=Ne(j,"Map"),ae=Ne(j,"Promise"),le=Ne(j,"Set"),se=Ne(j,"WeakMap"),ue=Ne(Object,"create"),ce=Ie(oe),fe=Ie(ie),pe=Ie(ae),de=Ie(le),he=Ie(se),ye=G?G.prototype:void 0,ve=ye?ye.valueOf:void 0;function me(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function ge(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function be(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function _e(e){var t=-1,n=null==e?0:e.length;for(this.__data__=new be;++t<n;)this.add(e[t])}function we(e){var t=this.__data__=new ge(e);this.size=t.size}function Oe(e,t){var n=Ue(e),r=!n&&De(e),o=!n&&!r&&Be(e),i=!n&&!r&&!o&&ze(e),a=n||r||o||i,l=a?function(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}(e.length,String):[],s=l.length;for(var u in e)!t&&!z.call(e,u)||a&&("length"==u||o&&("offset"==u||"parent"==u)||i&&("buffer"==u||"byteLength"==u||"byteOffset"==u)||Re(u,s))||l.push(u);return l}function ke(e,t){for(var n=e.length;n--;)if(Me(e[n][0],t))return n;return-1}function Se(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":ee&&ee in Object(e)?function(e){var t=z.call(e,ee),n=e[ee];try{e[ee]=void 0;var r=!0}catch(e){}var o=K.call(e);r&&(t?e[ee]=n:delete e[ee]);return o}(e):function(e){return K.call(e)}(e)}function xe(e){return He(e)&&Se(e)==i}function Ee(e,t,n,r,o){return e===t||(null==e||null==t||!He(e)&&!He(t)?e!=e&&t!=t:function(e,t,n,r,o,c){var h=Ue(e),b=Ue(t),O=h?a:Le(e),k=b?a:Le(t),S=(O=O==i?d:O)==d,x=(k=k==i?d:k)==d,E=O==k;if(E&&Be(e)){if(!Be(t))return!1;h=!0,S=!1}if(E&&!S)return c||(c=new we),h||ze(e)?Pe(e,t,n,r,o,c):function(e,t,n,r,o,i,a){switch(n){case w:if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case _:return!(e.byteLength!=t.byteLength||!i(new J(e),new J(t)));case l:case s:case p:return Me(+e,+t);case u:return e.name==t.name&&e.message==t.message;case y:case m:return e==t+"";case f:var c=R;case v:var d=1&r;if(c||(c=I),e.size!=t.size&&!d)return!1;var h=a.get(e);if(h)return h==t;r|=2,a.set(e,t);var b=Pe(c(e),c(t),r,o,i,a);return a.delete(e),b;case g:if(ve)return ve.call(e)==ve.call(t)}return!1}(e,t,O,n,r,o,c);if(!(1&n)){var j=S&&z.call(e,"__wrapped__"),A=x&&z.call(t,"__wrapped__");if(j||A){var P=j?e.value():e,T=A?t.value():t;return c||(c=new we),o(P,T,n,r,c)}}if(!E)return!1;return c||(c=new we),function(e,t,n,r,o,i){var a=1&n,l=Te(e),s=l.length,u=Te(t).length;if(s!=u&&!a)return!1;var c=s;for(;c--;){var f=l[c];if(!(a?f in t:z.call(t,f)))return!1}var p=i.get(e);if(p&&i.get(t))return p==t;var d=!0;i.set(e,t),i.set(t,e);var h=a;for(;++c<s;){var y=e[f=l[c]],v=t[f];if(r)var m=a?r(v,y,f,t,e,i):r(y,v,f,e,t,i);if(!(void 0===m?y===v||o(y,v,n,r,i):m)){d=!1;break}h||(h="constructor"==f)}if(d&&!h){var g=e.constructor,b=t.constructor;g==b||!("constructor"in e)||!("constructor"in t)||"function"==typeof g&&g instanceof g&&"function"==typeof b&&b instanceof b||(d=!1)}return i.delete(e),i.delete(t),d}(e,t,n,r,o,c)}(e,t,n,r,Ee,o))}function je(e){return!(!Ve(e)||function(e){return!!W&&W in e}(e))&&(Fe(e)?Z:O).test(Ie(e))}function Ae(e){if(n=(t=e)&&t.constructor,r="function"==typeof n&&n.prototype||$,t!==r)return re(e);var t,n,r,o=[];for(var i in Object(e))z.call(e,i)&&"constructor"!=i&&o.push(i);return o}function Pe(e,t,n,r,o,i){var a=1&n,l=e.length,s=t.length;if(l!=s&&!(a&&s>l))return!1;var u=i.get(e);if(u&&i.get(t))return u==t;var c=-1,f=!0,p=2&n?new _e:void 0;for(i.set(e,t),i.set(t,e);++c<l;){var d=e[c],h=t[c];if(r)var y=a?r(h,d,c,t,e,i):r(d,h,c,e,t,i);if(void 0!==y){if(y)continue;f=!1;break}if(p){if(!L(t,(function(e,t){if(a=t,!p.has(a)&&(d===e||o(d,e,n,r,i)))return p.push(t);var a}))){f=!1;break}}else if(d!==h&&!o(d,h,n,r,i)){f=!1;break}}return i.delete(e),i.delete(t),f}function Te(e){return function(e,t,n){var r=t(e);return Ue(e)?r:function(e,t){for(var n=-1,r=t.length,o=e.length;++n<r;)e[o+n]=t[n];return e}(r,n(e))}(e,We,qe)}function Ce(e,t){var n,r,o=e.__data__;return("string"==(r=typeof(n=t))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==n:null===n)?o["string"==typeof t?"string":"hash"]:o.map}function Ne(e,t){var n=function(e,t){return null==e?void 0:e[t]}(e,t);return je(n)?n:void 0}me.prototype.clear=function(){this.__data__=ue?ue(null):{},this.size=0},me.prototype.delete=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t},me.prototype.get=function(e){var t=this.__data__;if(ue){var n=t[e];return n===r?void 0:n}return z.call(t,e)?t[e]:void 0},me.prototype.has=function(e){var t=this.__data__;return ue?void 0!==t[e]:z.call(t,e)},me.prototype.set=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=ue&&void 0===t?r:t,this},ge.prototype.clear=function(){this.__data__=[],this.size=0},ge.prototype.delete=function(e){var t=this.__data__,n=ke(t,e);return!(n<0)&&(n==t.length-1?t.pop():Q.call(t,n,1),--this.size,!0)},ge.prototype.get=function(e){var t=this.__data__,n=ke(t,e);return n<0?void 0:t[n][1]},ge.prototype.has=function(e){return ke(this.__data__,e)>-1},ge.prototype.set=function(e,t){var n=this.__data__,r=ke(n,e);return r<0?(++this.size,n.push([e,t])):n[r][1]=t,this},be.prototype.clear=function(){this.size=0,this.__data__={hash:new me,map:new(ie||ge),string:new me}},be.prototype.delete=function(e){var t=Ce(this,e).delete(e);return this.size-=t?1:0,t},be.prototype.get=function(e){return Ce(this,e).get(e)},be.prototype.has=function(e){return Ce(this,e).has(e)},be.prototype.set=function(e,t){var n=Ce(this,e),r=n.size;return n.set(e,t),this.size+=n.size==r?0:1,this},_e.prototype.add=_e.prototype.push=function(e){return this.__data__.set(e,r),this},_e.prototype.has=function(e){return this.__data__.has(e)},we.prototype.clear=function(){this.__data__=new ge,this.size=0},we.prototype.delete=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n},we.prototype.get=function(e){return this.__data__.get(e)},we.prototype.has=function(e){return this.__data__.has(e)},we.prototype.set=function(e,t){var n=this.__data__;if(n instanceof ge){var r=n.__data__;if(!ie||r.length<199)return r.push([e,t]),this.size=++n.size,this;n=this.__data__=new be(r)}return n.set(e,t),this.size=n.size,this};var qe=te?function(e){return null==e?[]:(e=Object(e),function(e,t){for(var n=-1,r=null==e?0:e.length,o=0,i=[];++n<r;){var a=e[n];t(a,n,e)&&(i[o++]=a)}return i}(te(e),(function(t){return X.call(e,t)})))}:function(){return[]},Le=Se;function Re(e,t){return!!(t=null==t?o:t)&&("number"==typeof e||k.test(e))&&e>-1&&e%1==0&&e<t}function Ie(e){if(null!=e){try{return H.call(e)}catch(e){}try{return e+""}catch(e){}}return""}function Me(e,t){return e===t||e!=e&&t!=t}(oe&&Le(new oe(new ArrayBuffer(1)))!=w||ie&&Le(new ie)!=f||ae&&Le(ae.resolve())!=h||le&&Le(new le)!=v||se&&Le(new se)!=b)&&(Le=function(e){var t=Se(e),n=t==d?e.constructor:void 0,r=n?Ie(n):"";if(r)switch(r){case ce:return w;case fe:return f;case pe:return h;case de:return v;case he:return b}return t});var De=xe(function(){return arguments}())?xe:function(e){return He(e)&&z.call(e,"callee")&&!X.call(e,"callee")},Ue=Array.isArray;var Be=ne||function(){return!1};function Fe(e){if(!Ve(e))return!1;var t=Se(e);return t==c||"[object GeneratorFunction]"==t||"[object AsyncFunction]"==t||"[object Proxy]"==t}function $e(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=o}function Ve(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}function He(e){return null!=e&&"object"==typeof e}var ze=q?function(e){return function(t){return e(t)}}(q):function(e){return He(e)&&$e(e.length)&&!!S[Se(e)]};function We(e){return null!=(t=e)&&$e(t.length)&&!Fe(t)?Oe(e):Ae(e);var t}e.exports=function(e,t){return Ee(e,t)}},5423:()=>{},631:(e,t,n)=>{var r="function"==typeof Map&&Map.prototype,o=Object.getOwnPropertyDescriptor&&r?Object.getOwnPropertyDescriptor(Map.prototype,"size"):null,i=r&&o&&"function"==typeof o.get?o.get:null,a=r&&Map.prototype.forEach,l="function"==typeof Set&&Set.prototype,s=Object.getOwnPropertyDescriptor&&l?Object.getOwnPropertyDescriptor(Set.prototype,"size"):null,u=l&&s&&"function"==typeof s.get?s.get:null,c=l&&Set.prototype.forEach,f="function"==typeof WeakMap&&WeakMap.prototype?WeakMap.prototype.has:null,p="function"==typeof WeakSet&&WeakSet.prototype?WeakSet.prototype.has:null,d="function"==typeof WeakRef&&WeakRef.prototype?WeakRef.prototype.deref:null,h=Boolean.prototype.valueOf,y=Object.prototype.toString,v=Function.prototype.toString,m=String.prototype.match,g=String.prototype.slice,b=String.prototype.replace,_=String.prototype.toUpperCase,w=String.prototype.toLowerCase,O=RegExp.prototype.test,k=Array.prototype.concat,S=Array.prototype.join,x=Array.prototype.slice,E=Math.floor,j="function"==typeof BigInt?BigInt.prototype.valueOf:null,A=Object.getOwnPropertySymbols,P="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?Symbol.prototype.toString:null,T="function"==typeof Symbol&&"object"==typeof Symbol.iterator,C="function"==typeof Symbol&&Symbol.toStringTag&&(typeof Symbol.toStringTag===T||"symbol")?Symbol.toStringTag:null,N=Object.prototype.propertyIsEnumerable,q=("function"==typeof Reflect?Reflect.getPrototypeOf:Object.getPrototypeOf)||([].__proto__===Array.prototype?function(e){return e.__proto__}:null);function L(e,t){if(e===1/0||e===-1/0||e!=e||e&&e>-1e3&&e<1e3||O.call(/e/,t))return t;var n=/[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;if("number"==typeof e){var r=e<0?-E(-e):E(e);if(r!==e){var o=String(r),i=g.call(t,o.length+1);return b.call(o,n,"$&_")+"."+b.call(b.call(i,/([0-9]{3})/g,"$&_"),/_$/,"")}}return b.call(t,n,"$&_")}var R=n(4654).custom,I=R&&B(R)?R:null;function M(e,t,n){var r="double"===(n.quoteStyle||t)?'"':"'";return r+e+r}function D(e){return b.call(String(e),/"/g,"&quot;")}function U(e){return!("[object Array]"!==V(e)||C&&"object"==typeof e&&C in e)}function B(e){if(T)return e&&"object"==typeof e&&e instanceof Symbol;if("symbol"==typeof e)return!0;if(!e||"object"!=typeof e||!P)return!1;try{return P.call(e),!0}catch(e){}return!1}e.exports=function e(t,n,r,o){var l=n||{};if($(l,"quoteStyle")&&"single"!==l.quoteStyle&&"double"!==l.quoteStyle)throw new TypeError('option "quoteStyle" must be "single" or "double"');if($(l,"maxStringLength")&&("number"==typeof l.maxStringLength?l.maxStringLength<0&&l.maxStringLength!==1/0:null!==l.maxStringLength))throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');var s=!$(l,"customInspect")||l.customInspect;if("boolean"!=typeof s&&"symbol"!==s)throw new TypeError("option \"customInspect\", if provided, must be `true`, `false`, or `'symbol'`");if($(l,"indent")&&null!==l.indent&&"\t"!==l.indent&&!(parseInt(l.indent,10)===l.indent&&l.indent>0))throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');if($(l,"numericSeparator")&&"boolean"!=typeof l.numericSeparator)throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');var y=l.numericSeparator;if(void 0===t)return"undefined";if(null===t)return"null";if("boolean"==typeof t)return t?"true":"false";if("string"==typeof t)return z(t,l);if("number"==typeof t){if(0===t)return 1/0/t>0?"0":"-0";var _=String(t);return y?L(t,_):_}if("bigint"==typeof t){var O=String(t)+"n";return y?L(t,O):O}var E=void 0===l.depth?5:l.depth;if(void 0===r&&(r=0),r>=E&&E>0&&"object"==typeof t)return U(t)?"[Array]":"[Object]";var A=function(e,t){var n;if("\t"===e.indent)n="\t";else{if(!("number"==typeof e.indent&&e.indent>0))return null;n=S.call(Array(e.indent+1)," ")}return{base:n,prev:S.call(Array(t+1),n)}}(l,r);if(void 0===o)o=[];else if(H(o,t)>=0)return"[Circular]";function R(t,n,i){if(n&&(o=x.call(o)).push(n),i){var a={depth:l.depth};return $(l,"quoteStyle")&&(a.quoteStyle=l.quoteStyle),e(t,a,r+1,o)}return e(t,l,r+1,o)}if("function"==typeof t){var F=function(e){if(e.name)return e.name;var t=m.call(v.call(e),/^function\s*([\w$]+)/);if(t)return t[1];return null}(t),W=J(t,R);return"[Function"+(F?": "+F:" (anonymous)")+"]"+(W.length>0?" { "+S.call(W,", ")+" }":"")}if(B(t)){var X=T?b.call(String(t),/^(Symbol\(.*\))_[^)]*$/,"$1"):P.call(t);return"object"!=typeof t||T?X:K(X)}if(function(e){if(!e||"object"!=typeof e)return!1;if("undefined"!=typeof HTMLElement&&e instanceof HTMLElement)return!0;return"string"==typeof e.nodeName&&"function"==typeof e.getAttribute}(t)){for(var Q="<"+w.call(String(t.nodeName)),ee=t.attributes||[],te=0;te<ee.length;te++)Q+=" "+ee[te].name+"="+M(D(ee[te].value),"double",l);return Q+=">",t.childNodes&&t.childNodes.length&&(Q+="..."),Q+="</"+w.call(String(t.nodeName))+">"}if(U(t)){if(0===t.length)return"[]";var ne=J(t,R);return A&&!function(e){for(var t=0;t<e.length;t++)if(H(e[t],"\n")>=0)return!1;return!0}(ne)?"["+G(ne,A)+"]":"[ "+S.call(ne,", ")+" ]"}if(function(e){return!("[object Error]"!==V(e)||C&&"object"==typeof e&&C in e)}(t)){var re=J(t,R);return"cause"in t&&!N.call(t,"cause")?"{ ["+String(t)+"] "+S.call(k.call("[cause]: "+R(t.cause),re),", ")+" }":0===re.length?"["+String(t)+"]":"{ ["+String(t)+"] "+S.call(re,", ")+" }"}if("object"==typeof t&&s){if(I&&"function"==typeof t[I])return t[I]();if("symbol"!==s&&"function"==typeof t.inspect)return t.inspect()}if(function(e){if(!i||!e||"object"!=typeof e)return!1;try{i.call(e);try{u.call(e)}catch(e){return!0}return e instanceof Map}catch(e){}return!1}(t)){var oe=[];return a.call(t,(function(e,n){oe.push(R(n,t,!0)+" => "+R(e,t))})),Y("Map",i.call(t),oe,A)}if(function(e){if(!u||!e||"object"!=typeof e)return!1;try{u.call(e);try{i.call(e)}catch(e){return!0}return e instanceof Set}catch(e){}return!1}(t)){var ie=[];return c.call(t,(function(e){ie.push(R(e,t))})),Y("Set",u.call(t),ie,A)}if(function(e){if(!f||!e||"object"!=typeof e)return!1;try{f.call(e,f);try{p.call(e,p)}catch(e){return!0}return e instanceof WeakMap}catch(e){}return!1}(t))return Z("WeakMap");if(function(e){if(!p||!e||"object"!=typeof e)return!1;try{p.call(e,p);try{f.call(e,f)}catch(e){return!0}return e instanceof WeakSet}catch(e){}return!1}(t))return Z("WeakSet");if(function(e){if(!d||!e||"object"!=typeof e)return!1;try{return d.call(e),!0}catch(e){}return!1}(t))return Z("WeakRef");if(function(e){return!("[object Number]"!==V(e)||C&&"object"==typeof e&&C in e)}(t))return K(R(Number(t)));if(function(e){if(!e||"object"!=typeof e||!j)return!1;try{return j.call(e),!0}catch(e){}return!1}(t))return K(R(j.call(t)));if(function(e){return!("[object Boolean]"!==V(e)||C&&"object"==typeof e&&C in e)}(t))return K(h.call(t));if(function(e){return!("[object String]"!==V(e)||C&&"object"==typeof e&&C in e)}(t))return K(R(String(t)));if(!function(e){return!("[object Date]"!==V(e)||C&&"object"==typeof e&&C in e)}(t)&&!function(e){return!("[object RegExp]"!==V(e)||C&&"object"==typeof e&&C in e)}(t)){var ae=J(t,R),le=q?q(t)===Object.prototype:t instanceof Object||t.constructor===Object,se=t instanceof Object?"":"null prototype",ue=!le&&C&&Object(t)===t&&C in t?g.call(V(t),8,-1):se?"Object":"",ce=(le||"function"!=typeof t.constructor?"":t.constructor.name?t.constructor.name+" ":"")+(ue||se?"["+S.call(k.call([],ue||[],se||[]),": ")+"] ":"");return 0===ae.length?ce+"{}":A?ce+"{"+G(ae,A)+"}":ce+"{ "+S.call(ae,", ")+" }"}return String(t)};var F=Object.prototype.hasOwnProperty||function(e){return e in this};function $(e,t){return F.call(e,t)}function V(e){return y.call(e)}function H(e,t){if(e.indexOf)return e.indexOf(t);for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1}function z(e,t){if(e.length>t.maxStringLength){var n=e.length-t.maxStringLength,r="... "+n+" more character"+(n>1?"s":"");return z(g.call(e,0,t.maxStringLength),t)+r}return M(b.call(b.call(e,/(['\\])/g,"\\$1"),/[\x00-\x1f]/g,W),"single",t)}function W(e){var t=e.charCodeAt(0),n={8:"b",9:"t",10:"n",12:"f",13:"r"}[t];return n?"\\"+n:"\\x"+(t<16?"0":"")+_.call(t.toString(16))}function K(e){return"Object("+e+")"}function Z(e){return e+" { ? }"}function Y(e,t,n,r){return e+" ("+t+") {"+(r?G(n,r):S.call(n,", "))+"}"}function G(e,t){if(0===e.length)return"";var n="\n"+t.prev+t.base;return n+S.call(e,","+n)+"\n"+t.prev}function J(e,t){var n=U(e),r=[];if(n){r.length=e.length;for(var o=0;o<e.length;o++)r[o]=$(e,o)?t(e[o],e):""}var i,a="function"==typeof A?A(e):[];if(T){i={};for(var l=0;l<a.length;l++)i["$"+a[l]]=a[l]}for(var s in e)$(e,s)&&(n&&String(Number(s))===s&&s<e.length||T&&i["$"+s]instanceof Symbol||(O.call(/[^\w$]/,s)?r.push(t(s,e)+": "+t(e[s],e)):r.push(s+": "+t(e[s],e))));if("function"==typeof A)for(var u=0;u<a.length;u++)N.call(e,a[u])&&r.push("["+t(a[u])+"]: "+t(e[a[u]],e));return r}},4155:e=>{var t,n,r=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function a(e){if(t===setTimeout)return setTimeout(e,0);if((t===o||!t)&&setTimeout)return t=setTimeout,setTimeout(e,0);try{return t(e,0)}catch(n){try{return t.call(null,e,0)}catch(n){return t.call(this,e,0)}}}!function(){try{t="function"==typeof setTimeout?setTimeout:o}catch(e){t=o}try{n="function"==typeof clearTimeout?clearTimeout:i}catch(e){n=i}}();var l,s=[],u=!1,c=-1;function f(){u&&l&&(u=!1,l.length?s=l.concat(s):c=-1,s.length&&p())}function p(){if(!u){var e=a(f);u=!0;for(var t=s.length;t;){for(l=s,s=[];++c<t;)l&&l[c].run();c=-1,t=s.length}l=null,u=!1,function(e){if(n===clearTimeout)return clearTimeout(e);if((n===i||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(e);try{n(e)}catch(t){try{return n.call(null,e)}catch(t){return n.call(this,e)}}}(e)}}function d(e,t){this.fun=e,this.array=t}function h(){}r.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];s.push(new d(e,t)),1!==s.length||u||a(p)},d.prototype.run=function(){this.fun.apply(null,this.array)},r.title="browser",r.browser=!0,r.env={},r.argv=[],r.version="",r.versions={},r.on=h,r.addListener=h,r.once=h,r.off=h,r.removeListener=h,r.removeAllListeners=h,r.emit=h,r.prependListener=h,r.prependOnceListener=h,r.listeners=function(e){return[]},r.binding=function(e){throw new Error("process.binding is not supported")},r.cwd=function(){return"/"},r.chdir=function(e){throw new Error("process.chdir is not supported")},r.umask=function(){return 0}},6095:function(e,t,n){var r,o=n(8764).Buffer;"undefined"!=typeof self&&self,r=function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=109)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(17),o=n(18),i=n(19),a=n(45),l=n(46),s=n(47),u=n(48),c=n(49),f=n(12),p=n(32),d=n(33),h=n(31),y=n(1),v={Scope:y.Scope,create:y.create,find:y.find,query:y.query,register:y.register,Container:r.default,Format:o.default,Leaf:i.default,Embed:u.default,Scroll:a.default,Block:s.default,Inline:l.default,Text:c.default,Attributor:{Attribute:f.default,Class:p.default,Style:d.default,Store:h.default}};t.default=v},function(e,t,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=function(e){function t(t){var n=this;return t="[Parchment] "+t,(n=e.call(this,t)||this).message=t,n.name=n.constructor.name,n}return o(t,e),t}(Error);t.ParchmentError=i;var a,l={},s={},u={},c={};function f(e,t){var n;if(void 0===t&&(t=a.ANY),"string"==typeof e)n=c[e]||l[e];else if(e instanceof Text||e.nodeType===Node.TEXT_NODE)n=c.text;else if("number"==typeof e)e&a.LEVEL&a.BLOCK?n=c.block:e&a.LEVEL&a.INLINE&&(n=c.inline);else if(e instanceof HTMLElement){var r=(e.getAttribute("class")||"").split(/\s+/);for(var o in r)if(n=s[r[o]])break;n=n||u[e.tagName]}return null==n?null:t&a.LEVEL&n.scope&&t&a.TYPE&n.scope?n:null}t.DATA_KEY="__blot",function(e){e[e.TYPE=3]="TYPE",e[e.LEVEL=12]="LEVEL",e[e.ATTRIBUTE=13]="ATTRIBUTE",e[e.BLOT=14]="BLOT",e[e.INLINE=7]="INLINE",e[e.BLOCK=11]="BLOCK",e[e.BLOCK_BLOT=10]="BLOCK_BLOT",e[e.INLINE_BLOT=6]="INLINE_BLOT",e[e.BLOCK_ATTRIBUTE=9]="BLOCK_ATTRIBUTE",e[e.INLINE_ATTRIBUTE=5]="INLINE_ATTRIBUTE",e[e.ANY=15]="ANY"}(a=t.Scope||(t.Scope={})),t.create=function(e,t){var n=f(e);if(null==n)throw new i("Unable to create "+e+" blot");var r=n,o=e instanceof Node||e.nodeType===Node.TEXT_NODE?e:r.create(t);return new r(o,t)},t.find=function e(n,r){return void 0===r&&(r=!1),null==n?null:null!=n[t.DATA_KEY]?n[t.DATA_KEY].blot:r?e(n.parentNode,r):null},t.query=f,t.register=function e(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];if(t.length>1)return t.map((function(t){return e(t)}));var r=t[0];if("string"!=typeof r.blotName&&"string"!=typeof r.attrName)throw new i("Invalid definition");if("abstract"===r.blotName)throw new i("Cannot register abstract class");if(c[r.blotName||r.attrName]=r,"string"==typeof r.keyName)l[r.keyName]=r;else if(null!=r.className&&(s[r.className]=r),null!=r.tagName){Array.isArray(r.tagName)?r.tagName=r.tagName.map((function(e){return e.toUpperCase()})):r.tagName=r.tagName.toUpperCase();var o=Array.isArray(r.tagName)?r.tagName:[r.tagName];o.forEach((function(e){null!=u[e]&&null!=r.className||(u[e]=r)}))}return r}},function(e,t,n){var r=n(51),o=n(11),i=n(3),a=n(20),l=String.fromCharCode(0),s=function(e){Array.isArray(e)?this.ops=e:null!=e&&Array.isArray(e.ops)?this.ops=e.ops:this.ops=[]};s.prototype.insert=function(e,t){var n={};return 0===e.length?this:(n.insert=e,null!=t&&"object"==typeof t&&Object.keys(t).length>0&&(n.attributes=t),this.push(n))},s.prototype.delete=function(e){return e<=0?this:this.push({delete:e})},s.prototype.retain=function(e,t){if(e<=0)return this;var n={retain:e};return null!=t&&"object"==typeof t&&Object.keys(t).length>0&&(n.attributes=t),this.push(n)},s.prototype.push=function(e){var t=this.ops.length,n=this.ops[t-1];if(e=i(!0,{},e),"object"==typeof n){if("number"==typeof e.delete&&"number"==typeof n.delete)return this.ops[t-1]={delete:n.delete+e.delete},this;if("number"==typeof n.delete&&null!=e.insert&&(t-=1,"object"!=typeof(n=this.ops[t-1])))return this.ops.unshift(e),this;if(o(e.attributes,n.attributes)){if("string"==typeof e.insert&&"string"==typeof n.insert)return this.ops[t-1]={insert:n.insert+e.insert},"object"==typeof e.attributes&&(this.ops[t-1].attributes=e.attributes),this;if("number"==typeof e.retain&&"number"==typeof n.retain)return this.ops[t-1]={retain:n.retain+e.retain},"object"==typeof e.attributes&&(this.ops[t-1].attributes=e.attributes),this}}return t===this.ops.length?this.ops.push(e):this.ops.splice(t,0,e),this},s.prototype.chop=function(){var e=this.ops[this.ops.length-1];return e&&e.retain&&!e.attributes&&this.ops.pop(),this},s.prototype.filter=function(e){return this.ops.filter(e)},s.prototype.forEach=function(e){this.ops.forEach(e)},s.prototype.map=function(e){return this.ops.map(e)},s.prototype.partition=function(e){var t=[],n=[];return this.forEach((function(r){(e(r)?t:n).push(r)})),[t,n]},s.prototype.reduce=function(e,t){return this.ops.reduce(e,t)},s.prototype.changeLength=function(){return this.reduce((function(e,t){return t.insert?e+a.length(t):t.delete?e-t.delete:e}),0)},s.prototype.length=function(){return this.reduce((function(e,t){return e+a.length(t)}),0)},s.prototype.slice=function(e,t){e=e||0,"number"!=typeof t&&(t=1/0);for(var n=[],r=a.iterator(this.ops),o=0;o<t&&r.hasNext();){var i;o<e?i=r.next(e-o):(i=r.next(t-o),n.push(i)),o+=a.length(i)}return new s(n)},s.prototype.compose=function(e){var t=a.iterator(this.ops),n=a.iterator(e.ops),r=[],i=n.peek();if(null!=i&&"number"==typeof i.retain&&null==i.attributes){for(var l=i.retain;"insert"===t.peekType()&&t.peekLength()<=l;)l-=t.peekLength(),r.push(t.next());i.retain-l>0&&n.next(i.retain-l)}for(var u=new s(r);t.hasNext()||n.hasNext();)if("insert"===n.peekType())u.push(n.next());else if("delete"===t.peekType())u.push(t.next());else{var c=Math.min(t.peekLength(),n.peekLength()),f=t.next(c),p=n.next(c);if("number"==typeof p.retain){var d={};"number"==typeof f.retain?d.retain=c:d.insert=f.insert;var h=a.attributes.compose(f.attributes,p.attributes,"number"==typeof f.retain);if(h&&(d.attributes=h),u.push(d),!n.hasNext()&&o(u.ops[u.ops.length-1],d)){var y=new s(t.rest());return u.concat(y).chop()}}else"number"==typeof p.delete&&"number"==typeof f.retain&&u.push(p)}return u.chop()},s.prototype.concat=function(e){var t=new s(this.ops.slice());return e.ops.length>0&&(t.push(e.ops[0]),t.ops=t.ops.concat(e.ops.slice(1))),t},s.prototype.diff=function(e,t){if(this.ops===e.ops)return new s;var n=[this,e].map((function(t){return t.map((function(n){if(null!=n.insert)return"string"==typeof n.insert?n.insert:l;throw new Error("diff() called "+(t===e?"on":"with")+" non-document")})).join("")})),i=new s,u=r(n[0],n[1],t),c=a.iterator(this.ops),f=a.iterator(e.ops);return u.forEach((function(e){for(var t=e[1].length;t>0;){var n=0;switch(e[0]){case r.INSERT:n=Math.min(f.peekLength(),t),i.push(f.next(n));break;case r.DELETE:n=Math.min(t,c.peekLength()),c.next(n),i.delete(n);break;case r.EQUAL:n=Math.min(c.peekLength(),f.peekLength(),t);var l=c.next(n),s=f.next(n);o(l.insert,s.insert)?i.retain(n,a.attributes.diff(l.attributes,s.attributes)):i.push(s).delete(n)}t-=n}})),i.chop()},s.prototype.eachLine=function(e,t){t=t||"\n";for(var n=a.iterator(this.ops),r=new s,o=0;n.hasNext();){if("insert"!==n.peekType())return;var i=n.peek(),l=a.length(i)-n.peekLength(),u="string"==typeof i.insert?i.insert.indexOf(t,l)-l:-1;if(u<0)r.push(n.next());else if(u>0)r.push(n.next(u));else{if(!1===e(r,n.next(1).attributes||{},o))return;o+=1,r=new s}}r.length()>0&&e(r,{},o)},s.prototype.transform=function(e,t){if(t=!!t,"number"==typeof e)return this.transformPosition(e,t);for(var n=a.iterator(this.ops),r=a.iterator(e.ops),o=new s;n.hasNext()||r.hasNext();)if("insert"!==n.peekType()||!t&&"insert"===r.peekType())if("insert"===r.peekType())o.push(r.next());else{var i=Math.min(n.peekLength(),r.peekLength()),l=n.next(i),u=r.next(i);if(l.delete)continue;u.delete?o.push(u):o.retain(i,a.attributes.transform(l.attributes,u.attributes,t))}else o.retain(a.length(n.next()));return o.chop()},s.prototype.transformPosition=function(e,t){t=!!t;for(var n=a.iterator(this.ops),r=0;n.hasNext()&&r<=e;){var o=n.peekLength(),i=n.peekType();n.next(),"delete"!==i?("insert"===i&&(r<e||!t)&&(e+=o),r+=o):e-=Math.min(o,e-r)}return e},e.exports=s},function(e,t){"use strict";var n=Object.prototype.hasOwnProperty,r=Object.prototype.toString,o=Object.defineProperty,i=Object.getOwnPropertyDescriptor,a=function(e){return"function"==typeof Array.isArray?Array.isArray(e):"[object Array]"===r.call(e)},l=function(e){if(!e||"[object Object]"!==r.call(e))return!1;var t,o=n.call(e,"constructor"),i=e.constructor&&e.constructor.prototype&&n.call(e.constructor.prototype,"isPrototypeOf");if(e.constructor&&!o&&!i)return!1;for(t in e);return void 0===t||n.call(e,t)},s=function(e,t){o&&"__proto__"===t.name?o(e,t.name,{enumerable:!0,configurable:!0,value:t.newValue,writable:!0}):e[t.name]=t.newValue},u=function(e,t){if("__proto__"===t){if(!n.call(e,t))return;if(i)return i(e,t).value}return e[t]};e.exports=function e(){var t,n,r,o,i,c,f=arguments[0],p=1,d=arguments.length,h=!1;for("boolean"==typeof f&&(h=f,f=arguments[1]||{},p=2),(null==f||"object"!=typeof f&&"function"!=typeof f)&&(f={});p<d;++p)if(null!=(t=arguments[p]))for(n in t)r=u(f,n),f!==(o=u(t,n))&&(h&&o&&(l(o)||(i=a(o)))?(i?(i=!1,c=r&&a(r)?r:[]):c=r&&l(r)?r:{},s(f,{name:n,newValue:e(h,c,o)})):void 0!==o&&s(f,{name:n,newValue:o}));return f}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.BlockEmbed=t.bubbleFormats=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0},i=f(n(3)),a=f(n(2)),l=f(n(0)),s=f(n(16)),u=f(n(6)),c=f(n(7));function f(e){return e&&e.__esModule?e:{default:e}}function p(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function d(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function h(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var y=function(e){function t(){return p(this,t),d(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return h(t,e),r(t,[{key:"attach",value:function(){o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"attach",this).call(this),this.attributes=new l.default.Attributor.Store(this.domNode)}},{key:"delta",value:function(){return(new a.default).insert(this.value(),(0,i.default)(this.formats(),this.attributes.values()))}},{key:"format",value:function(e,t){var n=l.default.query(e,l.default.Scope.BLOCK_ATTRIBUTE);null!=n&&this.attributes.attribute(n,t)}},{key:"formatAt",value:function(e,t,n,r){this.format(n,r)}},{key:"insertAt",value:function(e,n,r){if("string"==typeof n&&n.endsWith("\n")){var i=l.default.create(v.blotName);this.parent.insertBefore(i,0===e?this:this.next),i.insertAt(0,n.slice(0,-1))}else o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"insertAt",this).call(this,e,n,r)}}]),t}(l.default.Embed);y.scope=l.default.Scope.BLOCK_BLOT;var v=function(e){function t(e){p(this,t);var n=d(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.cache={},n}return h(t,e),r(t,[{key:"delta",value:function(){return null==this.cache.delta&&(this.cache.delta=this.descendants(l.default.Leaf).reduce((function(e,t){return 0===t.length()?e:e.insert(t.value(),m(t))}),new a.default).insert("\n",m(this))),this.cache.delta}},{key:"deleteAt",value:function(e,n){o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"deleteAt",this).call(this,e,n),this.cache={}}},{key:"formatAt",value:function(e,n,r,i){n<=0||(l.default.query(r,l.default.Scope.BLOCK)?e+n===this.length()&&this.format(r,i):o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"formatAt",this).call(this,e,Math.min(n,this.length()-e-1),r,i),this.cache={})}},{key:"insertAt",value:function(e,n,r){if(null!=r)return o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"insertAt",this).call(this,e,n,r);if(0!==n.length){var i=n.split("\n"),a=i.shift();a.length>0&&(e<this.length()-1||null==this.children.tail?o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"insertAt",this).call(this,Math.min(e,this.length()-1),a):this.children.tail.insertAt(this.children.tail.length(),a),this.cache={});var l=this;i.reduce((function(e,t){return(l=l.split(e,!0)).insertAt(0,t),t.length}),e+a.length)}}},{key:"insertBefore",value:function(e,n){var r=this.children.head;o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"insertBefore",this).call(this,e,n),r instanceof s.default&&r.remove(),this.cache={}}},{key:"length",value:function(){return null==this.cache.length&&(this.cache.length=o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"length",this).call(this)+1),this.cache.length}},{key:"moveChildren",value:function(e,n){o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"moveChildren",this).call(this,e,n),this.cache={}}},{key:"optimize",value:function(e){o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"optimize",this).call(this,e),this.cache={}}},{key:"path",value:function(e){return o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"path",this).call(this,e,!0)}},{key:"removeChild",value:function(e){o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"removeChild",this).call(this,e),this.cache={}}},{key:"split",value:function(e){var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(n&&(0===e||e>=this.length()-1)){var r=this.clone();return 0===e?(this.parent.insertBefore(r,this),this):(this.parent.insertBefore(r,this.next),r)}var i=o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"split",this).call(this,e,n);return this.cache={},i}}]),t}(l.default.Block);function m(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return null==e?t:("function"==typeof e.formats&&(t=(0,i.default)(t,e.formats())),null==e.parent||"scroll"==e.parent.blotName||e.parent.statics.scope!==e.statics.scope?t:m(e.parent,t))}v.blotName="block",v.tagName="P",v.defaultChild="break",v.allowedChildren=[u.default,l.default.Embed,c.default],t.bubbleFormats=m,t.BlockEmbed=y,t.default=v},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.overload=t.expandConfig=void 0;var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,l=e[Symbol.iterator]();!(r=(a=l.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{!r&&l.return&&l.return()}finally{if(o)throw i}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();n(50);var a=v(n(2)),l=v(n(14)),s=v(n(8)),u=v(n(9)),c=v(n(0)),f=n(15),p=v(f),d=v(n(3)),h=v(n(10)),y=v(n(34));function v(e){return e&&e.__esModule?e:{default:e}}function m(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function g(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var b=(0,h.default)("quill"),_=function(){function e(t){var n=this,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(g(this,e),this.options=w(t,r),this.container=this.options.container,null==this.container)return b.error("Invalid Quill container",t);this.options.debug&&e.debug(this.options.debug);var o=this.container.innerHTML.trim();this.container.classList.add("ql-container"),this.container.innerHTML="",this.container.__quill=this,this.root=this.addContainer("ql-editor"),this.root.classList.add("ql-blank"),this.root.setAttribute("data-gramm",!1),this.scrollingContainer=this.options.scrollingContainer||this.root,this.emitter=new s.default,this.scroll=c.default.create(this.root,{emitter:this.emitter,whitelist:this.options.formats}),this.editor=new l.default(this.scroll),this.selection=new p.default(this.scroll,this.emitter),this.theme=new this.options.theme(this,this.options),this.keyboard=this.theme.addModule("keyboard"),this.clipboard=this.theme.addModule("clipboard"),this.history=this.theme.addModule("history"),this.theme.init(),this.emitter.on(s.default.events.EDITOR_CHANGE,(function(e){e===s.default.events.TEXT_CHANGE&&n.root.classList.toggle("ql-blank",n.editor.isBlank())})),this.emitter.on(s.default.events.SCROLL_UPDATE,(function(e,t){var r=n.selection.lastRange,o=r&&0===r.length?r.index:void 0;O.call(n,(function(){return n.editor.update(null,t,o)}),e)}));var i=this.clipboard.convert("<div class='ql-editor' style=\"white-space: normal;\">"+o+"<p><br></p></div>");this.setContents(i),this.history.clear(),this.options.placeholder&&this.root.setAttribute("data-placeholder",this.options.placeholder),this.options.readOnly&&this.disable()}return i(e,null,[{key:"debug",value:function(e){!0===e&&(e="log"),h.default.level(e)}},{key:"find",value:function(e){return e.__quill||c.default.find(e)}},{key:"import",value:function(e){return null==this.imports[e]&&b.error("Cannot import "+e+". Are you sure it was registered?"),this.imports[e]}},{key:"register",value:function(e,t){var n=this,r=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if("string"!=typeof e){var o=e.attrName||e.blotName;"string"==typeof o?this.register("formats/"+o,e,t):Object.keys(e).forEach((function(r){n.register(r,e[r],t)}))}else null==this.imports[e]||r||b.warn("Overwriting "+e+" with",t),this.imports[e]=t,(e.startsWith("blots/")||e.startsWith("formats/"))&&"abstract"!==t.blotName?c.default.register(t):e.startsWith("modules")&&"function"==typeof t.register&&t.register()}}]),i(e,[{key:"addContainer",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;if("string"==typeof e){var n=e;(e=document.createElement("div")).classList.add(n)}return this.container.insertBefore(e,t),e}},{key:"blur",value:function(){this.selection.setRange(null)}},{key:"deleteText",value:function(e,t,n){var r=this,i=k(e,t,n),a=o(i,4);return e=a[0],t=a[1],n=a[3],O.call(this,(function(){return r.editor.deleteText(e,t)}),n,e,-1*t)}},{key:"disable",value:function(){this.enable(!1)}},{key:"enable",value:function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];this.scroll.enable(e),this.container.classList.toggle("ql-disabled",!e)}},{key:"focus",value:function(){var e=this.scrollingContainer.scrollTop;this.selection.focus(),this.scrollingContainer.scrollTop=e,this.scrollIntoView()}},{key:"format",value:function(e,t){var n=this,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:s.default.sources.API;return O.call(this,(function(){var r=n.getSelection(!0),o=new a.default;if(null==r)return o;if(c.default.query(e,c.default.Scope.BLOCK))o=n.editor.formatLine(r.index,r.length,m({},e,t));else{if(0===r.length)return n.selection.format(e,t),o;o=n.editor.formatText(r.index,r.length,m({},e,t))}return n.setSelection(r,s.default.sources.SILENT),o}),r)}},{key:"formatLine",value:function(e,t,n,r,i){var a,l=this,s=k(e,t,n,r,i),u=o(s,4);return e=u[0],t=u[1],a=u[2],i=u[3],O.call(this,(function(){return l.editor.formatLine(e,t,a)}),i,e,0)}},{key:"formatText",value:function(e,t,n,r,i){var a,l=this,s=k(e,t,n,r,i),u=o(s,4);return e=u[0],t=u[1],a=u[2],i=u[3],O.call(this,(function(){return l.editor.formatText(e,t,a)}),i,e,0)}},{key:"getBounds",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=void 0;n="number"==typeof e?this.selection.getBounds(e,t):this.selection.getBounds(e.index,e.length);var r=this.container.getBoundingClientRect();return{bottom:n.bottom-r.top,height:n.height,left:n.left-r.left,right:n.right-r.left,top:n.top-r.top,width:n.width}}},{key:"getContents",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.getLength()-e,n=k(e,t),r=o(n,2);return e=r[0],t=r[1],this.editor.getContents(e,t)}},{key:"getFormat",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.getSelection(!0),t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return"number"==typeof e?this.editor.getFormat(e,t):this.editor.getFormat(e.index,e.length)}},{key:"getIndex",value:function(e){return e.offset(this.scroll)}},{key:"getLength",value:function(){return this.scroll.length()}},{key:"getLeaf",value:function(e){return this.scroll.leaf(e)}},{key:"getLine",value:function(e){return this.scroll.line(e)}},{key:"getLines",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Number.MAX_VALUE;return"number"!=typeof e?this.scroll.lines(e.index,e.length):this.scroll.lines(e,t)}},{key:"getModule",value:function(e){return this.theme.modules[e]}},{key:"getSelection",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return e&&this.focus(),this.update(),this.selection.getRange()[0]}},{key:"getText",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.getLength()-e,n=k(e,t),r=o(n,2);return e=r[0],t=r[1],this.editor.getText(e,t)}},{key:"hasFocus",value:function(){return this.selection.hasFocus()}},{key:"insertEmbed",value:function(t,n,r){var o=this,i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:e.sources.API;return O.call(this,(function(){return o.editor.insertEmbed(t,n,r)}),i,t)}},{key:"insertText",value:function(e,t,n,r,i){var a,l=this,s=k(e,0,n,r,i),u=o(s,4);return e=u[0],a=u[2],i=u[3],O.call(this,(function(){return l.editor.insertText(e,t,a)}),i,e,t.length)}},{key:"isEnabled",value:function(){return!this.container.classList.contains("ql-disabled")}},{key:"off",value:function(){return this.emitter.off.apply(this.emitter,arguments)}},{key:"on",value:function(){return this.emitter.on.apply(this.emitter,arguments)}},{key:"once",value:function(){return this.emitter.once.apply(this.emitter,arguments)}},{key:"pasteHTML",value:function(e,t,n){this.clipboard.dangerouslyPasteHTML(e,t,n)}},{key:"removeFormat",value:function(e,t,n){var r=this,i=k(e,t,n),a=o(i,4);return e=a[0],t=a[1],n=a[3],O.call(this,(function(){return r.editor.removeFormat(e,t)}),n,e)}},{key:"scrollIntoView",value:function(){this.selection.scrollIntoView(this.scrollingContainer)}},{key:"setContents",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:s.default.sources.API;return O.call(this,(function(){e=new a.default(e);var n=t.getLength(),r=t.editor.deleteText(0,n),o=t.editor.applyDelta(e),i=o.ops[o.ops.length-1];return null!=i&&"string"==typeof i.insert&&"\n"===i.insert[i.insert.length-1]&&(t.editor.deleteText(t.getLength()-1,1),o.delete(1)),r.compose(o)}),n)}},{key:"setSelection",value:function(t,n,r){if(null==t)this.selection.setRange(null,n||e.sources.API);else{var i=k(t,n,r),a=o(i,4);t=a[0],n=a[1],r=a[3],this.selection.setRange(new f.Range(t,n),r),r!==s.default.sources.SILENT&&this.selection.scrollIntoView(this.scrollingContainer)}}},{key:"setText",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:s.default.sources.API,n=(new a.default).insert(e);return this.setContents(n,t)}},{key:"update",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:s.default.sources.USER,t=this.scroll.update(e);return this.selection.update(e),t}},{key:"updateContents",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:s.default.sources.API;return O.call(this,(function(){return e=new a.default(e),t.editor.applyDelta(e,n)}),n,!0)}}]),e}();function w(e,t){if((t=(0,d.default)(!0,{container:e,modules:{clipboard:!0,keyboard:!0,history:!0}},t)).theme&&t.theme!==_.DEFAULTS.theme){if(t.theme=_.import("themes/"+t.theme),null==t.theme)throw new Error("Invalid theme "+t.theme+". Did you register it?")}else t.theme=y.default;var n=(0,d.default)(!0,{},t.theme.DEFAULTS);[n,t].forEach((function(e){e.modules=e.modules||{},Object.keys(e.modules).forEach((function(t){!0===e.modules[t]&&(e.modules[t]={})}))}));var r=Object.keys(n.modules).concat(Object.keys(t.modules)).reduce((function(e,t){var n=_.import("modules/"+t);return null==n?b.error("Cannot load "+t+" module. Are you sure you registered it?"):e[t]=n.DEFAULTS||{},e}),{});return null!=t.modules&&t.modules.toolbar&&t.modules.toolbar.constructor!==Object&&(t.modules.toolbar={container:t.modules.toolbar}),t=(0,d.default)(!0,{},_.DEFAULTS,{modules:r},n,t),["bounds","container","scrollingContainer"].forEach((function(e){"string"==typeof t[e]&&(t[e]=document.querySelector(t[e]))})),t.modules=Object.keys(t.modules).reduce((function(e,n){return t.modules[n]&&(e[n]=t.modules[n]),e}),{}),t}function O(e,t,n,r){if(this.options.strict&&!this.isEnabled()&&t===s.default.sources.USER)return new a.default;var o=null==n?null:this.getSelection(),i=this.editor.delta,l=e();if(null!=o&&(!0===n&&(n=o.index),null==r?o=S(o,l,t):0!==r&&(o=S(o,n,r,t)),this.setSelection(o,s.default.sources.SILENT)),l.length()>0){var u,c,f=[s.default.events.TEXT_CHANGE,l,i,t];(u=this.emitter).emit.apply(u,[s.default.events.EDITOR_CHANGE].concat(f)),t!==s.default.sources.SILENT&&(c=this.emitter).emit.apply(c,f)}return l}function k(e,t,n,o,i){var a={};return"number"==typeof e.index&&"number"==typeof e.length?"number"!=typeof t?(i=o,o=n,n=t,t=e.length,e=e.index):(t=e.length,e=e.index):"number"!=typeof t&&(i=o,o=n,n=t,t=0),"object"===(void 0===n?"undefined":r(n))?(a=n,i=o):"string"==typeof n&&(null!=o?a[n]=o:i=n),[e,t,a,i=i||s.default.sources.API]}function S(e,t,n,r){if(null==e)return null;var i=void 0,l=void 0;if(t instanceof a.default){var u=[e.index,e.index+e.length].map((function(e){return t.transformPosition(e,r!==s.default.sources.USER)})),c=o(u,2);i=c[0],l=c[1]}else{var p=[e.index,e.index+e.length].map((function(e){return e<t||e===t&&r===s.default.sources.USER?e:n>=0?e+n:Math.max(t,e+n)})),d=o(p,2);i=d[0],l=d[1]}return new f.Range(i,l-i)}_.DEFAULTS={bounds:null,formats:null,modules:{},placeholder:"",readOnly:!1,scrollingContainer:null,strict:!0,theme:"default"},_.events=s.default.events,_.sources=s.default.sources,_.version="1.3.7",_.imports={delta:a.default,parchment:c.default,"core/module":u.default,"core/theme":y.default},t.expandConfig=w,t.overload=k,t.default=_},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0},i=l(n(7)),a=l(n(0));function l(e){return e&&e.__esModule?e:{default:e}}function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var c=function(e){function t(){return s(this,t),u(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),r(t,[{key:"formatAt",value:function(e,n,r,i){if(t.compare(this.statics.blotName,r)<0&&a.default.query(r,a.default.Scope.BLOT)){var l=this.isolate(e,n);i&&l.wrap(r,i)}else o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"formatAt",this).call(this,e,n,r,i)}},{key:"optimize",value:function(e){if(o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"optimize",this).call(this,e),this.parent instanceof t&&t.compare(this.statics.blotName,this.parent.statics.blotName)>0){var n=this.parent.isolate(this.offset(),this.length());this.moveChildren(n),n.wrap(this)}}}],[{key:"compare",value:function(e,n){var r=t.order.indexOf(e),o=t.order.indexOf(n);return r>=0||o>=0?r-o:e===n?0:e<n?-1:1}}]),t}(a.default.Inline);c.allowedChildren=[c,a.default.Embed,i.default],c.order=["cursor","inline","underline","strike","italic","bold","script","link","code"],t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(0);function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var l=function(e){function t(){return i(this,t),a(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t}(((r=o)&&r.__esModule?r:{default:r}).default.Text);t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0},i=a(n(54));function a(e){return e&&e.__esModule?e:{default:e}}var l=(0,a(n(10)).default)("quill:events");["selectionchange","mousedown","mouseup","click"].forEach((function(e){document.addEventListener(e,(function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];[].slice.call(document.querySelectorAll(".ql-container")).forEach((function(e){var n;e.__quill&&e.__quill.emitter&&(n=e.__quill.emitter).handleDOM.apply(n,t)}))}))}));var s=function(e){function t(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var e=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e.listeners={},e.on("error",l.error),e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),r(t,[{key:"emit",value:function(){l.log.apply(l,arguments),o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"emit",this).apply(this,arguments)}},{key:"handleDOM",value:function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];(this.listeners[e.type]||[]).forEach((function(t){var r=t.node,o=t.handler;(e.target===r||r.contains(e.target))&&o.apply(void 0,[e].concat(n))}))}},{key:"listenDOM",value:function(e,t,n){this.listeners[e]||(this.listeners[e]=[]),this.listeners[e].push({node:t,handler:n})}}]),t}(i.default);s.events={EDITOR_CHANGE:"editor-change",SCROLL_BEFORE_UPDATE:"scroll-before-update",SCROLL_OPTIMIZE:"scroll-optimize",SCROLL_UPDATE:"scroll-update",SELECTION_CHANGE:"selection-change",TEXT_CHANGE:"text-change"},s.sources={API:"api",SILENT:"silent",USER:"user"},t.default=s},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var o=function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};r(this,e),this.quill=t,this.options=n};o.DEFAULTS={},t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=["error","warn","log","info"],o="warn";function i(e){if(r.indexOf(e)<=r.indexOf(o)){for(var t,n=arguments.length,i=Array(n>1?n-1:0),a=1;a<n;a++)i[a-1]=arguments[a];(t=console)[e].apply(t,i)}}function a(e){return r.reduce((function(t,n){return t[n]=i.bind(console,n,e),t}),{})}i.level=a.level=function(e){o=e},t.default=a},function(e,t,n){var r=Array.prototype.slice,o=n(52),i=n(53),a=e.exports=function(e,t,n){return n||(n={}),e===t||(e instanceof Date&&t instanceof Date?e.getTime()===t.getTime():!e||!t||"object"!=typeof e&&"object"!=typeof t?n.strict?e===t:e==t:function(e,t,n){var u,c;if(l(e)||l(t))return!1;if(e.prototype!==t.prototype)return!1;if(i(e))return!!i(t)&&(e=r.call(e),t=r.call(t),a(e,t,n));if(s(e)){if(!s(t))return!1;if(e.length!==t.length)return!1;for(u=0;u<e.length;u++)if(e[u]!==t[u])return!1;return!0}try{var f=o(e),p=o(t)}catch(e){return!1}if(f.length!=p.length)return!1;for(f.sort(),p.sort(),u=f.length-1;u>=0;u--)if(f[u]!=p[u])return!1;for(u=f.length-1;u>=0;u--)if(c=f[u],!a(e[c],t[c],n))return!1;return typeof e==typeof t}(e,t,n))};function l(e){return null==e}function s(e){return!(!e||"object"!=typeof e||"number"!=typeof e.length||"function"!=typeof e.copy||"function"!=typeof e.slice||e.length>0&&"number"!=typeof e[0])}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o=function(){function e(e,t,n){void 0===n&&(n={}),this.attrName=e,this.keyName=t;var o=r.Scope.TYPE&r.Scope.ATTRIBUTE;null!=n.scope?this.scope=n.scope&r.Scope.LEVEL|o:this.scope=r.Scope.ATTRIBUTE,null!=n.whitelist&&(this.whitelist=n.whitelist)}return e.keys=function(e){return[].map.call(e.attributes,(function(e){return e.name}))},e.prototype.add=function(e,t){return!!this.canAdd(e,t)&&(e.setAttribute(this.keyName,t),!0)},e.prototype.canAdd=function(e,t){return null!=r.query(e,r.Scope.BLOT&(this.scope|r.Scope.TYPE))&&(null==this.whitelist||("string"==typeof t?this.whitelist.indexOf(t.replace(/["']/g,""))>-1:this.whitelist.indexOf(t)>-1))},e.prototype.remove=function(e){e.removeAttribute(this.keyName)},e.prototype.value=function(e){var t=e.getAttribute(this.keyName);return this.canAdd(e,t)&&t?t:""},e}();t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.Code=void 0;var r=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,l=e[Symbol.iterator]();!(r=(a=l.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{!r&&l.return&&l.return()}finally{if(o)throw i}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0},a=f(n(2)),l=f(n(0)),s=f(n(4)),u=f(n(6)),c=f(n(7));function f(e){return e&&e.__esModule?e:{default:e}}function p(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function d(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function h(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var y=function(e){function t(){return p(this,t),d(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return h(t,e),t}(u.default);y.blotName="code",y.tagName="CODE";var v=function(e){function t(){return p(this,t),d(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return h(t,e),o(t,[{key:"delta",value:function(){var e=this,t=this.domNode.textContent;return t.endsWith("\n")&&(t=t.slice(0,-1)),t.split("\n").reduce((function(t,n){return t.insert(n).insert("\n",e.formats())}),new a.default)}},{key:"format",value:function(e,n){if(e!==this.statics.blotName||!n){var o=this.descendant(c.default,this.length()-1),a=r(o,1)[0];null!=a&&a.deleteAt(a.length()-1,1),i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"format",this).call(this,e,n)}}},{key:"formatAt",value:function(e,n,r,o){if(0!==n&&null!=l.default.query(r,l.default.Scope.BLOCK)&&(r!==this.statics.blotName||o!==this.statics.formats(this.domNode))){var i=this.newlineIndex(e);if(!(i<0||i>=e+n)){var a=this.newlineIndex(e,!0)+1,s=i-a+1,u=this.isolate(a,s),c=u.next;u.format(r,o),c instanceof t&&c.formatAt(0,e-a+n-s,r,o)}}}},{key:"insertAt",value:function(e,t,n){if(null==n){var o=this.descendant(c.default,e),i=r(o,2),a=i[0],l=i[1];a.insertAt(l,t)}}},{key:"length",value:function(){var e=this.domNode.textContent.length;return this.domNode.textContent.endsWith("\n")?e:e+1}},{key:"newlineIndex",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(t)return this.domNode.textContent.slice(0,e).lastIndexOf("\n");var n=this.domNode.textContent.slice(e).indexOf("\n");return n>-1?e+n:-1}},{key:"optimize",value:function(e){this.domNode.textContent.endsWith("\n")||this.appendChild(l.default.create("text","\n")),i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"optimize",this).call(this,e);var n=this.next;null!=n&&n.prev===this&&n.statics.blotName===this.statics.blotName&&this.statics.formats(this.domNode)===n.statics.formats(n.domNode)&&(n.optimize(e),n.moveChildren(this),n.remove())}},{key:"replace",value:function(e){i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"replace",this).call(this,e),[].slice.call(this.domNode.querySelectorAll("*")).forEach((function(e){var t=l.default.find(e);null==t?e.parentNode.removeChild(e):t instanceof l.default.Embed?t.remove():t.unwrap()}))}}],[{key:"create",value:function(e){var n=i(t.__proto__||Object.getPrototypeOf(t),"create",this).call(this,e);return n.setAttribute("spellcheck",!1),n}},{key:"formats",value:function(){return!0}}]),t}(s.default);v.blotName="code-block",v.tagName="PRE",v.TAB="  ",t.Code=y,t.default=v},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,l=e[Symbol.iterator]();!(r=(a=l.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{!r&&l.return&&l.return()}finally{if(o)throw i}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=m(n(2)),l=m(n(20)),s=m(n(0)),u=m(n(13)),c=m(n(24)),f=n(4),p=m(f),d=m(n(16)),h=m(n(21)),y=m(n(11)),v=m(n(3));function m(e){return e&&e.__esModule?e:{default:e}}var g=/^[ -~]*$/,b=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.scroll=t,this.delta=this.getDelta()}return i(e,[{key:"applyDelta",value:function(e){var t=this,n=!1;this.scroll.update();var i=this.scroll.length();return this.scroll.batchStart(),(e=function(e){return e.reduce((function(e,t){if(1===t.insert){var n=(0,h.default)(t.attributes);return delete n.image,e.insert({image:t.attributes.image},n)}if(null==t.attributes||!0!==t.attributes.list&&!0!==t.attributes.bullet||((t=(0,h.default)(t)).attributes.list?t.attributes.list="ordered":(t.attributes.list="bullet",delete t.attributes.bullet)),"string"==typeof t.insert){var r=t.insert.replace(/\r\n/g,"\n").replace(/\r/g,"\n");return e.insert(r,t.attributes)}return e.push(t)}),new a.default)}(e)).reduce((function(e,a){var u=a.retain||a.delete||a.insert.length||1,c=a.attributes||{};if(null!=a.insert){if("string"==typeof a.insert){var d=a.insert;d.endsWith("\n")&&n&&(n=!1,d=d.slice(0,-1)),e>=i&&!d.endsWith("\n")&&(n=!0),t.scroll.insertAt(e,d);var h=t.scroll.line(e),y=o(h,2),m=y[0],g=y[1],b=(0,v.default)({},(0,f.bubbleFormats)(m));if(m instanceof p.default){var _=m.descendant(s.default.Leaf,g),w=o(_,1)[0];b=(0,v.default)(b,(0,f.bubbleFormats)(w))}c=l.default.attributes.diff(b,c)||{}}else if("object"===r(a.insert)){var O=Object.keys(a.insert)[0];if(null==O)return e;t.scroll.insertAt(e,O,a.insert[O])}i+=u}return Object.keys(c).forEach((function(n){t.scroll.formatAt(e,u,n,c[n])})),e+u}),0),e.reduce((function(e,n){return"number"==typeof n.delete?(t.scroll.deleteAt(e,n.delete),e):e+(n.retain||n.insert.length||1)}),0),this.scroll.batchEnd(),this.update(e)}},{key:"deleteText",value:function(e,t){return this.scroll.deleteAt(e,t),this.update((new a.default).retain(e).delete(t))}},{key:"formatLine",value:function(e,t){var n=this,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return this.scroll.update(),Object.keys(r).forEach((function(o){if(null==n.scroll.whitelist||n.scroll.whitelist[o]){var i=n.scroll.lines(e,Math.max(t,1)),a=t;i.forEach((function(t){var i=t.length();if(t instanceof u.default){var l=e-t.offset(n.scroll),s=t.newlineIndex(l+a)-l+1;t.formatAt(l,s,o,r[o])}else t.format(o,r[o]);a-=i}))}})),this.scroll.optimize(),this.update((new a.default).retain(e).retain(t,(0,h.default)(r)))}},{key:"formatText",value:function(e,t){var n=this,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return Object.keys(r).forEach((function(o){n.scroll.formatAt(e,t,o,r[o])})),this.update((new a.default).retain(e).retain(t,(0,h.default)(r)))}},{key:"getContents",value:function(e,t){return this.delta.slice(e,e+t)}},{key:"getDelta",value:function(){return this.scroll.lines().reduce((function(e,t){return e.concat(t.delta())}),new a.default)}},{key:"getFormat",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=[],r=[];0===t?this.scroll.path(e).forEach((function(e){var t=o(e,1)[0];t instanceof p.default?n.push(t):t instanceof s.default.Leaf&&r.push(t)})):(n=this.scroll.lines(e,t),r=this.scroll.descendants(s.default.Leaf,e,t));var i=[n,r].map((function(e){if(0===e.length)return{};for(var t=(0,f.bubbleFormats)(e.shift());Object.keys(t).length>0;){var n=e.shift();if(null==n)return t;t=_((0,f.bubbleFormats)(n),t)}return t}));return v.default.apply(v.default,i)}},{key:"getText",value:function(e,t){return this.getContents(e,t).filter((function(e){return"string"==typeof e.insert})).map((function(e){return e.insert})).join("")}},{key:"insertEmbed",value:function(e,t,n){return this.scroll.insertAt(e,t,n),this.update((new a.default).retain(e).insert(function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}({},t,n)))}},{key:"insertText",value:function(e,t){var n=this,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return t=t.replace(/\r\n/g,"\n").replace(/\r/g,"\n"),this.scroll.insertAt(e,t),Object.keys(r).forEach((function(o){n.scroll.formatAt(e,t.length,o,r[o])})),this.update((new a.default).retain(e).insert(t,(0,h.default)(r)))}},{key:"isBlank",value:function(){if(0==this.scroll.children.length)return!0;if(this.scroll.children.length>1)return!1;var e=this.scroll.children.head;return e.statics.blotName===p.default.blotName&&!(e.children.length>1)&&e.children.head instanceof d.default}},{key:"removeFormat",value:function(e,t){var n=this.getText(e,t),r=this.scroll.line(e+t),i=o(r,2),l=i[0],s=i[1],c=0,f=new a.default;null!=l&&(c=l instanceof u.default?l.newlineIndex(s)-s+1:l.length()-s,f=l.delta().slice(s,s+c-1).insert("\n"));var p=this.getContents(e,t+c).diff((new a.default).insert(n).concat(f)),d=(new a.default).retain(e).concat(p);return this.applyDelta(d)}},{key:"update",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:void 0,r=this.delta;if(1===t.length&&"characterData"===t[0].type&&t[0].target.data.match(g)&&s.default.find(t[0].target)){var o=s.default.find(t[0].target),i=(0,f.bubbleFormats)(o),l=o.offset(this.scroll),u=t[0].oldValue.replace(c.default.CONTENTS,""),p=(new a.default).insert(u),d=(new a.default).insert(o.value()),h=(new a.default).retain(l).concat(p.diff(d,n));e=h.reduce((function(e,t){return t.insert?e.insert(t.insert,i):e.push(t)}),new a.default),this.delta=r.compose(e)}else this.delta=this.getDelta(),e&&(0,y.default)(r.compose(e),this.delta)||(e=r.diff(this.delta,n));return e}}]),e}();function _(e,t){return Object.keys(t).reduce((function(n,r){return null==e[r]||(t[r]===e[r]?n[r]=t[r]:Array.isArray(t[r])?t[r].indexOf(e[r])<0&&(n[r]=t[r].concat([e[r]])):n[r]=[t[r],e[r]]),n}),{})}t.default=b},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.Range=void 0;var r=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,l=e[Symbol.iterator]();!(r=(a=l.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{!r&&l.return&&l.return()}finally{if(o)throw i}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=u(n(0)),a=u(n(21)),l=u(n(11)),s=u(n(8));function u(e){return e&&e.__esModule?e:{default:e}}function c(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}function f(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var p=(0,u(n(10)).default)("quill:selection"),d=function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;f(this,e),this.index=t,this.length=n},h=function(){function e(t,n){var r=this;f(this,e),this.emitter=n,this.scroll=t,this.composing=!1,this.mouseDown=!1,this.root=this.scroll.domNode,this.cursor=i.default.create("cursor",this),this.lastRange=this.savedRange=new d(0,0),this.handleComposition(),this.handleDragging(),this.emitter.listenDOM("selectionchange",document,(function(){r.mouseDown||setTimeout(r.update.bind(r,s.default.sources.USER),1)})),this.emitter.on(s.default.events.EDITOR_CHANGE,(function(e,t){e===s.default.events.TEXT_CHANGE&&t.length()>0&&r.update(s.default.sources.SILENT)})),this.emitter.on(s.default.events.SCROLL_BEFORE_UPDATE,(function(){if(r.hasFocus()){var e=r.getNativeRange();null!=e&&e.start.node!==r.cursor.textNode&&r.emitter.once(s.default.events.SCROLL_UPDATE,(function(){try{r.setNativeRange(e.start.node,e.start.offset,e.end.node,e.end.offset)}catch(e){}}))}})),this.emitter.on(s.default.events.SCROLL_OPTIMIZE,(function(e,t){if(t.range){var n=t.range,o=n.startNode,i=n.startOffset,a=n.endNode,l=n.endOffset;r.setNativeRange(o,i,a,l)}})),this.update(s.default.sources.SILENT)}return o(e,[{key:"handleComposition",value:function(){var e=this;this.root.addEventListener("compositionstart",(function(){e.composing=!0})),this.root.addEventListener("compositionend",(function(){if(e.composing=!1,e.cursor.parent){var t=e.cursor.restore();if(!t)return;setTimeout((function(){e.setNativeRange(t.startNode,t.startOffset,t.endNode,t.endOffset)}),1)}}))}},{key:"handleDragging",value:function(){var e=this;this.emitter.listenDOM("mousedown",document.body,(function(){e.mouseDown=!0})),this.emitter.listenDOM("mouseup",document.body,(function(){e.mouseDown=!1,e.update(s.default.sources.USER)}))}},{key:"focus",value:function(){this.hasFocus()||(this.root.focus(),this.setRange(this.savedRange))}},{key:"format",value:function(e,t){if(null==this.scroll.whitelist||this.scroll.whitelist[e]){this.scroll.update();var n=this.getNativeRange();if(null!=n&&n.native.collapsed&&!i.default.query(e,i.default.Scope.BLOCK)){if(n.start.node!==this.cursor.textNode){var r=i.default.find(n.start.node,!1);if(null==r)return;if(r instanceof i.default.Leaf){var o=r.split(n.start.offset);r.parent.insertBefore(this.cursor,o)}else r.insertBefore(this.cursor,n.start.node);this.cursor.attach()}this.cursor.format(e,t),this.scroll.optimize(),this.setNativeRange(this.cursor.textNode,this.cursor.textNode.data.length),this.update()}}}},{key:"getBounds",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=this.scroll.length();e=Math.min(e,n-1),t=Math.min(e+t,n-1)-e;var o=void 0,i=this.scroll.leaf(e),a=r(i,2),l=a[0],s=a[1];if(null==l)return null;var u=l.position(s,!0),c=r(u,2);o=c[0],s=c[1];var f=document.createRange();if(t>0){f.setStart(o,s);var p=this.scroll.leaf(e+t),d=r(p,2);if(l=d[0],s=d[1],null==l)return null;var h=l.position(s,!0),y=r(h,2);return o=y[0],s=y[1],f.setEnd(o,s),f.getBoundingClientRect()}var v="left",m=void 0;return o instanceof Text?(s<o.data.length?(f.setStart(o,s),f.setEnd(o,s+1)):(f.setStart(o,s-1),f.setEnd(o,s),v="right"),m=f.getBoundingClientRect()):(m=l.domNode.getBoundingClientRect(),s>0&&(v="right")),{bottom:m.top+m.height,height:m.height,left:m[v],right:m[v],top:m.top,width:0}}},{key:"getNativeRange",value:function(){var e=document.getSelection();if(null==e||e.rangeCount<=0)return null;var t=e.getRangeAt(0);if(null==t)return null;var n=this.normalizeNative(t);return p.info("getNativeRange",n),n}},{key:"getRange",value:function(){var e=this.getNativeRange();return null==e?[null,null]:[this.normalizedToRange(e),e]}},{key:"hasFocus",value:function(){return document.activeElement===this.root}},{key:"normalizedToRange",value:function(e){var t=this,n=[[e.start.node,e.start.offset]];e.native.collapsed||n.push([e.end.node,e.end.offset]);var o=n.map((function(e){var n=r(e,2),o=n[0],a=n[1],l=i.default.find(o,!0),s=l.offset(t.scroll);return 0===a?s:l instanceof i.default.Container?s+l.length():s+l.index(o,a)})),a=Math.min(Math.max.apply(Math,c(o)),this.scroll.length()-1),l=Math.min.apply(Math,[a].concat(c(o)));return new d(l,a-l)}},{key:"normalizeNative",value:function(e){if(!y(this.root,e.startContainer)||!e.collapsed&&!y(this.root,e.endContainer))return null;var t={start:{node:e.startContainer,offset:e.startOffset},end:{node:e.endContainer,offset:e.endOffset},native:e};return[t.start,t.end].forEach((function(e){for(var t=e.node,n=e.offset;!(t instanceof Text)&&t.childNodes.length>0;)if(t.childNodes.length>n)t=t.childNodes[n],n=0;else{if(t.childNodes.length!==n)break;n=(t=t.lastChild)instanceof Text?t.data.length:t.childNodes.length+1}e.node=t,e.offset=n})),t}},{key:"rangeToNative",value:function(e){var t=this,n=e.collapsed?[e.index]:[e.index,e.index+e.length],o=[],i=this.scroll.length();return n.forEach((function(e,n){e=Math.min(i-1,e);var a,l=t.scroll.leaf(e),s=r(l,2),u=s[0],c=s[1],f=u.position(c,0!==n),p=r(f,2);a=p[0],c=p[1],o.push(a,c)})),o.length<2&&(o=o.concat(o)),o}},{key:"scrollIntoView",value:function(e){var t=this.lastRange;if(null!=t){var n=this.getBounds(t.index,t.length);if(null!=n){var o=this.scroll.length()-1,i=this.scroll.line(Math.min(t.index,o)),a=r(i,1)[0],l=a;if(t.length>0){var s=this.scroll.line(Math.min(t.index+t.length,o));l=r(s,1)[0]}if(null!=a&&null!=l){var u=e.getBoundingClientRect();n.top<u.top?e.scrollTop-=u.top-n.top:n.bottom>u.bottom&&(e.scrollTop+=n.bottom-u.bottom)}}}}},{key:"setNativeRange",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:e,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:t,o=arguments.length>4&&void 0!==arguments[4]&&arguments[4];if(p.info("setNativeRange",e,t,n,r),null==e||null!=this.root.parentNode&&null!=e.parentNode&&null!=n.parentNode){var i=document.getSelection();if(null!=i)if(null!=e){this.hasFocus()||this.root.focus();var a=(this.getNativeRange()||{}).native;if(null==a||o||e!==a.startContainer||t!==a.startOffset||n!==a.endContainer||r!==a.endOffset){"BR"==e.tagName&&(t=[].indexOf.call(e.parentNode.childNodes,e),e=e.parentNode),"BR"==n.tagName&&(r=[].indexOf.call(n.parentNode.childNodes,n),n=n.parentNode);var l=document.createRange();l.setStart(e,t),l.setEnd(n,r),i.removeAllRanges(),i.addRange(l)}}else i.removeAllRanges(),this.root.blur(),document.body.focus()}}},{key:"setRange",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:s.default.sources.API;if("string"==typeof t&&(n=t,t=!1),p.info("setRange",e),null!=e){var r=this.rangeToNative(e);this.setNativeRange.apply(this,c(r).concat([t]))}else this.setNativeRange(null);this.update(n)}},{key:"update",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:s.default.sources.USER,t=this.lastRange,n=this.getRange(),o=r(n,2),i=o[0],u=o[1];if(this.lastRange=i,null!=this.lastRange&&(this.savedRange=this.lastRange),!(0,l.default)(t,this.lastRange)){var c;!this.composing&&null!=u&&u.native.collapsed&&u.start.node!==this.cursor.textNode&&this.cursor.restore();var f,p=[s.default.events.SELECTION_CHANGE,(0,a.default)(this.lastRange),(0,a.default)(t),e];(c=this.emitter).emit.apply(c,[s.default.events.EDITOR_CHANGE].concat(p)),e!==s.default.sources.SILENT&&(f=this.emitter).emit.apply(f,p)}}}]),e}();function y(e,t){try{t.parentNode}catch(e){return!1}return t instanceof Text&&(t=t.parentNode),e.contains(t)}t.Range=d,t.default=h},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0},a=n(0);function l(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function s(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var u=function(e){function t(){return l(this,t),s(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),o(t,[{key:"insertInto",value:function(e,n){0===e.children.length?i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"insertInto",this).call(this,e,n):this.remove()}},{key:"length",value:function(){return 0}},{key:"value",value:function(){return""}}],[{key:"value",value:function(){}}]),t}(((r=a)&&r.__esModule?r:{default:r}).default.Embed);u.blotName="break",u.tagName="BR",t.default=u},function(e,t,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=n(44),a=n(30),l=n(1),s=function(e){function t(t){var n=e.call(this,t)||this;return n.build(),n}return o(t,e),t.prototype.appendChild=function(e){this.insertBefore(e)},t.prototype.attach=function(){e.prototype.attach.call(this),this.children.forEach((function(e){e.attach()}))},t.prototype.build=function(){var e=this;this.children=new i.default,[].slice.call(this.domNode.childNodes).reverse().forEach((function(t){try{var n=u(t);e.insertBefore(n,e.children.head||void 0)}catch(e){if(e instanceof l.ParchmentError)return;throw e}}))},t.prototype.deleteAt=function(e,t){if(0===e&&t===this.length())return this.remove();this.children.forEachAt(e,t,(function(e,t,n){e.deleteAt(t,n)}))},t.prototype.descendant=function(e,n){var r=this.children.find(n),o=r[0],i=r[1];return null==e.blotName&&e(o)||null!=e.blotName&&o instanceof e?[o,i]:o instanceof t?o.descendant(e,i):[null,-1]},t.prototype.descendants=function(e,n,r){void 0===n&&(n=0),void 0===r&&(r=Number.MAX_VALUE);var o=[],i=r;return this.children.forEachAt(n,r,(function(n,r,a){(null==e.blotName&&e(n)||null!=e.blotName&&n instanceof e)&&o.push(n),n instanceof t&&(o=o.concat(n.descendants(e,r,i))),i-=a})),o},t.prototype.detach=function(){this.children.forEach((function(e){e.detach()})),e.prototype.detach.call(this)},t.prototype.formatAt=function(e,t,n,r){this.children.forEachAt(e,t,(function(e,t,o){e.formatAt(t,o,n,r)}))},t.prototype.insertAt=function(e,t,n){var r=this.children.find(e),o=r[0],i=r[1];if(o)o.insertAt(i,t,n);else{var a=null==n?l.create("text",t):l.create(t,n);this.appendChild(a)}},t.prototype.insertBefore=function(e,t){if(null!=this.statics.allowedChildren&&!this.statics.allowedChildren.some((function(t){return e instanceof t})))throw new l.ParchmentError("Cannot insert "+e.statics.blotName+" into "+this.statics.blotName);e.insertInto(this,t)},t.prototype.length=function(){return this.children.reduce((function(e,t){return e+t.length()}),0)},t.prototype.moveChildren=function(e,t){this.children.forEach((function(n){e.insertBefore(n,t)}))},t.prototype.optimize=function(t){if(e.prototype.optimize.call(this,t),0===this.children.length)if(null!=this.statics.defaultChild){var n=l.create(this.statics.defaultChild);this.appendChild(n),n.optimize(t)}else this.remove()},t.prototype.path=function(e,n){void 0===n&&(n=!1);var r=this.children.find(e,n),o=r[0],i=r[1],a=[[this,e]];return o instanceof t?a.concat(o.path(i,n)):(null!=o&&a.push([o,i]),a)},t.prototype.removeChild=function(e){this.children.remove(e)},t.prototype.replace=function(n){n instanceof t&&n.moveChildren(this),e.prototype.replace.call(this,n)},t.prototype.split=function(e,t){if(void 0===t&&(t=!1),!t){if(0===e)return this;if(e===this.length())return this.next}var n=this.clone();return this.parent.insertBefore(n,this.next),this.children.forEachAt(e,this.length(),(function(e,r,o){e=e.split(r,t),n.appendChild(e)})),n},t.prototype.unwrap=function(){this.moveChildren(this.parent,this.next),this.remove()},t.prototype.update=function(e,t){var n=this,r=[],o=[];e.forEach((function(e){e.target===n.domNode&&"childList"===e.type&&(r.push.apply(r,e.addedNodes),o.push.apply(o,e.removedNodes))})),o.forEach((function(e){if(!(null!=e.parentNode&&"IFRAME"!==e.tagName&&document.body.compareDocumentPosition(e)&Node.DOCUMENT_POSITION_CONTAINED_BY)){var t=l.find(e);null!=t&&(null!=t.domNode.parentNode&&t.domNode.parentNode!==n.domNode||t.detach())}})),r.filter((function(e){return e.parentNode==n.domNode})).sort((function(e,t){return e===t?0:e.compareDocumentPosition(t)&Node.DOCUMENT_POSITION_FOLLOWING?1:-1})).forEach((function(e){var t=null;null!=e.nextSibling&&(t=l.find(e.nextSibling));var r=u(e);r.next==t&&null!=r.next||(null!=r.parent&&r.parent.removeChild(n),n.insertBefore(r,t||void 0))}))},t}(a.default);function u(e){var t=l.find(e);if(null==t)try{t=l.create(e)}catch(n){t=l.create(l.Scope.INLINE),[].slice.call(e.childNodes).forEach((function(e){t.domNode.appendChild(e)})),e.parentNode&&e.parentNode.replaceChild(t.domNode,e),t.attach()}return t}t.default=s},function(e,t,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=n(12),a=n(31),l=n(17),s=n(1),u=function(e){function t(t){var n=e.call(this,t)||this;return n.attributes=new a.default(n.domNode),n}return o(t,e),t.formats=function(e){return"string"==typeof this.tagName||(Array.isArray(this.tagName)?e.tagName.toLowerCase():void 0)},t.prototype.format=function(e,t){var n=s.query(e);n instanceof i.default?this.attributes.attribute(n,t):t&&(null==n||e===this.statics.blotName&&this.formats()[e]===t||this.replaceWith(e,t))},t.prototype.formats=function(){var e=this.attributes.values(),t=this.statics.formats(this.domNode);return null!=t&&(e[this.statics.blotName]=t),e},t.prototype.replaceWith=function(t,n){var r=e.prototype.replaceWith.call(this,t,n);return this.attributes.copy(r),r},t.prototype.update=function(t,n){var r=this;e.prototype.update.call(this,t,n),t.some((function(e){return e.target===r.domNode&&"attributes"===e.type}))&&this.attributes.build()},t.prototype.wrap=function(n,r){var o=e.prototype.wrap.call(this,n,r);return o instanceof t&&o.statics.scope===this.statics.scope&&this.attributes.move(o),o},t}(l.default);t.default=u},function(e,t,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=n(30),a=n(1),l=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t.value=function(e){return!0},t.prototype.index=function(e,t){return this.domNode===e||this.domNode.compareDocumentPosition(e)&Node.DOCUMENT_POSITION_CONTAINED_BY?Math.min(t,1):-1},t.prototype.position=function(e,t){var n=[].indexOf.call(this.parent.domNode.childNodes,this.domNode);return e>0&&(n+=1),[this.parent.domNode,n]},t.prototype.value=function(){var e;return(e={})[this.statics.blotName]=this.statics.value(this.domNode)||!0,e},t.scope=a.Scope.INLINE_BLOT,t}(i.default);t.default=l},function(e,t,n){var r=n(11),o=n(3),i={attributes:{compose:function(e,t,n){"object"!=typeof e&&(e={}),"object"!=typeof t&&(t={});var r=o(!0,{},t);for(var i in n||(r=Object.keys(r).reduce((function(e,t){return null!=r[t]&&(e[t]=r[t]),e}),{})),e)void 0!==e[i]&&void 0===t[i]&&(r[i]=e[i]);return Object.keys(r).length>0?r:void 0},diff:function(e,t){"object"!=typeof e&&(e={}),"object"!=typeof t&&(t={});var n=Object.keys(e).concat(Object.keys(t)).reduce((function(n,o){return r(e[o],t[o])||(n[o]=void 0===t[o]?null:t[o]),n}),{});return Object.keys(n).length>0?n:void 0},transform:function(e,t,n){if("object"!=typeof e)return t;if("object"==typeof t){if(!n)return t;var r=Object.keys(t).reduce((function(n,r){return void 0===e[r]&&(n[r]=t[r]),n}),{});return Object.keys(r).length>0?r:void 0}}},iterator:function(e){return new a(e)},length:function(e){return"number"==typeof e.delete?e.delete:"number"==typeof e.retain?e.retain:"string"==typeof e.insert?e.insert.length:1}};function a(e){this.ops=e,this.index=0,this.offset=0}a.prototype.hasNext=function(){return this.peekLength()<1/0},a.prototype.next=function(e){e||(e=1/0);var t=this.ops[this.index];if(t){var n=this.offset,r=i.length(t);if(e>=r-n?(e=r-n,this.index+=1,this.offset=0):this.offset+=e,"number"==typeof t.delete)return{delete:e};var o={};return t.attributes&&(o.attributes=t.attributes),"number"==typeof t.retain?o.retain=e:"string"==typeof t.insert?o.insert=t.insert.substr(n,e):o.insert=t.insert,o}return{retain:1/0}},a.prototype.peek=function(){return this.ops[this.index]},a.prototype.peekLength=function(){return this.ops[this.index]?i.length(this.ops[this.index])-this.offset:1/0},a.prototype.peekType=function(){return this.ops[this.index]?"number"==typeof this.ops[this.index].delete?"delete":"number"==typeof this.ops[this.index].retain?"retain":"insert":"retain"},a.prototype.rest=function(){if(this.hasNext()){if(0===this.offset)return this.ops.slice(this.index);var e=this.offset,t=this.index,n=this.next(),r=this.ops.slice(this.index);return this.offset=e,this.index=t,[n].concat(r)}return[]},e.exports=i},function(e,t){var n=function(){"use strict";function e(e,t){return null!=t&&e instanceof t}var t,n,r;try{t=Map}catch(e){t=function(){}}try{n=Set}catch(e){n=function(){}}try{r=Promise}catch(e){r=function(){}}function i(a,s,u,c,f){"object"==typeof s&&(u=s.depth,c=s.prototype,f=s.includeNonEnumerable,s=s.circular);var p=[],d=[],h=void 0!==o;return void 0===s&&(s=!0),void 0===u&&(u=1/0),function a(u,y){if(null===u)return null;if(0===y)return u;var v,m;if("object"!=typeof u)return u;if(e(u,t))v=new t;else if(e(u,n))v=new n;else if(e(u,r))v=new r((function(e,t){u.then((function(t){e(a(t,y-1))}),(function(e){t(a(e,y-1))}))}));else if(i.__isArray(u))v=[];else if(i.__isRegExp(u))v=new RegExp(u.source,l(u)),u.lastIndex&&(v.lastIndex=u.lastIndex);else if(i.__isDate(u))v=new Date(u.getTime());else{if(h&&o.isBuffer(u))return v=o.allocUnsafe?o.allocUnsafe(u.length):new o(u.length),u.copy(v),v;e(u,Error)?v=Object.create(u):void 0===c?(m=Object.getPrototypeOf(u),v=Object.create(m)):(v=Object.create(c),m=c)}if(s){var g=p.indexOf(u);if(-1!=g)return d[g];p.push(u),d.push(v)}for(var b in e(u,t)&&u.forEach((function(e,t){var n=a(t,y-1),r=a(e,y-1);v.set(n,r)})),e(u,n)&&u.forEach((function(e){var t=a(e,y-1);v.add(t)})),u){var _;m&&(_=Object.getOwnPropertyDescriptor(m,b)),_&&null==_.set||(v[b]=a(u[b],y-1))}if(Object.getOwnPropertySymbols){var w=Object.getOwnPropertySymbols(u);for(b=0;b<w.length;b++){var O=w[b];(!(S=Object.getOwnPropertyDescriptor(u,O))||S.enumerable||f)&&(v[O]=a(u[O],y-1),S.enumerable||Object.defineProperty(v,O,{enumerable:!1}))}}if(f){var k=Object.getOwnPropertyNames(u);for(b=0;b<k.length;b++){var S,x=k[b];(S=Object.getOwnPropertyDescriptor(u,x))&&S.enumerable||(v[x]=a(u[x],y-1),Object.defineProperty(v,x,{enumerable:!1}))}}return v}(a,u)}function a(e){return Object.prototype.toString.call(e)}function l(e){var t="";return e.global&&(t+="g"),e.ignoreCase&&(t+="i"),e.multiline&&(t+="m"),t}return i.clonePrototype=function(e){if(null===e)return null;var t=function(){};return t.prototype=e,new t},i.__objToStr=a,i.__isDate=function(e){return"object"==typeof e&&"[object Date]"===a(e)},i.__isArray=function(e){return"object"==typeof e&&"[object Array]"===a(e)},i.__isRegExp=function(e){return"object"==typeof e&&"[object RegExp]"===a(e)},i.__getRegExpFlags=l,i}();"object"==typeof e&&e.exports&&(e.exports=n)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,l=e[Symbol.iterator]();!(r=(a=l.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{!r&&l.return&&l.return()}finally{if(o)throw i}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0},a=d(n(0)),l=d(n(8)),s=n(4),u=d(s),c=d(n(16)),f=d(n(13)),p=d(n(25));function d(e){return e&&e.__esModule?e:{default:e}}function h(e){return e instanceof u.default||e instanceof s.BlockEmbed}var y=function(e){function t(e,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return r.emitter=n.emitter,Array.isArray(n.whitelist)&&(r.whitelist=n.whitelist.reduce((function(e,t){return e[t]=!0,e}),{})),r.domNode.addEventListener("DOMNodeInserted",(function(){})),r.optimize(),r.enable(),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),o(t,[{key:"batchStart",value:function(){this.batch=!0}},{key:"batchEnd",value:function(){this.batch=!1,this.optimize()}},{key:"deleteAt",value:function(e,n){var o=this.line(e),a=r(o,2),l=a[0],u=a[1],p=this.line(e+n),d=r(p,1)[0];if(i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"deleteAt",this).call(this,e,n),null!=d&&l!==d&&u>0){if(l instanceof s.BlockEmbed||d instanceof s.BlockEmbed)return void this.optimize();if(l instanceof f.default){var h=l.newlineIndex(l.length(),!0);if(h>-1&&(l=l.split(h+1))===d)return void this.optimize()}else if(d instanceof f.default){var y=d.newlineIndex(0);y>-1&&d.split(y+1)}var v=d.children.head instanceof c.default?null:d.children.head;l.moveChildren(d,v),l.remove()}this.optimize()}},{key:"enable",value:function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];this.domNode.setAttribute("contenteditable",e)}},{key:"formatAt",value:function(e,n,r,o){(null==this.whitelist||this.whitelist[r])&&(i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"formatAt",this).call(this,e,n,r,o),this.optimize())}},{key:"insertAt",value:function(e,n,r){if(null==r||null==this.whitelist||this.whitelist[n]){if(e>=this.length())if(null==r||null==a.default.query(n,a.default.Scope.BLOCK)){var o=a.default.create(this.statics.defaultChild);this.appendChild(o),null==r&&n.endsWith("\n")&&(n=n.slice(0,-1)),o.insertAt(0,n,r)}else{var l=a.default.create(n,r);this.appendChild(l)}else i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"insertAt",this).call(this,e,n,r);this.optimize()}}},{key:"insertBefore",value:function(e,n){if(e.statics.scope===a.default.Scope.INLINE_BLOT){var r=a.default.create(this.statics.defaultChild);r.appendChild(e),e=r}i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"insertBefore",this).call(this,e,n)}},{key:"leaf",value:function(e){return this.path(e).pop()||[null,-1]}},{key:"line",value:function(e){return e===this.length()?this.line(e-1):this.descendant(h,e)}},{key:"lines",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Number.MAX_VALUE,n=function e(t,n,r){var o=[],i=r;return t.children.forEachAt(n,r,(function(t,n,r){h(t)?o.push(t):t instanceof a.default.Container&&(o=o.concat(e(t,n,i))),i-=r})),o};return n(this,e,t)}},{key:"optimize",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};!0!==this.batch&&(i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"optimize",this).call(this,e,n),e.length>0&&this.emitter.emit(l.default.events.SCROLL_OPTIMIZE,e,n))}},{key:"path",value:function(e){return i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"path",this).call(this,e).slice(1)}},{key:"update",value:function(e){if(!0!==this.batch){var n=l.default.sources.USER;"string"==typeof e&&(n=e),Array.isArray(e)||(e=this.observer.takeRecords()),e.length>0&&this.emitter.emit(l.default.events.SCROLL_BEFORE_UPDATE,n,e),i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"update",this).call(this,e.concat([])),e.length>0&&this.emitter.emit(l.default.events.SCROLL_UPDATE,n,e)}}}]),t}(a.default.Scroll);y.blotName="scroll",y.className="ql-editor",y.tagName="DIV",y.defaultChild="block",y.allowedChildren=[u.default,s.BlockEmbed,p.default],t.default=y},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SHORTKEY=t.default=void 0;var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,l=e[Symbol.iterator]();!(r=(a=l.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{!r&&l.return&&l.return()}finally{if(o)throw i}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=y(n(21)),l=y(n(11)),s=y(n(3)),u=y(n(2)),c=y(n(20)),f=y(n(0)),p=y(n(5)),d=y(n(10)),h=y(n(9));function y(e){return e&&e.__esModule?e:{default:e}}function v(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var m=(0,d.default)("quill:keyboard"),g=/Mac/i.test(navigator.platform)?"metaKey":"ctrlKey",b=function(e){function t(e,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));return r.bindings={},Object.keys(r.options.bindings).forEach((function(t){("list autofill"!==t||null==e.scroll.whitelist||e.scroll.whitelist.list)&&r.options.bindings[t]&&r.addBinding(r.options.bindings[t])})),r.addBinding({key:t.keys.ENTER,shiftKey:null},S),r.addBinding({key:t.keys.ENTER,metaKey:null,ctrlKey:null,altKey:null},(function(){})),/Firefox/i.test(navigator.userAgent)?(r.addBinding({key:t.keys.BACKSPACE},{collapsed:!0},w),r.addBinding({key:t.keys.DELETE},{collapsed:!0},O)):(r.addBinding({key:t.keys.BACKSPACE},{collapsed:!0,prefix:/^.?$/},w),r.addBinding({key:t.keys.DELETE},{collapsed:!0,suffix:/^.?$/},O)),r.addBinding({key:t.keys.BACKSPACE},{collapsed:!1},k),r.addBinding({key:t.keys.DELETE},{collapsed:!1},k),r.addBinding({key:t.keys.BACKSPACE,altKey:null,ctrlKey:null,metaKey:null,shiftKey:null},{collapsed:!0,offset:0},w),r.listen(),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),i(t,null,[{key:"match",value:function(e,t){return t=j(t),!["altKey","ctrlKey","metaKey","shiftKey"].some((function(n){return!!t[n]!==e[n]&&null!==t[n]}))&&t.key===(e.which||e.keyCode)}}]),i(t,[{key:"addBinding",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=j(e);if(null==r||null==r.key)return m.warn("Attempted to add invalid keyboard binding",r);"function"==typeof t&&(t={handler:t}),"function"==typeof n&&(n={handler:n}),r=(0,s.default)(r,t,n),this.bindings[r.key]=this.bindings[r.key]||[],this.bindings[r.key].push(r)}},{key:"listen",value:function(){var e=this;this.quill.root.addEventListener("keydown",(function(n){if(!n.defaultPrevented){var i=n.which||n.keyCode,a=(e.bindings[i]||[]).filter((function(e){return t.match(n,e)}));if(0!==a.length){var s=e.quill.getSelection();if(null!=s&&e.quill.hasFocus()){var u=e.quill.getLine(s.index),c=o(u,2),p=c[0],d=c[1],h=e.quill.getLeaf(s.index),y=o(h,2),v=y[0],m=y[1],g=0===s.length?[v,m]:e.quill.getLeaf(s.index+s.length),b=o(g,2),_=b[0],w=b[1],O=v instanceof f.default.Text?v.value().slice(0,m):"",k=_ instanceof f.default.Text?_.value().slice(w):"",S={collapsed:0===s.length,empty:0===s.length&&p.length()<=1,format:e.quill.getFormat(s),offset:d,prefix:O,suffix:k};a.some((function(t){if(null!=t.collapsed&&t.collapsed!==S.collapsed)return!1;if(null!=t.empty&&t.empty!==S.empty)return!1;if(null!=t.offset&&t.offset!==S.offset)return!1;if(Array.isArray(t.format)){if(t.format.every((function(e){return null==S.format[e]})))return!1}else if("object"===r(t.format)&&!Object.keys(t.format).every((function(e){return!0===t.format[e]?null!=S.format[e]:!1===t.format[e]?null==S.format[e]:(0,l.default)(t.format[e],S.format[e])})))return!1;return!(null!=t.prefix&&!t.prefix.test(S.prefix)||null!=t.suffix&&!t.suffix.test(S.suffix)||!0===t.handler.call(e,s,S))}))&&n.preventDefault()}}}}))}}]),t}(h.default);function _(e,t){var n,r=e===b.keys.LEFT?"prefix":"suffix";return v(n={key:e,shiftKey:t,altKey:null},r,/^$/),v(n,"handler",(function(n){var r=n.index;e===b.keys.RIGHT&&(r+=n.length+1);var i=this.quill.getLeaf(r);return!(o(i,1)[0]instanceof f.default.Embed&&(e===b.keys.LEFT?t?this.quill.setSelection(n.index-1,n.length+1,p.default.sources.USER):this.quill.setSelection(n.index-1,p.default.sources.USER):t?this.quill.setSelection(n.index,n.length+1,p.default.sources.USER):this.quill.setSelection(n.index+n.length+1,p.default.sources.USER),1))})),n}function w(e,t){if(!(0===e.index||this.quill.getLength()<=1)){var n=this.quill.getLine(e.index),r=o(n,1)[0],i={};if(0===t.offset){var a=this.quill.getLine(e.index-1),l=o(a,1)[0];if(null!=l&&l.length()>1){var s=r.formats(),u=this.quill.getFormat(e.index-1,1);i=c.default.attributes.diff(s,u)||{}}}var f=/[\uD800-\uDBFF][\uDC00-\uDFFF]$/.test(t.prefix)?2:1;this.quill.deleteText(e.index-f,f,p.default.sources.USER),Object.keys(i).length>0&&this.quill.formatLine(e.index-f,f,i,p.default.sources.USER),this.quill.focus()}}function O(e,t){var n=/^[\uD800-\uDBFF][\uDC00-\uDFFF]/.test(t.suffix)?2:1;if(!(e.index>=this.quill.getLength()-n)){var r={},i=0,a=this.quill.getLine(e.index),l=o(a,1)[0];if(t.offset>=l.length()-1){var s=this.quill.getLine(e.index+1),u=o(s,1)[0];if(u){var f=l.formats(),d=this.quill.getFormat(e.index,1);r=c.default.attributes.diff(f,d)||{},i=u.length()}}this.quill.deleteText(e.index,n,p.default.sources.USER),Object.keys(r).length>0&&this.quill.formatLine(e.index+i-1,n,r,p.default.sources.USER)}}function k(e){var t=this.quill.getLines(e),n={};if(t.length>1){var r=t[0].formats(),o=t[t.length-1].formats();n=c.default.attributes.diff(o,r)||{}}this.quill.deleteText(e,p.default.sources.USER),Object.keys(n).length>0&&this.quill.formatLine(e.index,1,n,p.default.sources.USER),this.quill.setSelection(e.index,p.default.sources.SILENT),this.quill.focus()}function S(e,t){var n=this;e.length>0&&this.quill.scroll.deleteAt(e.index,e.length);var r=Object.keys(t.format).reduce((function(e,n){return f.default.query(n,f.default.Scope.BLOCK)&&!Array.isArray(t.format[n])&&(e[n]=t.format[n]),e}),{});this.quill.insertText(e.index,"\n",r,p.default.sources.USER),this.quill.setSelection(e.index+1,p.default.sources.SILENT),this.quill.focus(),Object.keys(t.format).forEach((function(e){null==r[e]&&(Array.isArray(t.format[e])||"link"!==e&&n.quill.format(e,t.format[e],p.default.sources.USER))}))}function x(e){return{key:b.keys.TAB,shiftKey:!e,format:{"code-block":!0},handler:function(t){var n=f.default.query("code-block"),r=t.index,i=t.length,a=this.quill.scroll.descendant(n,r),l=o(a,2),s=l[0],u=l[1];if(null!=s){var c=this.quill.getIndex(s),d=s.newlineIndex(u,!0)+1,h=s.newlineIndex(c+u+i),y=s.domNode.textContent.slice(d,h).split("\n");u=0,y.forEach((function(t,o){e?(s.insertAt(d+u,n.TAB),u+=n.TAB.length,0===o?r+=n.TAB.length:i+=n.TAB.length):t.startsWith(n.TAB)&&(s.deleteAt(d+u,n.TAB.length),u-=n.TAB.length,0===o?r-=n.TAB.length:i-=n.TAB.length),u+=t.length+1})),this.quill.update(p.default.sources.USER),this.quill.setSelection(r,i,p.default.sources.SILENT)}}}}function E(e){return{key:e[0].toUpperCase(),shortKey:!0,handler:function(t,n){this.quill.format(e,!n.format[e],p.default.sources.USER)}}}function j(e){if("string"==typeof e||"number"==typeof e)return j({key:e});if("object"===(void 0===e?"undefined":r(e))&&(e=(0,a.default)(e,!1)),"string"==typeof e.key)if(null!=b.keys[e.key.toUpperCase()])e.key=b.keys[e.key.toUpperCase()];else{if(1!==e.key.length)return null;e.key=e.key.toUpperCase().charCodeAt(0)}return e.shortKey&&(e[g]=e.shortKey,delete e.shortKey),e}b.keys={BACKSPACE:8,TAB:9,ENTER:13,ESCAPE:27,LEFT:37,UP:38,RIGHT:39,DOWN:40,DELETE:46},b.DEFAULTS={bindings:{bold:E("bold"),italic:E("italic"),underline:E("underline"),indent:{key:b.keys.TAB,format:["blockquote","indent","list"],handler:function(e,t){if(t.collapsed&&0!==t.offset)return!0;this.quill.format("indent","+1",p.default.sources.USER)}},outdent:{key:b.keys.TAB,shiftKey:!0,format:["blockquote","indent","list"],handler:function(e,t){if(t.collapsed&&0!==t.offset)return!0;this.quill.format("indent","-1",p.default.sources.USER)}},"outdent backspace":{key:b.keys.BACKSPACE,collapsed:!0,shiftKey:null,metaKey:null,ctrlKey:null,altKey:null,format:["indent","list"],offset:0,handler:function(e,t){null!=t.format.indent?this.quill.format("indent","-1",p.default.sources.USER):null!=t.format.list&&this.quill.format("list",!1,p.default.sources.USER)}},"indent code-block":x(!0),"outdent code-block":x(!1),"remove tab":{key:b.keys.TAB,shiftKey:!0,collapsed:!0,prefix:/\t$/,handler:function(e){this.quill.deleteText(e.index-1,1,p.default.sources.USER)}},tab:{key:b.keys.TAB,handler:function(e){this.quill.history.cutoff();var t=(new u.default).retain(e.index).delete(e.length).insert("\t");this.quill.updateContents(t,p.default.sources.USER),this.quill.history.cutoff(),this.quill.setSelection(e.index+1,p.default.sources.SILENT)}},"list empty enter":{key:b.keys.ENTER,collapsed:!0,format:["list"],empty:!0,handler:function(e,t){this.quill.format("list",!1,p.default.sources.USER),t.format.indent&&this.quill.format("indent",!1,p.default.sources.USER)}},"checklist enter":{key:b.keys.ENTER,collapsed:!0,format:{list:"checked"},handler:function(e){var t=this.quill.getLine(e.index),n=o(t,2),r=n[0],i=n[1],a=(0,s.default)({},r.formats(),{list:"checked"}),l=(new u.default).retain(e.index).insert("\n",a).retain(r.length()-i-1).retain(1,{list:"unchecked"});this.quill.updateContents(l,p.default.sources.USER),this.quill.setSelection(e.index+1,p.default.sources.SILENT),this.quill.scrollIntoView()}},"header enter":{key:b.keys.ENTER,collapsed:!0,format:["header"],suffix:/^$/,handler:function(e,t){var n=this.quill.getLine(e.index),r=o(n,2),i=r[0],a=r[1],l=(new u.default).retain(e.index).insert("\n",t.format).retain(i.length()-a-1).retain(1,{header:null});this.quill.updateContents(l,p.default.sources.USER),this.quill.setSelection(e.index+1,p.default.sources.SILENT),this.quill.scrollIntoView()}},"list autofill":{key:" ",collapsed:!0,format:{list:!1},prefix:/^\s*?(\d+\.|-|\*|\[ ?\]|\[x\])$/,handler:function(e,t){var n=t.prefix.length,r=this.quill.getLine(e.index),i=o(r,2),a=i[0],l=i[1];if(l>n)return!0;var s=void 0;switch(t.prefix.trim()){case"[]":case"[ ]":s="unchecked";break;case"[x]":s="checked";break;case"-":case"*":s="bullet";break;default:s="ordered"}this.quill.insertText(e.index," ",p.default.sources.USER),this.quill.history.cutoff();var c=(new u.default).retain(e.index-l).delete(n+1).retain(a.length()-2-l).retain(1,{list:s});this.quill.updateContents(c,p.default.sources.USER),this.quill.history.cutoff(),this.quill.setSelection(e.index-n,p.default.sources.SILENT)}},"code exit":{key:b.keys.ENTER,collapsed:!0,format:["code-block"],prefix:/\n\n$/,suffix:/^\s+$/,handler:function(e){var t=this.quill.getLine(e.index),n=o(t,2),r=n[0],i=n[1],a=(new u.default).retain(e.index+r.length()-i-2).retain(1,{"code-block":null}).delete(1);this.quill.updateContents(a,p.default.sources.USER)}},"embed left":_(b.keys.LEFT,!1),"embed left shift":_(b.keys.LEFT,!0),"embed right":_(b.keys.RIGHT,!1),"embed right shift":_(b.keys.RIGHT,!0)}},t.default=b,t.SHORTKEY=g},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,l=e[Symbol.iterator]();!(r=(a=l.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{!r&&l.return&&l.return()}finally{if(o)throw i}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")},o=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=s(n(0)),l=s(n(7));function s(e){return e&&e.__esModule?e:{default:e}}var u=function(e){function t(e,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return r.selection=n,r.textNode=document.createTextNode(t.CONTENTS),r.domNode.appendChild(r.textNode),r._length=0,r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),i(t,null,[{key:"value",value:function(){}}]),i(t,[{key:"detach",value:function(){null!=this.parent&&this.parent.removeChild(this)}},{key:"format",value:function(e,n){if(0!==this._length)return o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"format",this).call(this,e,n);for(var r=this,i=0;null!=r&&r.statics.scope!==a.default.Scope.BLOCK_BLOT;)i+=r.offset(r.parent),r=r.parent;null!=r&&(this._length=t.CONTENTS.length,r.optimize(),r.formatAt(i,t.CONTENTS.length,e,n),this._length=0)}},{key:"index",value:function(e,n){return e===this.textNode?0:o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"index",this).call(this,e,n)}},{key:"length",value:function(){return this._length}},{key:"position",value:function(){return[this.textNode,this.textNode.data.length]}},{key:"remove",value:function(){o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"remove",this).call(this),this.parent=null}},{key:"restore",value:function(){if(!this.selection.composing&&null!=this.parent){var e=this.textNode,n=this.selection.getNativeRange(),o=void 0,i=void 0,s=void 0;if(null!=n&&n.start.node===e&&n.end.node===e){var u=[e,n.start.offset,n.end.offset];o=u[0],i=u[1],s=u[2]}for(;null!=this.domNode.lastChild&&this.domNode.lastChild!==this.textNode;)this.domNode.parentNode.insertBefore(this.domNode.lastChild,this.domNode);if(this.textNode.data!==t.CONTENTS){var c=this.textNode.data.split(t.CONTENTS).join("");this.next instanceof l.default?(o=this.next.domNode,this.next.insertAt(0,c),this.textNode.data=t.CONTENTS):(this.textNode.data=c,this.parent.insertBefore(a.default.create(this.textNode),this),this.textNode=document.createTextNode(t.CONTENTS),this.domNode.appendChild(this.textNode))}if(this.remove(),null!=i){var f=[i,s].map((function(e){return Math.max(0,Math.min(o.data.length,e-1))})),p=r(f,2);return i=p[0],s=p[1],{startNode:o,startOffset:i,endNode:o,endOffset:s}}}}},{key:"update",value:function(e,t){var n=this;if(e.some((function(e){return"characterData"===e.type&&e.target===n.textNode}))){var r=this.restore();r&&(t.range=r)}}},{key:"value",value:function(){return""}}]),t}(a.default.Embed);u.blotName="cursor",u.className="ql-cursor",u.tagName="span",u.CONTENTS="\ufeff",t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(0)),o=n(4),i=a(o);function a(e){return e&&e.__esModule?e:{default:e}}function l(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function s(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var u=function(e){function t(){return l(this,t),s(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t}(r.default.Container);u.allowedChildren=[i.default,o.BlockEmbed,u],t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ColorStyle=t.ColorClass=t.ColorAttributor=void 0;var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0},a=n(0),l=(r=a)&&r.__esModule?r:{default:r};function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var c=function(e){function t(){return s(this,t),u(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),o(t,[{key:"value",value:function(e){var n=i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"value",this).call(this,e);return n.startsWith("rgb(")?(n=n.replace(/^[^\d]+/,"").replace(/[^\d]+$/,""),"#"+n.split(",").map((function(e){return("00"+parseInt(e).toString(16)).slice(-2)})).join("")):n}}]),t}(l.default.Attributor.Style),f=new l.default.Attributor.Class("color","ql-color",{scope:l.default.Scope.INLINE}),p=new c("color","color",{scope:l.default.Scope.INLINE});t.ColorAttributor=c,t.ColorClass=f,t.ColorStyle=p},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.sanitize=t.default=void 0;var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0},a=n(6);function l(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function s(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var u=function(e){function t(){return l(this,t),s(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),o(t,[{key:"format",value:function(e,n){if(e!==this.statics.blotName||!n)return i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"format",this).call(this,e,n);n=this.constructor.sanitize(n),this.domNode.setAttribute("href",n)}}],[{key:"create",value:function(e){var n=i(t.__proto__||Object.getPrototypeOf(t),"create",this).call(this,e);return e=this.sanitize(e),n.setAttribute("href",e),n.setAttribute("rel","noopener noreferrer"),n.setAttribute("target","_blank"),n}},{key:"formats",value:function(e){return e.getAttribute("href")}},{key:"sanitize",value:function(e){return c(e,this.PROTOCOL_WHITELIST)?e:this.SANITIZED_URL}}]),t}(((r=a)&&r.__esModule?r:{default:r}).default);function c(e,t){var n=document.createElement("a");n.href=e;var r=n.href.slice(0,n.href.indexOf(":"));return t.indexOf(r)>-1}u.blotName="link",u.tagName="A",u.SANITIZED_URL="about:blank",u.PROTOCOL_WHITELIST=["http","https","mailto","tel"],t.default=u,t.sanitize=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=l(n(23)),a=l(n(107));function l(e){return e&&e.__esModule?e:{default:e}}var s=0;function u(e,t){e.setAttribute(t,!("true"===e.getAttribute(t)))}var c=function(){function e(t){var n=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.select=t,this.container=document.createElement("span"),this.buildPicker(),this.select.style.display="none",this.select.parentNode.insertBefore(this.container,this.select),this.label.addEventListener("mousedown",(function(){n.togglePicker()})),this.label.addEventListener("keydown",(function(e){switch(e.keyCode){case i.default.keys.ENTER:n.togglePicker();break;case i.default.keys.ESCAPE:n.escape(),e.preventDefault()}})),this.select.addEventListener("change",this.update.bind(this))}return o(e,[{key:"togglePicker",value:function(){this.container.classList.toggle("ql-expanded"),u(this.label,"aria-expanded"),u(this.options,"aria-hidden")}},{key:"buildItem",value:function(e){var t=this,n=document.createElement("span");return n.tabIndex="0",n.setAttribute("role","button"),n.classList.add("ql-picker-item"),e.hasAttribute("value")&&n.setAttribute("data-value",e.getAttribute("value")),e.textContent&&n.setAttribute("data-label",e.textContent),n.addEventListener("click",(function(){t.selectItem(n,!0)})),n.addEventListener("keydown",(function(e){switch(e.keyCode){case i.default.keys.ENTER:t.selectItem(n,!0),e.preventDefault();break;case i.default.keys.ESCAPE:t.escape(),e.preventDefault()}})),n}},{key:"buildLabel",value:function(){var e=document.createElement("span");return e.classList.add("ql-picker-label"),e.innerHTML=a.default,e.tabIndex="0",e.setAttribute("role","button"),e.setAttribute("aria-expanded","false"),this.container.appendChild(e),e}},{key:"buildOptions",value:function(){var e=this,t=document.createElement("span");t.classList.add("ql-picker-options"),t.setAttribute("aria-hidden","true"),t.tabIndex="-1",t.id="ql-picker-options-"+s,s+=1,this.label.setAttribute("aria-controls",t.id),this.options=t,[].slice.call(this.select.options).forEach((function(n){var r=e.buildItem(n);t.appendChild(r),!0===n.selected&&e.selectItem(r)})),this.container.appendChild(t)}},{key:"buildPicker",value:function(){var e=this;[].slice.call(this.select.attributes).forEach((function(t){e.container.setAttribute(t.name,t.value)})),this.container.classList.add("ql-picker"),this.label=this.buildLabel(),this.buildOptions()}},{key:"escape",value:function(){var e=this;this.close(),setTimeout((function(){return e.label.focus()}),1)}},{key:"close",value:function(){this.container.classList.remove("ql-expanded"),this.label.setAttribute("aria-expanded","false"),this.options.setAttribute("aria-hidden","true")}},{key:"selectItem",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=this.container.querySelector(".ql-selected");if(e!==n&&(null!=n&&n.classList.remove("ql-selected"),null!=e&&(e.classList.add("ql-selected"),this.select.selectedIndex=[].indexOf.call(e.parentNode.children,e),e.hasAttribute("data-value")?this.label.setAttribute("data-value",e.getAttribute("data-value")):this.label.removeAttribute("data-value"),e.hasAttribute("data-label")?this.label.setAttribute("data-label",e.getAttribute("data-label")):this.label.removeAttribute("data-label"),t))){if("function"==typeof Event)this.select.dispatchEvent(new Event("change"));else if("object"===("undefined"==typeof Event?"undefined":r(Event))){var o=document.createEvent("Event");o.initEvent("change",!0,!0),this.select.dispatchEvent(o)}this.close()}}},{key:"update",value:function(){var e=void 0;if(this.select.selectedIndex>-1){var t=this.container.querySelector(".ql-picker-options").children[this.select.selectedIndex];e=this.select.options[this.select.selectedIndex],this.selectItem(t)}else this.selectItem(null);var n=null!=e&&e!==this.select.querySelector("option[selected]");this.label.classList.toggle("ql-active",n)}}]),e}();t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=m(n(0)),o=m(n(5)),i=n(4),a=m(i),l=m(n(16)),s=m(n(25)),u=m(n(24)),c=m(n(35)),f=m(n(6)),p=m(n(22)),d=m(n(7)),h=m(n(55)),y=m(n(42)),v=m(n(23));function m(e){return e&&e.__esModule?e:{default:e}}o.default.register({"blots/block":a.default,"blots/block/embed":i.BlockEmbed,"blots/break":l.default,"blots/container":s.default,"blots/cursor":u.default,"blots/embed":c.default,"blots/inline":f.default,"blots/scroll":p.default,"blots/text":d.default,"modules/clipboard":h.default,"modules/history":y.default,"modules/keyboard":v.default}),r.default.register(a.default,l.default,u.default,f.default,p.default,d.default),t.default=o.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o=function(){function e(e){this.domNode=e,this.domNode[r.DATA_KEY]={blot:this}}return Object.defineProperty(e.prototype,"statics",{get:function(){return this.constructor},enumerable:!0,configurable:!0}),e.create=function(e){if(null==this.tagName)throw new r.ParchmentError("Blot definition missing tagName");var t;return Array.isArray(this.tagName)?("string"==typeof e&&(e=e.toUpperCase(),parseInt(e).toString()===e&&(e=parseInt(e))),t="number"==typeof e?document.createElement(this.tagName[e-1]):this.tagName.indexOf(e)>-1?document.createElement(e):document.createElement(this.tagName[0])):t=document.createElement(this.tagName),this.className&&t.classList.add(this.className),t},e.prototype.attach=function(){null!=this.parent&&(this.scroll=this.parent.scroll)},e.prototype.clone=function(){var e=this.domNode.cloneNode(!1);return r.create(e)},e.prototype.detach=function(){null!=this.parent&&this.parent.removeChild(this),delete this.domNode[r.DATA_KEY]},e.prototype.deleteAt=function(e,t){this.isolate(e,t).remove()},e.prototype.formatAt=function(e,t,n,o){var i=this.isolate(e,t);if(null!=r.query(n,r.Scope.BLOT)&&o)i.wrap(n,o);else if(null!=r.query(n,r.Scope.ATTRIBUTE)){var a=r.create(this.statics.scope);i.wrap(a),a.format(n,o)}},e.prototype.insertAt=function(e,t,n){var o=null==n?r.create("text",t):r.create(t,n),i=this.split(e);this.parent.insertBefore(o,i)},e.prototype.insertInto=function(e,t){void 0===t&&(t=null),null!=this.parent&&this.parent.children.remove(this);var n=null;e.children.insertBefore(this,t),null!=t&&(n=t.domNode),this.domNode.parentNode==e.domNode&&this.domNode.nextSibling==n||e.domNode.insertBefore(this.domNode,n),this.parent=e,this.attach()},e.prototype.isolate=function(e,t){var n=this.split(e);return n.split(t),n},e.prototype.length=function(){return 1},e.prototype.offset=function(e){return void 0===e&&(e=this.parent),null==this.parent||this==e?0:this.parent.children.offset(this)+this.parent.offset(e)},e.prototype.optimize=function(e){null!=this.domNode[r.DATA_KEY]&&delete this.domNode[r.DATA_KEY].mutations},e.prototype.remove=function(){null!=this.domNode.parentNode&&this.domNode.parentNode.removeChild(this.domNode),this.detach()},e.prototype.replace=function(e){null!=e.parent&&(e.parent.insertBefore(this,e.next),e.remove())},e.prototype.replaceWith=function(e,t){var n="string"==typeof e?r.create(e,t):e;return n.replace(this),n},e.prototype.split=function(e,t){return 0===e?this:this.next},e.prototype.update=function(e,t){},e.prototype.wrap=function(e,t){var n="string"==typeof e?r.create(e,t):e;return null!=this.parent&&this.parent.insertBefore(n,this.next),n.appendChild(this),n},e.blotName="abstract",e}();t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(12),o=n(32),i=n(33),a=n(1),l=function(){function e(e){this.attributes={},this.domNode=e,this.build()}return e.prototype.attribute=function(e,t){t?e.add(this.domNode,t)&&(null!=e.value(this.domNode)?this.attributes[e.attrName]=e:delete this.attributes[e.attrName]):(e.remove(this.domNode),delete this.attributes[e.attrName])},e.prototype.build=function(){var e=this;this.attributes={};var t=r.default.keys(this.domNode),n=o.default.keys(this.domNode),l=i.default.keys(this.domNode);t.concat(n).concat(l).forEach((function(t){var n=a.query(t,a.Scope.ATTRIBUTE);n instanceof r.default&&(e.attributes[n.attrName]=n)}))},e.prototype.copy=function(e){var t=this;Object.keys(this.attributes).forEach((function(n){var r=t.attributes[n].value(t.domNode);e.format(n,r)}))},e.prototype.move=function(e){var t=this;this.copy(e),Object.keys(this.attributes).forEach((function(e){t.attributes[e].remove(t.domNode)})),this.attributes={}},e.prototype.values=function(){var e=this;return Object.keys(this.attributes).reduce((function(t,n){return t[n]=e.attributes[n].value(e.domNode),t}),{})},e}();t.default=l},function(e,t,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});function i(e,t){return(e.getAttribute("class")||"").split(/\s+/).filter((function(e){return 0===e.indexOf(t+"-")}))}Object.defineProperty(t,"__esModule",{value:!0});var a=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t.keys=function(e){return(e.getAttribute("class")||"").split(/\s+/).map((function(e){return e.split("-").slice(0,-1).join("-")}))},t.prototype.add=function(e,t){return!!this.canAdd(e,t)&&(this.remove(e),e.classList.add(this.keyName+"-"+t),!0)},t.prototype.remove=function(e){i(e,this.keyName).forEach((function(t){e.classList.remove(t)})),0===e.classList.length&&e.removeAttribute("class")},t.prototype.value=function(e){var t=(i(e,this.keyName)[0]||"").slice(this.keyName.length+1);return this.canAdd(e,t)?t:""},t}(n(12).default);t.default=a},function(e,t,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});function i(e){var t=e.split("-"),n=t.slice(1).map((function(e){return e[0].toUpperCase()+e.slice(1)})).join("");return t[0]+n}Object.defineProperty(t,"__esModule",{value:!0});var a=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t.keys=function(e){return(e.getAttribute("style")||"").split(";").map((function(e){return e.split(":")[0].trim()}))},t.prototype.add=function(e,t){return!!this.canAdd(e,t)&&(e.style[i(this.keyName)]=t,!0)},t.prototype.remove=function(e){e.style[i(this.keyName)]="",e.getAttribute("style")||e.removeAttribute("style")},t.prototype.value=function(e){var t=e.style[i(this.keyName)];return this.canAdd(e,t)?t:""},t}(n(12).default);t.default=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.quill=t,this.options=n,this.modules={}}return r(e,[{key:"init",value:function(){var e=this;Object.keys(this.options.modules).forEach((function(t){null==e.modules[t]&&e.addModule(t)}))}},{key:"addModule",value:function(e){var t=this.quill.constructor.import("modules/"+e);return this.modules[e]=new t(this.quill,this.options.modules[e]||{}),this.modules[e]}}]),e}();o.DEFAULTS={modules:{}},o.themes={default:o},t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0},i=l(n(0)),a=l(n(7));function l(e){return e&&e.__esModule?e:{default:e}}var s="\ufeff",u=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.contentNode=document.createElement("span"),n.contentNode.setAttribute("contenteditable",!1),[].slice.call(n.domNode.childNodes).forEach((function(e){n.contentNode.appendChild(e)})),n.leftGuard=document.createTextNode(s),n.rightGuard=document.createTextNode(s),n.domNode.appendChild(n.leftGuard),n.domNode.appendChild(n.contentNode),n.domNode.appendChild(n.rightGuard),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),r(t,[{key:"index",value:function(e,n){return e===this.leftGuard?0:e===this.rightGuard?1:o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"index",this).call(this,e,n)}},{key:"restore",value:function(e){var t=void 0,n=void 0,r=e.data.split(s).join("");if(e===this.leftGuard)if(this.prev instanceof a.default){var o=this.prev.length();this.prev.insertAt(o,r),t={startNode:this.prev.domNode,startOffset:o+r.length}}else n=document.createTextNode(r),this.parent.insertBefore(i.default.create(n),this),t={startNode:n,startOffset:r.length};else e===this.rightGuard&&(this.next instanceof a.default?(this.next.insertAt(0,r),t={startNode:this.next.domNode,startOffset:r.length}):(n=document.createTextNode(r),this.parent.insertBefore(i.default.create(n),this.next),t={startNode:n,startOffset:r.length}));return e.data=s,t}},{key:"update",value:function(e,t){var n=this;e.forEach((function(e){if("characterData"===e.type&&(e.target===n.leftGuard||e.target===n.rightGuard)){var r=n.restore(e.target);r&&(t.range=r)}}))}}]),t}(i.default.Embed);t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.AlignStyle=t.AlignClass=t.AlignAttribute=void 0;var r,o=n(0),i=(r=o)&&r.__esModule?r:{default:r},a={scope:i.default.Scope.BLOCK,whitelist:["right","center","justify"]},l=new i.default.Attributor.Attribute("align","align",a),s=new i.default.Attributor.Class("align","ql-align",a),u=new i.default.Attributor.Style("align","text-align",a);t.AlignAttribute=l,t.AlignClass=s,t.AlignStyle=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BackgroundStyle=t.BackgroundClass=void 0;var r,o=n(0),i=(r=o)&&r.__esModule?r:{default:r},a=n(26),l=new i.default.Attributor.Class("background","ql-bg",{scope:i.default.Scope.INLINE}),s=new a.ColorAttributor("background","background-color",{scope:i.default.Scope.INLINE});t.BackgroundClass=l,t.BackgroundStyle=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DirectionStyle=t.DirectionClass=t.DirectionAttribute=void 0;var r,o=n(0),i=(r=o)&&r.__esModule?r:{default:r},a={scope:i.default.Scope.BLOCK,whitelist:["rtl"]},l=new i.default.Attributor.Attribute("direction","dir",a),s=new i.default.Attributor.Class("direction","ql-direction",a),u=new i.default.Attributor.Style("direction","direction",a);t.DirectionAttribute=l,t.DirectionClass=s,t.DirectionStyle=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FontClass=t.FontStyle=void 0;var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0},a=n(0),l=(r=a)&&r.__esModule?r:{default:r};function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var c={scope:l.default.Scope.INLINE,whitelist:["serif","monospace"]},f=new l.default.Attributor.Class("font","ql-font",c),p=function(e){function t(){return s(this,t),u(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),o(t,[{key:"value",value:function(e){return i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"value",this).call(this,e).replace(/["']/g,"")}}]),t}(l.default.Attributor.Style),d=new p("font","font-family",c);t.FontStyle=d,t.FontClass=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SizeStyle=t.SizeClass=void 0;var r,o=n(0),i=(r=o)&&r.__esModule?r:{default:r},a=new i.default.Attributor.Class("size","ql-size",{scope:i.default.Scope.INLINE,whitelist:["small","large","huge"]}),l=new i.default.Attributor.Style("size","font-size",{scope:i.default.Scope.INLINE,whitelist:["10px","18px","32px"]});t.SizeClass=a,t.SizeStyle=l},function(e,t,n){"use strict";e.exports={align:{"":n(76),center:n(77),right:n(78),justify:n(79)},background:n(80),blockquote:n(81),bold:n(82),clean:n(83),code:n(58),"code-block":n(58),color:n(84),direction:{"":n(85),rtl:n(86)},float:{center:n(87),full:n(88),left:n(89),right:n(90)},formula:n(91),header:{1:n(92),2:n(93)},italic:n(94),image:n(95),indent:{"+1":n(96),"-1":n(97)},link:n(98),list:{ordered:n(99),bullet:n(100),check:n(101)},script:{sub:n(102),super:n(103)},strike:n(104),underline:n(105),video:n(106)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getLastChangeIndex=t.default=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=a(n(0)),i=a(n(5));function a(e){return e&&e.__esModule?e:{default:e}}var l=function(e){function t(e,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));return r.lastRecorded=0,r.ignoreChange=!1,r.clear(),r.quill.on(i.default.events.EDITOR_CHANGE,(function(e,t,n,o){e!==i.default.events.TEXT_CHANGE||r.ignoreChange||(r.options.userOnly&&o!==i.default.sources.USER?r.transform(t):r.record(t,n))})),r.quill.keyboard.addBinding({key:"Z",shortKey:!0},r.undo.bind(r)),r.quill.keyboard.addBinding({key:"Z",shortKey:!0,shiftKey:!0},r.redo.bind(r)),/Win/i.test(navigator.platform)&&r.quill.keyboard.addBinding({key:"Y",shortKey:!0},r.redo.bind(r)),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),r(t,[{key:"change",value:function(e,t){if(0!==this.stack[e].length){var n=this.stack[e].pop();this.stack[t].push(n),this.lastRecorded=0,this.ignoreChange=!0,this.quill.updateContents(n[e],i.default.sources.USER),this.ignoreChange=!1;var r=s(n[e]);this.quill.setSelection(r)}}},{key:"clear",value:function(){this.stack={undo:[],redo:[]}}},{key:"cutoff",value:function(){this.lastRecorded=0}},{key:"record",value:function(e,t){if(0!==e.ops.length){this.stack.redo=[];var n=this.quill.getContents().diff(t),r=Date.now();if(this.lastRecorded+this.options.delay>r&&this.stack.undo.length>0){var o=this.stack.undo.pop();n=n.compose(o.undo),e=o.redo.compose(e)}else this.lastRecorded=r;this.stack.undo.push({redo:e,undo:n}),this.stack.undo.length>this.options.maxStack&&this.stack.undo.shift()}}},{key:"redo",value:function(){this.change("redo","undo")}},{key:"transform",value:function(e){this.stack.undo.forEach((function(t){t.undo=e.transform(t.undo,!0),t.redo=e.transform(t.redo,!0)})),this.stack.redo.forEach((function(t){t.undo=e.transform(t.undo,!0),t.redo=e.transform(t.redo,!0)}))}},{key:"undo",value:function(){this.change("undo","redo")}}]),t}(a(n(9)).default);function s(e){var t=e.reduce((function(e,t){return e+=t.delete||0}),0),n=e.length()-t;return function(e){var t=e.ops[e.ops.length-1];return null!=t&&(null!=t.insert?"string"==typeof t.insert&&t.insert.endsWith("\n"):null!=t.attributes&&Object.keys(t.attributes).some((function(e){return null!=o.default.query(e,o.default.Scope.BLOCK)})))}(e)&&(n-=1),n}l.DEFAULTS={delay:1e3,maxStack:100,userOnly:!1},t.default=l,t.getLastChangeIndex=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.BaseTooltip=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0},i=h(n(3)),a=h(n(2)),l=h(n(8)),s=h(n(23)),u=h(n(34)),c=h(n(59)),f=h(n(60)),p=h(n(28)),d=h(n(61));function h(e){return e&&e.__esModule?e:{default:e}}function y(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function v(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function m(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var g=[!1,"center","right","justify"],b=["#000000","#e60000","#ff9900","#ffff00","#008a00","#0066cc","#9933ff","#ffffff","#facccc","#ffebcc","#ffffcc","#cce8cc","#cce0f5","#ebd6ff","#bbbbbb","#f06666","#ffc266","#ffff66","#66b966","#66a3e0","#c285ff","#888888","#a10000","#b26b00","#b2b200","#006100","#0047b2","#6b24b2","#444444","#5c0000","#663d00","#666600","#003700","#002966","#3d1466"],_=[!1,"serif","monospace"],w=["1","2","3",!1],O=["small",!1,"large","huge"],k=function(e){function t(e,n){y(this,t);var r=v(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));return e.emitter.listenDOM("click",document.body,(function t(n){if(!document.body.contains(e.root))return document.body.removeEventListener("click",t);null==r.tooltip||r.tooltip.root.contains(n.target)||document.activeElement===r.tooltip.textbox||r.quill.hasFocus()||r.tooltip.hide(),null!=r.pickers&&r.pickers.forEach((function(e){e.container.contains(n.target)||e.close()}))})),r}return m(t,e),r(t,[{key:"addModule",value:function(e){var n=o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"addModule",this).call(this,e);return"toolbar"===e&&this.extendToolbar(n),n}},{key:"buildButtons",value:function(e,t){e.forEach((function(e){(e.getAttribute("class")||"").split(/\s+/).forEach((function(n){if(n.startsWith("ql-")&&(n=n.slice("ql-".length),null!=t[n]))if("direction"===n)e.innerHTML=t[n][""]+t[n].rtl;else if("string"==typeof t[n])e.innerHTML=t[n];else{var r=e.value||"";null!=r&&t[n][r]&&(e.innerHTML=t[n][r])}}))}))}},{key:"buildPickers",value:function(e,t){var n=this;this.pickers=e.map((function(e){if(e.classList.contains("ql-align"))return null==e.querySelector("option")&&x(e,g),new f.default(e,t.align);if(e.classList.contains("ql-background")||e.classList.contains("ql-color")){var n=e.classList.contains("ql-background")?"background":"color";return null==e.querySelector("option")&&x(e,b,"background"===n?"#ffffff":"#000000"),new c.default(e,t[n])}return null==e.querySelector("option")&&(e.classList.contains("ql-font")?x(e,_):e.classList.contains("ql-header")?x(e,w):e.classList.contains("ql-size")&&x(e,O)),new p.default(e)})),this.quill.on(l.default.events.EDITOR_CHANGE,(function(){n.pickers.forEach((function(e){e.update()}))}))}}]),t}(u.default);k.DEFAULTS=(0,i.default)(!0,{},u.default.DEFAULTS,{modules:{toolbar:{handlers:{formula:function(){this.quill.theme.tooltip.edit("formula")},image:function(){var e=this,t=this.container.querySelector("input.ql-image[type=file]");null==t&&((t=document.createElement("input")).setAttribute("type","file"),t.setAttribute("accept","image/png, image/gif, image/jpeg, image/bmp, image/x-icon"),t.classList.add("ql-image"),t.addEventListener("change",(function(){if(null!=t.files&&null!=t.files[0]){var n=new FileReader;n.onload=function(n){var r=e.quill.getSelection(!0);e.quill.updateContents((new a.default).retain(r.index).delete(r.length).insert({image:n.target.result}),l.default.sources.USER),e.quill.setSelection(r.index+1,l.default.sources.SILENT),t.value=""},n.readAsDataURL(t.files[0])}})),this.container.appendChild(t)),t.click()},video:function(){this.quill.theme.tooltip.edit("video")}}}}});var S=function(e){function t(e,n){y(this,t);var r=v(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));return r.textbox=r.root.querySelector('input[type="text"]'),r.listen(),r}return m(t,e),r(t,[{key:"listen",value:function(){var e=this;this.textbox.addEventListener("keydown",(function(t){s.default.match(t,"enter")?(e.save(),t.preventDefault()):s.default.match(t,"escape")&&(e.cancel(),t.preventDefault())}))}},{key:"cancel",value:function(){this.hide()}},{key:"edit",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"link",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;this.root.classList.remove("ql-hidden"),this.root.classList.add("ql-editing"),null!=t?this.textbox.value=t:e!==this.root.getAttribute("data-mode")&&(this.textbox.value=""),this.position(this.quill.getBounds(this.quill.selection.savedRange)),this.textbox.select(),this.textbox.setAttribute("placeholder",this.textbox.getAttribute("data-"+e)||""),this.root.setAttribute("data-mode",e)}},{key:"restoreFocus",value:function(){var e=this.quill.scrollingContainer.scrollTop;this.quill.focus(),this.quill.scrollingContainer.scrollTop=e}},{key:"save",value:function(){var e,t,n=this.textbox.value;switch(this.root.getAttribute("data-mode")){case"link":var r=this.quill.root.scrollTop;this.linkRange?(this.quill.formatText(this.linkRange,"link",n,l.default.sources.USER),delete this.linkRange):(this.restoreFocus(),this.quill.format("link",n,l.default.sources.USER)),this.quill.root.scrollTop=r;break;case"video":t=(e=n).match(/^(?:(https?):\/\/)?(?:(?:www|m)\.)?youtube\.com\/watch.*v=([a-zA-Z0-9_-]+)/)||e.match(/^(?:(https?):\/\/)?(?:(?:www|m)\.)?youtu\.be\/([a-zA-Z0-9_-]+)/),n=t?(t[1]||"https")+"://www.youtube.com/embed/"+t[2]+"?showinfo=0":(t=e.match(/^(?:(https?):\/\/)?(?:www\.)?vimeo\.com\/(\d+)/))?(t[1]||"https")+"://player.vimeo.com/video/"+t[2]+"/":e;case"formula":if(!n)break;var o=this.quill.getSelection(!0);if(null!=o){var i=o.index+o.length;this.quill.insertEmbed(i,this.root.getAttribute("data-mode"),n,l.default.sources.USER),"formula"===this.root.getAttribute("data-mode")&&this.quill.insertText(i+1," ",l.default.sources.USER),this.quill.setSelection(i+2,l.default.sources.USER)}}this.textbox.value="",this.hide()}}]),t}(d.default);function x(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];t.forEach((function(t){var r=document.createElement("option");t===n?r.setAttribute("selected","selected"):r.setAttribute("value",t),e.appendChild(r)}))}t.BaseTooltip=S,t.default=k},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(){this.head=this.tail=null,this.length=0}return e.prototype.append=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this.insertBefore(e[0],null),e.length>1&&this.append.apply(this,e.slice(1))},e.prototype.contains=function(e){for(var t,n=this.iterator();t=n();)if(t===e)return!0;return!1},e.prototype.insertBefore=function(e,t){e&&(e.next=t,null!=t?(e.prev=t.prev,null!=t.prev&&(t.prev.next=e),t.prev=e,t===this.head&&(this.head=e)):null!=this.tail?(this.tail.next=e,e.prev=this.tail,this.tail=e):(e.prev=null,this.head=this.tail=e),this.length+=1)},e.prototype.offset=function(e){for(var t=0,n=this.head;null!=n;){if(n===e)return t;t+=n.length(),n=n.next}return-1},e.prototype.remove=function(e){this.contains(e)&&(null!=e.prev&&(e.prev.next=e.next),null!=e.next&&(e.next.prev=e.prev),e===this.head&&(this.head=e.next),e===this.tail&&(this.tail=e.prev),this.length-=1)},e.prototype.iterator=function(e){return void 0===e&&(e=this.head),function(){var t=e;return null!=e&&(e=e.next),t}},e.prototype.find=function(e,t){void 0===t&&(t=!1);for(var n,r=this.iterator();n=r();){var o=n.length();if(e<o||t&&e===o&&(null==n.next||0!==n.next.length()))return[n,e];e-=o}return[null,0]},e.prototype.forEach=function(e){for(var t,n=this.iterator();t=n();)e(t)},e.prototype.forEachAt=function(e,t,n){if(!(t<=0))for(var r,o=this.find(e),i=o[0],a=e-o[1],l=this.iterator(i);(r=l())&&a<e+t;){var s=r.length();e>a?n(r,e-a,Math.min(t,a+s-e)):n(r,0,Math.min(s,e+t-a)),a+=s}},e.prototype.map=function(e){return this.reduce((function(t,n){return t.push(e(n)),t}),[])},e.prototype.reduce=function(e,t){for(var n,r=this.iterator();n=r();)t=e(t,n);return t},e}();t.default=r},function(e,t,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=n(17),a=n(1),l={attributes:!0,characterData:!0,characterDataOldValue:!0,childList:!0,subtree:!0},s=function(e){function t(t){var n=e.call(this,t)||this;return n.scroll=n,n.observer=new MutationObserver((function(e){n.update(e)})),n.observer.observe(n.domNode,l),n.attach(),n}return o(t,e),t.prototype.detach=function(){e.prototype.detach.call(this),this.observer.disconnect()},t.prototype.deleteAt=function(t,n){this.update(),0===t&&n===this.length()?this.children.forEach((function(e){e.remove()})):e.prototype.deleteAt.call(this,t,n)},t.prototype.formatAt=function(t,n,r,o){this.update(),e.prototype.formatAt.call(this,t,n,r,o)},t.prototype.insertAt=function(t,n,r){this.update(),e.prototype.insertAt.call(this,t,n,r)},t.prototype.optimize=function(t,n){var r=this;void 0===t&&(t=[]),void 0===n&&(n={}),e.prototype.optimize.call(this,n);for(var o=[].slice.call(this.observer.takeRecords());o.length>0;)t.push(o.pop());for(var l=function(e,t){void 0===t&&(t=!0),null!=e&&e!==r&&null!=e.domNode.parentNode&&(null==e.domNode[a.DATA_KEY].mutations&&(e.domNode[a.DATA_KEY].mutations=[]),t&&l(e.parent))},s=function(e){null!=e.domNode[a.DATA_KEY]&&null!=e.domNode[a.DATA_KEY].mutations&&(e instanceof i.default&&e.children.forEach(s),e.optimize(n))},u=t,c=0;u.length>0;c+=1){if(c>=100)throw new Error("[Parchment] Maximum optimize iterations reached");for(u.forEach((function(e){var t=a.find(e.target,!0);null!=t&&(t.domNode===e.target&&("childList"===e.type?(l(a.find(e.previousSibling,!1)),[].forEach.call(e.addedNodes,(function(e){var t=a.find(e,!1);l(t,!1),t instanceof i.default&&t.children.forEach((function(e){l(e,!1)}))}))):"attributes"===e.type&&l(t.prev)),l(t))})),this.children.forEach(s),o=(u=[].slice.call(this.observer.takeRecords())).slice();o.length>0;)t.push(o.pop())}},t.prototype.update=function(t,n){var r=this;void 0===n&&(n={}),(t=t||this.observer.takeRecords()).map((function(e){var t=a.find(e.target,!0);return null==t?null:null==t.domNode[a.DATA_KEY].mutations?(t.domNode[a.DATA_KEY].mutations=[e],t):(t.domNode[a.DATA_KEY].mutations.push(e),null)})).forEach((function(e){null!=e&&e!==r&&null!=e.domNode[a.DATA_KEY]&&e.update(e.domNode[a.DATA_KEY].mutations||[],n)})),null!=this.domNode[a.DATA_KEY].mutations&&e.prototype.update.call(this,this.domNode[a.DATA_KEY].mutations,n),this.optimize(t,n)},t.blotName="scroll",t.defaultChild="block",t.scope=a.Scope.BLOCK_BLOT,t.tagName="DIV",t}(i.default);t.default=s},function(e,t,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=n(18),a=n(1),l=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t.formats=function(n){if(n.tagName!==t.tagName)return e.formats.call(this,n)},t.prototype.format=function(n,r){var o=this;n!==this.statics.blotName||r?e.prototype.format.call(this,n,r):(this.children.forEach((function(e){e instanceof i.default||(e=e.wrap(t.blotName,!0)),o.attributes.copy(e)})),this.unwrap())},t.prototype.formatAt=function(t,n,r,o){null!=this.formats()[r]||a.query(r,a.Scope.ATTRIBUTE)?this.isolate(t,n).format(r,o):e.prototype.formatAt.call(this,t,n,r,o)},t.prototype.optimize=function(n){e.prototype.optimize.call(this,n);var r=this.formats();if(0===Object.keys(r).length)return this.unwrap();var o=this.next;o instanceof t&&o.prev===this&&function(e,t){if(Object.keys(e).length!==Object.keys(t).length)return!1;for(var n in e)if(e[n]!==t[n])return!1;return!0}(r,o.formats())&&(o.moveChildren(this),o.remove())},t.blotName="inline",t.scope=a.Scope.INLINE_BLOT,t.tagName="SPAN",t}(i.default);t.default=l},function(e,t,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=n(18),a=n(1),l=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t.formats=function(n){var r=a.query(t.blotName).tagName;if(n.tagName!==r)return e.formats.call(this,n)},t.prototype.format=function(n,r){null!=a.query(n,a.Scope.BLOCK)&&(n!==this.statics.blotName||r?e.prototype.format.call(this,n,r):this.replaceWith(t.blotName))},t.prototype.formatAt=function(t,n,r,o){null!=a.query(r,a.Scope.BLOCK)?this.format(r,o):e.prototype.formatAt.call(this,t,n,r,o)},t.prototype.insertAt=function(t,n,r){if(null==r||null!=a.query(n,a.Scope.INLINE))e.prototype.insertAt.call(this,t,n,r);else{var o=this.split(t),i=a.create(n,r);o.parent.insertBefore(i,o)}},t.prototype.update=function(t,n){navigator.userAgent.match(/Trident/)?this.build():e.prototype.update.call(this,t,n)},t.blotName="block",t.scope=a.Scope.BLOCK_BLOT,t.tagName="P",t}(i.default);t.default=l},function(e,t,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t.formats=function(e){},t.prototype.format=function(t,n){e.prototype.formatAt.call(this,0,this.length(),t,n)},t.prototype.formatAt=function(t,n,r,o){0===t&&n===this.length()?this.format(r,o):e.prototype.formatAt.call(this,t,n,r,o)},t.prototype.formats=function(){return this.statics.formats(this.domNode)},t}(n(19).default);t.default=i},function(e,t,n){"use strict";var r,o=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=n(19),a=n(1),l=function(e){function t(t){var n=e.call(this,t)||this;return n.text=n.statics.value(n.domNode),n}return o(t,e),t.create=function(e){return document.createTextNode(e)},t.value=function(e){var t=e.data;return t.normalize&&(t=t.normalize()),t},t.prototype.deleteAt=function(e,t){this.domNode.data=this.text=this.text.slice(0,e)+this.text.slice(e+t)},t.prototype.index=function(e,t){return this.domNode===e?t:-1},t.prototype.insertAt=function(t,n,r){null==r?(this.text=this.text.slice(0,t)+n+this.text.slice(t),this.domNode.data=this.text):e.prototype.insertAt.call(this,t,n,r)},t.prototype.length=function(){return this.text.length},t.prototype.optimize=function(n){e.prototype.optimize.call(this,n),this.text=this.statics.value(this.domNode),0===this.text.length?this.remove():this.next instanceof t&&this.next.prev===this&&(this.insertAt(this.length(),this.next.value()),this.next.remove())},t.prototype.position=function(e,t){return void 0===t&&(t=!1),[this.domNode,e]},t.prototype.split=function(e,t){if(void 0===t&&(t=!1),!t){if(0===e)return this;if(e===this.length())return this.next}var n=a.create(this.domNode.splitText(e));return this.parent.insertBefore(n,this.next),this.text=this.statics.value(this.domNode),n},t.prototype.update=function(e,t){var n=this;e.some((function(e){return"characterData"===e.type&&e.target===n.domNode}))&&(this.text=this.statics.value(this.domNode))},t.prototype.value=function(){return this.text},t.blotName="text",t.scope=a.Scope.INLINE_BLOT,t}(i.default);t.default=l},function(e,t,n){"use strict";var r=document.createElement("div");if(r.classList.toggle("test-class",!1),r.classList.contains("test-class")){var o=DOMTokenList.prototype.toggle;DOMTokenList.prototype.toggle=function(e,t){return arguments.length>1&&!this.contains(e)==!t?t:o.call(this,e)}}String.prototype.startsWith||(String.prototype.startsWith=function(e,t){return t=t||0,this.substr(t,e.length)===e}),String.prototype.endsWith||(String.prototype.endsWith=function(e,t){var n=this.toString();("number"!=typeof t||!isFinite(t)||Math.floor(t)!==t||t>n.length)&&(t=n.length),t-=e.length;var r=n.indexOf(e,t);return-1!==r&&r===t}),Array.prototype.find||Object.defineProperty(Array.prototype,"find",{value:function(e){if(null===this)throw new TypeError("Array.prototype.find called on null or undefined");if("function"!=typeof e)throw new TypeError("predicate must be a function");for(var t,n=Object(this),r=n.length>>>0,o=arguments[1],i=0;i<r;i++)if(t=n[i],e.call(o,t,i,n))return t}}),document.addEventListener("DOMContentLoaded",(function(){document.execCommand("enableObjectResizing",!1,!1),document.execCommand("autoUrlDetect",!1,!1)}))},function(e,t){var n=-1;function r(e,t,s){if(e==t)return e?[[0,e]]:[];(s<0||e.length<s)&&(s=null);var c=i(e,t),f=e.substring(0,c);c=a(e=e.substring(c),t=t.substring(c));var p=e.substring(e.length-c),d=function(e,t){var l;if(!e)return[[1,t]];if(!t)return[[n,e]];var s=e.length>t.length?e:t,u=e.length>t.length?t:e,c=s.indexOf(u);if(-1!=c)return l=[[1,s.substring(0,c)],[0,u],[1,s.substring(c+u.length)]],e.length>t.length&&(l[0][0]=l[2][0]=n),l;if(1==u.length)return[[n,e],[1,t]];var f=function(e,t){var n=e.length>t.length?e:t,r=e.length>t.length?t:e;if(n.length<4||2*r.length<n.length)return null;function o(e,t,n){for(var r,o,l,s,u=e.substring(n,n+Math.floor(e.length/4)),c=-1,f="";-1!=(c=t.indexOf(u,c+1));){var p=i(e.substring(n),t.substring(c)),d=a(e.substring(0,n),t.substring(0,c));f.length<d+p&&(f=t.substring(c-d,c)+t.substring(c,c+p),r=e.substring(0,n-d),o=e.substring(n+p),l=t.substring(0,c-d),s=t.substring(c+p))}return 2*f.length>=e.length?[r,o,l,s,f]:null}var l,s,u,c,f,p=o(n,r,Math.ceil(n.length/4)),d=o(n,r,Math.ceil(n.length/2));if(!p&&!d)return null;l=d?p&&p[4].length>d[4].length?p:d:p,e.length>t.length?(s=l[0],u=l[1],c=l[2],f=l[3]):(c=l[0],f=l[1],s=l[2],u=l[3]);var h=l[4];return[s,u,c,f,h]}(e,t);if(f){var p=f[0],d=f[1],h=f[2],y=f[3],v=f[4],m=r(p,h),g=r(d,y);return m.concat([[0,v]],g)}return function(e,t){for(var r=e.length,i=t.length,a=Math.ceil((r+i)/2),l=a,s=2*a,u=new Array(s),c=new Array(s),f=0;f<s;f++)u[f]=-1,c[f]=-1;u[l+1]=0,c[l+1]=0;for(var p=r-i,d=p%2!=0,h=0,y=0,v=0,m=0,g=0;g<a;g++){for(var b=-g+h;b<=g-y;b+=2){for(var _=l+b,w=(E=b==-g||b!=g&&u[_-1]<u[_+1]?u[_+1]:u[_-1]+1)-b;E<r&&w<i&&e.charAt(E)==t.charAt(w);)E++,w++;if(u[_]=E,E>r)y+=2;else if(w>i)h+=2;else if(d&&(S=l+p-b)>=0&&S<s&&-1!=c[S]&&E>=(k=r-c[S]))return o(e,t,E,w)}for(var O=-g+v;O<=g-m;O+=2){for(var k,S=l+O,x=(k=O==-g||O!=g&&c[S-1]<c[S+1]?c[S+1]:c[S-1]+1)-O;k<r&&x<i&&e.charAt(r-k-1)==t.charAt(i-x-1);)k++,x++;if(c[S]=k,k>r)m+=2;else if(x>i)v+=2;else if(!d){var E;if((_=l+p-O)>=0&&_<s&&-1!=u[_])if(w=l+(E=u[_])-_,E>=(k=r-k))return o(e,t,E,w)}}}return[[n,e],[1,t]]}(e,t)}(e=e.substring(0,e.length-c),t=t.substring(0,t.length-c));return f&&d.unshift([0,f]),p&&d.push([0,p]),l(d),null!=s&&(d=function(e,t){var r=function(e,t){if(0===t)return[0,e];for(var r=0,o=0;o<e.length;o++){var i=e[o];if(i[0]===n||0===i[0]){var a=r+i[1].length;if(t===a)return[o+1,e];if(t<a){e=e.slice();var l=t-r,s=[i[0],i[1].slice(0,l)],u=[i[0],i[1].slice(l)];return e.splice(o,1,s,u),[o+1,e]}r=a}}throw new Error("cursor_pos is out of bounds!")}(e,t),o=r[1],i=r[0],a=o[i],l=o[i+1];if(null==a)return e;if(0!==a[0])return e;if(null!=l&&a[1]+l[1]===l[1]+a[1])return o.splice(i,2,l,a),u(o,i,2);if(null!=l&&0===l[1].indexOf(a[1])){o.splice(i,2,[l[0],a[1]],[0,a[1]]);var s=l[1].slice(a[1].length);return s.length>0&&o.splice(i+2,0,[l[0],s]),u(o,i,3)}return e}(d,s)),d=function(e){for(var t=!1,r=function(e){return e.charCodeAt(0)>=56320&&e.charCodeAt(0)<=57343},o=function(e){return e.charCodeAt(e.length-1)>=55296&&e.charCodeAt(e.length-1)<=56319},i=2;i<e.length;i+=1)0===e[i-2][0]&&o(e[i-2][1])&&e[i-1][0]===n&&r(e[i-1][1])&&1===e[i][0]&&r(e[i][1])&&(t=!0,e[i-1][1]=e[i-2][1].slice(-1)+e[i-1][1],e[i][1]=e[i-2][1].slice(-1)+e[i][1],e[i-2][1]=e[i-2][1].slice(0,-1));if(!t)return e;var a=[];for(i=0;i<e.length;i+=1)e[i][1].length>0&&a.push(e[i]);return a}(d)}function o(e,t,n,o){var i=e.substring(0,n),a=t.substring(0,o),l=e.substring(n),s=t.substring(o),u=r(i,a),c=r(l,s);return u.concat(c)}function i(e,t){if(!e||!t||e.charAt(0)!=t.charAt(0))return 0;for(var n=0,r=Math.min(e.length,t.length),o=r,i=0;n<o;)e.substring(i,o)==t.substring(i,o)?i=n=o:r=o,o=Math.floor((r-n)/2+n);return o}function a(e,t){if(!e||!t||e.charAt(e.length-1)!=t.charAt(t.length-1))return 0;for(var n=0,r=Math.min(e.length,t.length),o=r,i=0;n<o;)e.substring(e.length-o,e.length-i)==t.substring(t.length-o,t.length-i)?i=n=o:r=o,o=Math.floor((r-n)/2+n);return o}function l(e){e.push([0,""]);for(var t,r=0,o=0,s=0,u="",c="";r<e.length;)switch(e[r][0]){case 1:s++,c+=e[r][1],r++;break;case n:o++,u+=e[r][1],r++;break;case 0:o+s>1?(0!==o&&0!==s&&(0!==(t=i(c,u))&&(r-o-s>0&&0==e[r-o-s-1][0]?e[r-o-s-1][1]+=c.substring(0,t):(e.splice(0,0,[0,c.substring(0,t)]),r++),c=c.substring(t),u=u.substring(t)),0!==(t=a(c,u))&&(e[r][1]=c.substring(c.length-t)+e[r][1],c=c.substring(0,c.length-t),u=u.substring(0,u.length-t))),0===o?e.splice(r-s,o+s,[1,c]):0===s?e.splice(r-o,o+s,[n,u]):e.splice(r-o-s,o+s,[n,u],[1,c]),r=r-o-s+(o?1:0)+(s?1:0)+1):0!==r&&0==e[r-1][0]?(e[r-1][1]+=e[r][1],e.splice(r,1)):r++,s=0,o=0,u="",c=""}""===e[e.length-1][1]&&e.pop();var f=!1;for(r=1;r<e.length-1;)0==e[r-1][0]&&0==e[r+1][0]&&(e[r][1].substring(e[r][1].length-e[r-1][1].length)==e[r-1][1]?(e[r][1]=e[r-1][1]+e[r][1].substring(0,e[r][1].length-e[r-1][1].length),e[r+1][1]=e[r-1][1]+e[r+1][1],e.splice(r-1,1),f=!0):e[r][1].substring(0,e[r+1][1].length)==e[r+1][1]&&(e[r-1][1]+=e[r+1][1],e[r][1]=e[r][1].substring(e[r+1][1].length)+e[r+1][1],e.splice(r+1,1),f=!0)),r++;f&&l(e)}var s=r;function u(e,t,n){for(var r=t+n-1;r>=0&&r>=t-1;r--)if(r+1<e.length){var o=e[r],i=e[r+1];o[0]===i[1]&&e.splice(r,2,[o[0],o[1]+i[1]])}return e}s.INSERT=1,s.DELETE=n,s.EQUAL=0,e.exports=s},function(e,t){function n(e){var t=[];for(var n in e)t.push(n);return t}(e.exports="function"==typeof Object.keys?Object.keys:n).shim=n},function(e,t){var n="[object Arguments]"==function(){return Object.prototype.toString.call(arguments)}();function r(e){return"[object Arguments]"==Object.prototype.toString.call(e)}function o(e){return e&&"object"==typeof e&&"number"==typeof e.length&&Object.prototype.hasOwnProperty.call(e,"callee")&&!Object.prototype.propertyIsEnumerable.call(e,"callee")||!1}(t=e.exports=n?r:o).supported=r,t.unsupported=o},function(e,t){"use strict";var n=Object.prototype.hasOwnProperty,r="~";function o(){}function i(e,t,n){this.fn=e,this.context=t,this.once=n||!1}function a(){this._events=new o,this._eventsCount=0}Object.create&&(o.prototype=Object.create(null),(new o).__proto__||(r=!1)),a.prototype.eventNames=function(){var e,t,o=[];if(0===this._eventsCount)return o;for(t in e=this._events)n.call(e,t)&&o.push(r?t.slice(1):t);return Object.getOwnPropertySymbols?o.concat(Object.getOwnPropertySymbols(e)):o},a.prototype.listeners=function(e,t){var n=r?r+e:e,o=this._events[n];if(t)return!!o;if(!o)return[];if(o.fn)return[o.fn];for(var i=0,a=o.length,l=new Array(a);i<a;i++)l[i]=o[i].fn;return l},a.prototype.emit=function(e,t,n,o,i,a){var l=r?r+e:e;if(!this._events[l])return!1;var s,u,c=this._events[l],f=arguments.length;if(c.fn){switch(c.once&&this.removeListener(e,c.fn,void 0,!0),f){case 1:return c.fn.call(c.context),!0;case 2:return c.fn.call(c.context,t),!0;case 3:return c.fn.call(c.context,t,n),!0;case 4:return c.fn.call(c.context,t,n,o),!0;case 5:return c.fn.call(c.context,t,n,o,i),!0;case 6:return c.fn.call(c.context,t,n,o,i,a),!0}for(u=1,s=new Array(f-1);u<f;u++)s[u-1]=arguments[u];c.fn.apply(c.context,s)}else{var p,d=c.length;for(u=0;u<d;u++)switch(c[u].once&&this.removeListener(e,c[u].fn,void 0,!0),f){case 1:c[u].fn.call(c[u].context);break;case 2:c[u].fn.call(c[u].context,t);break;case 3:c[u].fn.call(c[u].context,t,n);break;case 4:c[u].fn.call(c[u].context,t,n,o);break;default:if(!s)for(p=1,s=new Array(f-1);p<f;p++)s[p-1]=arguments[p];c[u].fn.apply(c[u].context,s)}}return!0},a.prototype.on=function(e,t,n){var o=new i(t,n||this),a=r?r+e:e;return this._events[a]?this._events[a].fn?this._events[a]=[this._events[a],o]:this._events[a].push(o):(this._events[a]=o,this._eventsCount++),this},a.prototype.once=function(e,t,n){var o=new i(t,n||this,!0),a=r?r+e:e;return this._events[a]?this._events[a].fn?this._events[a]=[this._events[a],o]:this._events[a].push(o):(this._events[a]=o,this._eventsCount++),this},a.prototype.removeListener=function(e,t,n,i){var a=r?r+e:e;if(!this._events[a])return this;if(!t)return 0==--this._eventsCount?this._events=new o:delete this._events[a],this;var l=this._events[a];if(l.fn)l.fn!==t||i&&!l.once||n&&l.context!==n||(0==--this._eventsCount?this._events=new o:delete this._events[a]);else{for(var s=0,u=[],c=l.length;s<c;s++)(l[s].fn!==t||i&&!l[s].once||n&&l[s].context!==n)&&u.push(l[s]);u.length?this._events[a]=1===u.length?u[0]:u:0==--this._eventsCount?this._events=new o:delete this._events[a]}return this},a.prototype.removeAllListeners=function(e){var t;return e?(t=r?r+e:e,this._events[t]&&(0==--this._eventsCount?this._events=new o:delete this._events[t])):(this._events=new o,this._eventsCount=0),this},a.prototype.off=a.prototype.removeListener,a.prototype.addListener=a.prototype.on,a.prototype.setMaxListeners=function(){return this},a.prefixed=r,a.EventEmitter=a,void 0!==e&&(e.exports=a)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.matchText=t.matchSpacing=t.matchNewline=t.matchBlot=t.matchAttributor=t.default=void 0;var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,l=e[Symbol.iterator]();!(r=(a=l.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{!r&&l.return&&l.return()}finally{if(o)throw i}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=b(n(3)),l=b(n(2)),s=b(n(0)),u=b(n(5)),c=b(n(10)),f=b(n(9)),p=n(36),d=n(37),h=b(n(13)),y=n(26),v=n(38),m=n(39),g=n(40);function b(e){return e&&e.__esModule?e:{default:e}}function _(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var w=(0,c.default)("quill:clipboard"),O="__ql-matcher",k=[[Node.TEXT_NODE,M],[Node.TEXT_NODE,R],["br",function(e,t){return P(t,"\n")||t.insert("\n"),t}],[Node.ELEMENT_NODE,R],[Node.ELEMENT_NODE,L],[Node.ELEMENT_NODE,I],[Node.ELEMENT_NODE,q],[Node.ELEMENT_NODE,function(e,t){var n={},r=e.style||{};return r.fontStyle&&"italic"===A(e).fontStyle&&(n.italic=!0),r.fontWeight&&(A(e).fontWeight.startsWith("bold")||parseInt(A(e).fontWeight)>=700)&&(n.bold=!0),Object.keys(n).length>0&&(t=j(t,n)),parseFloat(r.textIndent||0)>0&&(t=(new l.default).insert("\t").concat(t)),t}],["li",function(e,t){var n=s.default.query(e);if(null==n||"list-item"!==n.blotName||!P(t,"\n"))return t;for(var r=-1,o=e.parentNode;!o.classList.contains("ql-clipboard");)"list"===(s.default.query(o)||{}).blotName&&(r+=1),o=o.parentNode;return r<=0?t:t.compose((new l.default).retain(t.length()-1).retain(1,{indent:r}))}],["b",N.bind(N,"bold")],["i",N.bind(N,"italic")],["style",function(){return new l.default}]],S=[p.AlignAttribute,v.DirectionAttribute].reduce((function(e,t){return e[t.keyName]=t,e}),{}),x=[p.AlignStyle,d.BackgroundStyle,y.ColorStyle,v.DirectionStyle,m.FontStyle,g.SizeStyle].reduce((function(e,t){return e[t.keyName]=t,e}),{}),E=function(e){function t(e,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));return r.quill.root.addEventListener("paste",r.onPaste.bind(r)),r.container=r.quill.addContainer("ql-clipboard"),r.container.setAttribute("contenteditable",!0),r.container.setAttribute("tabindex",-1),r.matchers=[],k.concat(r.options.matchers).forEach((function(e){var t=o(e,2),i=t[0],a=t[1];(n.matchVisual||a!==I)&&r.addMatcher(i,a)})),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),i(t,[{key:"addMatcher",value:function(e,t){this.matchers.push([e,t])}},{key:"convert",value:function(e){if("string"==typeof e)return this.container.innerHTML=e.replace(/\>\r?\n +\</g,"><"),this.convert();var t=this.quill.getFormat(this.quill.selection.savedRange.index);if(t[h.default.blotName]){var n=this.container.innerText;return this.container.innerHTML="",(new l.default).insert(n,_({},h.default.blotName,t[h.default.blotName]))}var r=this.prepareMatching(),i=o(r,2),a=i[0],s=i[1],u=C(this.container,a,s);return P(u,"\n")&&null==u.ops[u.ops.length-1].attributes&&(u=u.compose((new l.default).retain(u.length()-1).delete(1))),w.log("convert",this.container.innerHTML,u),this.container.innerHTML="",u}},{key:"dangerouslyPasteHTML",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:u.default.sources.API;if("string"==typeof e)this.quill.setContents(this.convert(e),t),this.quill.setSelection(0,u.default.sources.SILENT);else{var r=this.convert(t);this.quill.updateContents((new l.default).retain(e).concat(r),n),this.quill.setSelection(e+r.length(),u.default.sources.SILENT)}}},{key:"onPaste",value:function(e){var t=this;if(!e.defaultPrevented&&this.quill.isEnabled()){var n=this.quill.getSelection(),r=(new l.default).retain(n.index),o=this.quill.scrollingContainer.scrollTop;this.container.focus(),this.quill.selection.update(u.default.sources.SILENT),setTimeout((function(){r=r.concat(t.convert()).delete(n.length),t.quill.updateContents(r,u.default.sources.USER),t.quill.setSelection(r.length()-n.length,u.default.sources.SILENT),t.quill.scrollingContainer.scrollTop=o,t.quill.focus()}),1)}}},{key:"prepareMatching",value:function(){var e=this,t=[],n=[];return this.matchers.forEach((function(r){var i=o(r,2),a=i[0],l=i[1];switch(a){case Node.TEXT_NODE:n.push(l);break;case Node.ELEMENT_NODE:t.push(l);break;default:[].forEach.call(e.container.querySelectorAll(a),(function(e){e[O]=e[O]||[],e[O].push(l)}))}})),[t,n]}}]),t}(f.default);function j(e,t,n){return"object"===(void 0===t?"undefined":r(t))?Object.keys(t).reduce((function(e,n){return j(e,n,t[n])}),e):e.reduce((function(e,r){return r.attributes&&r.attributes[t]?e.push(r):e.insert(r.insert,(0,a.default)({},_({},t,n),r.attributes))}),new l.default)}function A(e){if(e.nodeType!==Node.ELEMENT_NODE)return{};var t="__ql-computed-style";return e[t]||(e[t]=window.getComputedStyle(e))}function P(e,t){for(var n="",r=e.ops.length-1;r>=0&&n.length<t.length;--r){var o=e.ops[r];if("string"!=typeof o.insert)break;n=o.insert+n}return n.slice(-1*t.length)===t}function T(e){if(0===e.childNodes.length)return!1;var t=A(e);return["block","list-item"].indexOf(t.display)>-1}function C(e,t,n){return e.nodeType===e.TEXT_NODE?n.reduce((function(t,n){return n(e,t)}),new l.default):e.nodeType===e.ELEMENT_NODE?[].reduce.call(e.childNodes||[],(function(r,o){var i=C(o,t,n);return o.nodeType===e.ELEMENT_NODE&&(i=t.reduce((function(e,t){return t(o,e)}),i),i=(o[O]||[]).reduce((function(e,t){return t(o,e)}),i)),r.concat(i)}),new l.default):new l.default}function N(e,t,n){return j(n,e,!0)}function q(e,t){var n=s.default.Attributor.Attribute.keys(e),r=s.default.Attributor.Class.keys(e),o=s.default.Attributor.Style.keys(e),i={};return n.concat(r).concat(o).forEach((function(t){var n=s.default.query(t,s.default.Scope.ATTRIBUTE);null!=n&&(i[n.attrName]=n.value(e),i[n.attrName])||(null==(n=S[t])||n.attrName!==t&&n.keyName!==t||(i[n.attrName]=n.value(e)||void 0),null==(n=x[t])||n.attrName!==t&&n.keyName!==t||(n=x[t],i[n.attrName]=n.value(e)||void 0))})),Object.keys(i).length>0&&(t=j(t,i)),t}function L(e,t){var n=s.default.query(e);if(null==n)return t;if(n.prototype instanceof s.default.Embed){var r={},o=n.value(e);null!=o&&(r[n.blotName]=o,t=(new l.default).insert(r,n.formats(e)))}else"function"==typeof n.formats&&(t=j(t,n.blotName,n.formats(e)));return t}function R(e,t){return P(t,"\n")||(T(e)||t.length()>0&&e.nextSibling&&T(e.nextSibling))&&t.insert("\n"),t}function I(e,t){if(T(e)&&null!=e.nextElementSibling&&!P(t,"\n\n")){var n=e.offsetHeight+parseFloat(A(e).marginTop)+parseFloat(A(e).marginBottom);e.nextElementSibling.offsetTop>e.offsetTop+1.5*n&&t.insert("\n")}return t}function M(e,t){var n=e.data;if("O:P"===e.parentNode.tagName)return t.insert(n.trim());if(0===n.trim().length&&e.parentNode.classList.contains("ql-clipboard"))return t;if(!A(e.parentNode).whiteSpace.startsWith("pre")){var r=function(e,t){return(t=t.replace(/[^\u00a0]/g,"")).length<1&&e?" ":t};n=(n=n.replace(/\r\n/g," ").replace(/\n/g," ")).replace(/\s\s+/g,r.bind(r,!0)),(null==e.previousSibling&&T(e.parentNode)||null!=e.previousSibling&&T(e.previousSibling))&&(n=n.replace(/^\s+/,r.bind(r,!1))),(null==e.nextSibling&&T(e.parentNode)||null!=e.nextSibling&&T(e.nextSibling))&&(n=n.replace(/\s+$/,r.bind(r,!1)))}return t.insert(n)}E.DEFAULTS={matchers:[],matchVisual:!0},t.default=E,t.matchAttributor=q,t.matchBlot=L,t.matchNewline=R,t.matchSpacing=I,t.matchText=M},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0},a=n(6);function l(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function s(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var u=function(e){function t(){return l(this,t),s(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),o(t,[{key:"optimize",value:function(e){i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"optimize",this).call(this,e),this.domNode.tagName!==this.statics.tagName[0]&&this.replaceWith(this.statics.blotName)}}],[{key:"create",value:function(){return i(t.__proto__||Object.getPrototypeOf(t),"create",this).call(this)}},{key:"formats",value:function(){return!0}}]),t}(((r=a)&&r.__esModule?r:{default:r}).default);u.blotName="bold",u.tagName=["STRONG","B"],t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.addControls=t.default=void 0;var r=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,l=e[Symbol.iterator]();!(r=(a=l.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{!r&&l.return&&l.return()}finally{if(o)throw i}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=c(n(2)),a=c(n(0)),l=c(n(5)),s=c(n(10)),u=c(n(9));function c(e){return e&&e.__esModule?e:{default:e}}function f(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var p=(0,s.default)("quill:toolbar"),d=function(e){function t(e,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var o,i=f(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));if(Array.isArray(i.options.container)){var a=document.createElement("div");y(a,i.options.container),e.container.parentNode.insertBefore(a,e.container),i.container=a}else"string"==typeof i.options.container?i.container=document.querySelector(i.options.container):i.container=i.options.container;return i.container instanceof HTMLElement?(i.container.classList.add("ql-toolbar"),i.controls=[],i.handlers={},Object.keys(i.options.handlers).forEach((function(e){i.addHandler(e,i.options.handlers[e])})),[].forEach.call(i.container.querySelectorAll("button, select"),(function(e){i.attach(e)})),i.quill.on(l.default.events.EDITOR_CHANGE,(function(e,t){e===l.default.events.SELECTION_CHANGE&&i.update(t)})),i.quill.on(l.default.events.SCROLL_OPTIMIZE,(function(){var e=i.quill.selection.getRange(),t=r(e,1)[0];i.update(t)})),i):(o=p.error("Container required for toolbar",i.options),f(i,o))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),o(t,[{key:"addHandler",value:function(e,t){this.handlers[e]=t}},{key:"attach",value:function(e){var t=this,n=[].find.call(e.classList,(function(e){return 0===e.indexOf("ql-")}));if(n){if(n=n.slice("ql-".length),"BUTTON"===e.tagName&&e.setAttribute("type","button"),null==this.handlers[n]){if(null!=this.quill.scroll.whitelist&&null==this.quill.scroll.whitelist[n])return void p.warn("ignoring attaching to disabled format",n,e);if(null==a.default.query(n))return void p.warn("ignoring attaching to nonexistent format",n,e)}var o="SELECT"===e.tagName?"change":"click";e.addEventListener(o,(function(o){var s=void 0;if("SELECT"===e.tagName){if(e.selectedIndex<0)return;var u=e.options[e.selectedIndex];s=!u.hasAttribute("selected")&&(u.value||!1)}else s=!e.classList.contains("ql-active")&&(e.value||!e.hasAttribute("value")),o.preventDefault();t.quill.focus();var c=t.quill.selection.getRange(),f=r(c,1)[0];if(null!=t.handlers[n])t.handlers[n].call(t,s);else if(a.default.query(n).prototype instanceof a.default.Embed){if(!(s=prompt("Enter "+n)))return;t.quill.updateContents((new i.default).retain(f.index).delete(f.length).insert(function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}({},n,s)),l.default.sources.USER)}else t.quill.format(n,s,l.default.sources.USER);t.update(f)})),this.controls.push([n,e])}}},{key:"update",value:function(e){var t=null==e?{}:this.quill.getFormat(e);this.controls.forEach((function(n){var o=r(n,2),i=o[0],a=o[1];if("SELECT"===a.tagName){var l=void 0;if(null==e)l=null;else if(null==t[i])l=a.querySelector("option[selected]");else if(!Array.isArray(t[i])){var s=t[i];"string"==typeof s&&(s=s.replace(/\"/g,'\\"')),l=a.querySelector('option[value="'+s+'"]')}null==l?(a.value="",a.selectedIndex=-1):l.selected=!0}else if(null==e)a.classList.remove("ql-active");else if(a.hasAttribute("value")){var u=t[i]===a.getAttribute("value")||null!=t[i]&&t[i].toString()===a.getAttribute("value")||null==t[i]&&!a.getAttribute("value");a.classList.toggle("ql-active",u)}else a.classList.toggle("ql-active",null!=t[i])}))}}]),t}(u.default);function h(e,t,n){var r=document.createElement("button");r.setAttribute("type","button"),r.classList.add("ql-"+t),null!=n&&(r.value=n),e.appendChild(r)}function y(e,t){Array.isArray(t[0])||(t=[t]),t.forEach((function(t){var n=document.createElement("span");n.classList.add("ql-formats"),t.forEach((function(e){if("string"==typeof e)h(n,e);else{var t=Object.keys(e)[0],r=e[t];Array.isArray(r)?function(e,t,n){var r=document.createElement("select");r.classList.add("ql-"+t),n.forEach((function(e){var t=document.createElement("option");!1!==e?t.setAttribute("value",e):t.setAttribute("selected","selected"),r.appendChild(t)})),e.appendChild(r)}(n,t,r):h(n,t,r)}})),e.appendChild(n)}))}d.DEFAULTS={},d.DEFAULTS={container:null,handlers:{clean:function(){var e=this,t=this.quill.getSelection();if(null!=t)if(0==t.length){var n=this.quill.getFormat();Object.keys(n).forEach((function(t){null!=a.default.query(t,a.default.Scope.INLINE)&&e.quill.format(t,!1)}))}else this.quill.removeFormat(t,l.default.sources.USER)},direction:function(e){var t=this.quill.getFormat().align;"rtl"===e&&null==t?this.quill.format("align","right",l.default.sources.USER):e||"right"!==t||this.quill.format("align",!1,l.default.sources.USER),this.quill.format("direction",e,l.default.sources.USER)},indent:function(e){var t=this.quill.getSelection(),n=this.quill.getFormat(t),r=parseInt(n.indent||0);if("+1"===e||"-1"===e){var o="+1"===e?1:-1;"rtl"===n.direction&&(o*=-1),this.quill.format("indent",r+o,l.default.sources.USER)}},link:function(e){!0===e&&(e=prompt("Enter link URL:")),this.quill.format("link",e,l.default.sources.USER)},list:function(e){var t=this.quill.getSelection(),n=this.quill.getFormat(t);"check"===e?"checked"===n.list||"unchecked"===n.list?this.quill.format("list",!1,l.default.sources.USER):this.quill.format("list","unchecked",l.default.sources.USER):this.quill.format("list",e,l.default.sources.USER)}}},t.default=d,t.addControls=y},function(e,t){e.exports='<svg viewbox="0 0 18 18"> <polyline class="ql-even ql-stroke" points="5 7 3 9 5 11"></polyline> <polyline class="ql-even ql-stroke" points="13 7 15 9 13 11"></polyline> <line class=ql-stroke x1=10 x2=8 y1=5 y2=13></line> </svg>'},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0},a=n(28),l=function(e){function t(e,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return r.label.innerHTML=n,r.container.classList.add("ql-color-picker"),[].slice.call(r.container.querySelectorAll(".ql-picker-item"),0,7).forEach((function(e){e.classList.add("ql-primary")})),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),o(t,[{key:"buildItem",value:function(e){var n=i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"buildItem",this).call(this,e);return n.style.backgroundColor=e.getAttribute("value")||"",n}},{key:"selectItem",value:function(e,n){i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"selectItem",this).call(this,e,n);var r=this.label.querySelector(".ql-color-label"),o=e&&e.getAttribute("data-value")||"";r&&("line"===r.tagName?r.style.stroke=o:r.style.fill=o)}}]),t}(((r=a)&&r.__esModule?r:{default:r}).default);t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0},a=n(28),l=function(e){function t(e,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return r.container.classList.add("ql-icon-picker"),[].forEach.call(r.container.querySelectorAll(".ql-picker-item"),(function(e){e.innerHTML=n[e.getAttribute("data-value")||""]})),r.defaultItem=r.container.querySelector(".ql-selected"),r.selectItem(r.defaultItem),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),o(t,[{key:"selectItem",value:function(e,n){i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"selectItem",this).call(this,e,n),e=e||this.defaultItem,this.label.innerHTML=e.innerHTML}}]),t}(((r=a)&&r.__esModule?r:{default:r}).default);t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function(){function e(t,n){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.quill=t,this.boundsContainer=n||document.body,this.root=t.addContainer("ql-tooltip"),this.root.innerHTML=this.constructor.TEMPLATE,this.quill.root===this.quill.scrollingContainer&&this.quill.root.addEventListener("scroll",(function(){r.root.style.marginTop=-1*r.quill.root.scrollTop+"px"})),this.hide()}return r(e,[{key:"hide",value:function(){this.root.classList.add("ql-hidden")}},{key:"position",value:function(e){var t=e.left+e.width/2-this.root.offsetWidth/2,n=e.bottom+this.quill.root.scrollTop;this.root.style.left=t+"px",this.root.style.top=n+"px",this.root.classList.remove("ql-flip");var r=this.boundsContainer.getBoundingClientRect(),o=this.root.getBoundingClientRect(),i=0;if(o.right>r.right&&(i=r.right-o.right,this.root.style.left=t+i+"px"),o.left<r.left&&(i=r.left-o.left,this.root.style.left=t+i+"px"),o.bottom>r.bottom){var a=o.bottom-o.top,l=e.bottom-e.top+a;this.root.style.top=n-l+"px",this.root.classList.add("ql-flip")}return i}},{key:"show",value:function(){this.root.classList.remove("ql-editing"),this.root.classList.remove("ql-hidden")}}]),e}();t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,l=e[Symbol.iterator]();!(r=(a=l.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{!r&&l.return&&l.return()}finally{if(o)throw i}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")},o=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=d(n(3)),l=d(n(8)),s=n(43),u=d(s),c=d(n(27)),f=n(15),p=d(n(41));function d(e){return e&&e.__esModule?e:{default:e}}function h(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function y(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function v(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var m=[[{header:["1","2","3",!1]}],["bold","italic","underline","link"],[{list:"ordered"},{list:"bullet"}],["clean"]],g=function(e){function t(e,n){h(this,t),null!=n.modules.toolbar&&null==n.modules.toolbar.container&&(n.modules.toolbar.container=m);var r=y(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));return r.quill.container.classList.add("ql-snow"),r}return v(t,e),i(t,[{key:"extendToolbar",value:function(e){e.container.classList.add("ql-snow"),this.buildButtons([].slice.call(e.container.querySelectorAll("button")),p.default),this.buildPickers([].slice.call(e.container.querySelectorAll("select")),p.default),this.tooltip=new b(this.quill,this.options.bounds),e.container.querySelector(".ql-link")&&this.quill.keyboard.addBinding({key:"K",shortKey:!0},(function(t,n){e.handlers.link.call(e,!n.format.link)}))}}]),t}(u.default);g.DEFAULTS=(0,a.default)(!0,{},u.default.DEFAULTS,{modules:{toolbar:{handlers:{link:function(e){if(e){var t=this.quill.getSelection();if(null==t||0==t.length)return;var n=this.quill.getText(t);/^\S+@\S+\.\S+$/.test(n)&&0!==n.indexOf("mailto:")&&(n="mailto:"+n),this.quill.theme.tooltip.edit("link",n)}else this.quill.format("link",!1)}}}}});var b=function(e){function t(e,n){h(this,t);var r=y(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));return r.preview=r.root.querySelector("a.ql-preview"),r}return v(t,e),i(t,[{key:"listen",value:function(){var e=this;o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"listen",this).call(this),this.root.querySelector("a.ql-action").addEventListener("click",(function(t){e.root.classList.contains("ql-editing")?e.save():e.edit("link",e.preview.textContent),t.preventDefault()})),this.root.querySelector("a.ql-remove").addEventListener("click",(function(t){if(null!=e.linkRange){var n=e.linkRange;e.restoreFocus(),e.quill.formatText(n,"link",!1,l.default.sources.USER),delete e.linkRange}t.preventDefault(),e.hide()})),this.quill.on(l.default.events.SELECTION_CHANGE,(function(t,n,o){if(null!=t){if(0===t.length&&o===l.default.sources.USER){var i=e.quill.scroll.descendant(c.default,t.index),a=r(i,2),s=a[0],u=a[1];if(null!=s){e.linkRange=new f.Range(t.index-u,s.length());var p=c.default.formats(s.domNode);return e.preview.textContent=p,e.preview.setAttribute("href",p),e.show(),void e.position(e.quill.getBounds(e.linkRange))}}else delete e.linkRange;e.hide()}}))}},{key:"show",value:function(){o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"show",this).call(this),this.root.removeAttribute("data-mode")}}]),t}(s.BaseTooltip);b.TEMPLATE=['<a class="ql-preview" rel="noopener noreferrer" target="_blank" href="about:blank"></a>','<input type="text" data-formula="e=mc^2" data-link="https://quilljs.com" data-video="Embed URL">','<a class="ql-action"></a>','<a class="ql-remove"></a>'].join(""),t.default=g},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=R(n(29)),o=n(36),i=n(38),a=n(64),l=R(n(65)),s=R(n(66)),u=n(67),c=R(u),f=n(37),p=n(26),d=n(39),h=n(40),y=R(n(56)),v=R(n(68)),m=R(n(27)),g=R(n(69)),b=R(n(70)),_=R(n(71)),w=R(n(72)),O=R(n(73)),k=n(13),S=R(k),x=R(n(74)),E=R(n(75)),j=R(n(57)),A=R(n(41)),P=R(n(28)),T=R(n(59)),C=R(n(60)),N=R(n(61)),q=R(n(108)),L=R(n(62));function R(e){return e&&e.__esModule?e:{default:e}}r.default.register({"attributors/attribute/direction":i.DirectionAttribute,"attributors/class/align":o.AlignClass,"attributors/class/background":f.BackgroundClass,"attributors/class/color":p.ColorClass,"attributors/class/direction":i.DirectionClass,"attributors/class/font":d.FontClass,"attributors/class/size":h.SizeClass,"attributors/style/align":o.AlignStyle,"attributors/style/background":f.BackgroundStyle,"attributors/style/color":p.ColorStyle,"attributors/style/direction":i.DirectionStyle,"attributors/style/font":d.FontStyle,"attributors/style/size":h.SizeStyle},!0),r.default.register({"formats/align":o.AlignClass,"formats/direction":i.DirectionClass,"formats/indent":a.IndentClass,"formats/background":f.BackgroundStyle,"formats/color":p.ColorStyle,"formats/font":d.FontClass,"formats/size":h.SizeClass,"formats/blockquote":l.default,"formats/code-block":S.default,"formats/header":s.default,"formats/list":c.default,"formats/bold":y.default,"formats/code":k.Code,"formats/italic":v.default,"formats/link":m.default,"formats/script":g.default,"formats/strike":b.default,"formats/underline":_.default,"formats/image":w.default,"formats/video":O.default,"formats/list/item":u.ListItem,"modules/formula":x.default,"modules/syntax":E.default,"modules/toolbar":j.default,"themes/bubble":q.default,"themes/snow":L.default,"ui/icons":A.default,"ui/picker":P.default,"ui/icon-picker":C.default,"ui/color-picker":T.default,"ui/tooltip":N.default},!0),t.default=r.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.IndentClass=void 0;var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0},a=n(0),l=(r=a)&&r.__esModule?r:{default:r};function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var c=function(e){function t(){return s(this,t),u(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),o(t,[{key:"add",value:function(e,n){if("+1"===n||"-1"===n){var r=this.value(e)||0;n="+1"===n?r+1:r-1}return 0===n?(this.remove(e),!0):i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"add",this).call(this,e,n)}},{key:"canAdd",value:function(e,n){return i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"canAdd",this).call(this,e,n)||i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"canAdd",this).call(this,e,parseInt(n))}},{key:"value",value:function(e){return parseInt(i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"value",this).call(this,e))||void 0}}]),t}(l.default.Attributor.Class),f=new c("indent","ql-indent",{scope:l.default.Scope.BLOCK,whitelist:[1,2,3,4,5,6,7,8]});t.IndentClass=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(4);function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var l=function(e){function t(){return i(this,t),a(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t}(((r=o)&&r.__esModule?r:{default:r}).default);l.blotName="blockquote",l.tagName="blockquote",t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(4);function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var s=function(e){function t(){return a(this,t),l(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),o(t,null,[{key:"formats",value:function(e){return this.tagName.indexOf(e.tagName)+1}}]),t}(((r=i)&&r.__esModule?r:{default:r}).default);s.blotName="header",s.tagName=["H1","H2","H3","H4","H5","H6"],t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.ListItem=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0},i=s(n(0)),a=s(n(4)),l=s(n(25));function s(e){return e&&e.__esModule?e:{default:e}}function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function c(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function f(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var p=function(e){function t(){return u(this,t),c(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return f(t,e),r(t,[{key:"format",value:function(e,n){e!==d.blotName||n?o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"format",this).call(this,e,n):this.replaceWith(i.default.create(this.statics.scope))}},{key:"remove",value:function(){null==this.prev&&null==this.next?this.parent.remove():o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"remove",this).call(this)}},{key:"replaceWith",value:function(e,n){return this.parent.isolate(this.offset(this.parent),this.length()),e===this.parent.statics.blotName?(this.parent.replaceWith(e,n),this):(this.parent.unwrap(),o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"replaceWith",this).call(this,e,n))}}],[{key:"formats",value:function(e){return e.tagName===this.tagName?void 0:o(t.__proto__||Object.getPrototypeOf(t),"formats",this).call(this,e)}}]),t}(a.default);p.blotName="list-item",p.tagName="LI";var d=function(e){function t(e){u(this,t);var n=c(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e)),r=function(t){if(t.target.parentNode===e){var r=n.statics.formats(e),o=i.default.find(t.target);"checked"===r?o.format("list","unchecked"):"unchecked"===r&&o.format("list","checked")}};return e.addEventListener("touchstart",r),e.addEventListener("mousedown",r),n}return f(t,e),r(t,null,[{key:"create",value:function(e){var n="ordered"===e?"OL":"UL",r=o(t.__proto__||Object.getPrototypeOf(t),"create",this).call(this,n);return"checked"!==e&&"unchecked"!==e||r.setAttribute("data-checked","checked"===e),r}},{key:"formats",value:function(e){return"OL"===e.tagName?"ordered":"UL"===e.tagName?e.hasAttribute("data-checked")?"true"===e.getAttribute("data-checked")?"checked":"unchecked":"bullet":void 0}}]),r(t,[{key:"format",value:function(e,t){this.children.length>0&&this.children.tail.format(e,t)}},{key:"formats",value:function(){return e={},t=this.statics.blotName,n=this.statics.formats(this.domNode),t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e;var e,t,n}},{key:"insertBefore",value:function(e,n){if(e instanceof p)o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"insertBefore",this).call(this,e,n);else{var r=null==n?this.length():n.offset(this),i=this.split(r);i.parent.insertBefore(e,i)}}},{key:"optimize",value:function(e){o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"optimize",this).call(this,e);var n=this.next;null!=n&&n.prev===this&&n.statics.blotName===this.statics.blotName&&n.domNode.tagName===this.domNode.tagName&&n.domNode.getAttribute("data-checked")===this.domNode.getAttribute("data-checked")&&(n.moveChildren(this),n.remove())}},{key:"replace",value:function(e){if(e.statics.blotName!==this.statics.blotName){var n=i.default.create(this.statics.defaultChild);e.moveChildren(n),this.appendChild(n)}o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"replace",this).call(this,e)}}]),t}(l.default);d.blotName="list",d.scope=i.default.Scope.BLOCK_BLOT,d.tagName=["OL","UL"],d.defaultChild="list-item",d.allowedChildren=[p],t.ListItem=p,t.default=d},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(56);function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var l=function(e){function t(){return i(this,t),a(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t}(((r=o)&&r.__esModule?r:{default:r}).default);l.blotName="italic",l.tagName=["EM","I"],t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0},a=n(6);function l(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function s(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var u=function(e){function t(){return l(this,t),s(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),o(t,null,[{key:"create",value:function(e){return"super"===e?document.createElement("sup"):"sub"===e?document.createElement("sub"):i(t.__proto__||Object.getPrototypeOf(t),"create",this).call(this,e)}},{key:"formats",value:function(e){return"SUB"===e.tagName?"sub":"SUP"===e.tagName?"super":void 0}}]),t}(((r=a)&&r.__esModule?r:{default:r}).default);u.blotName="script",u.tagName=["SUB","SUP"],t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(6);function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var l=function(e){function t(){return i(this,t),a(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t}(((r=o)&&r.__esModule?r:{default:r}).default);l.blotName="strike",l.tagName="S",t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(6);function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var l=function(e){function t(){return i(this,t),a(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t}(((r=o)&&r.__esModule?r:{default:r}).default);l.blotName="underline",l.tagName="U",t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0},a=n(0),l=(r=a)&&r.__esModule?r:{default:r},s=n(27);function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function c(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var f=["alt","height","width"],p=function(e){function t(){return u(this,t),c(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),o(t,[{key:"format",value:function(e,n){f.indexOf(e)>-1?n?this.domNode.setAttribute(e,n):this.domNode.removeAttribute(e):i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"format",this).call(this,e,n)}}],[{key:"create",value:function(e){var n=i(t.__proto__||Object.getPrototypeOf(t),"create",this).call(this,e);return"string"==typeof e&&n.setAttribute("src",this.sanitize(e)),n}},{key:"formats",value:function(e){return f.reduce((function(t,n){return e.hasAttribute(n)&&(t[n]=e.getAttribute(n)),t}),{})}},{key:"match",value:function(e){return/\.(jpe?g|gif|png)$/.test(e)||/^data:image\/.+;base64/.test(e)}},{key:"sanitize",value:function(e){return(0,s.sanitize)(e,["http","https","data"])?e:"//:0"}},{key:"value",value:function(e){return e.getAttribute("src")}}]),t}(l.default.Embed);p.blotName="image",p.tagName="IMG",t.default=p},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0},a=n(4),l=n(27),s=(r=l)&&r.__esModule?r:{default:r};function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function c(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var f=["height","width"],p=function(e){function t(){return u(this,t),c(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),o(t,[{key:"format",value:function(e,n){f.indexOf(e)>-1?n?this.domNode.setAttribute(e,n):this.domNode.removeAttribute(e):i(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"format",this).call(this,e,n)}}],[{key:"create",value:function(e){var n=i(t.__proto__||Object.getPrototypeOf(t),"create",this).call(this,e);return n.setAttribute("frameborder","0"),n.setAttribute("allowfullscreen",!0),n.setAttribute("src",this.sanitize(e)),n}},{key:"formats",value:function(e){return f.reduce((function(t,n){return e.hasAttribute(n)&&(t[n]=e.getAttribute(n)),t}),{})}},{key:"sanitize",value:function(e){return s.default.sanitize(e)}},{key:"value",value:function(e){return e.getAttribute("src")}}]),t}(a.BlockEmbed);p.blotName="video",p.className="ql-video",p.tagName="IFRAME",t.default=p},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.FormulaBlot=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0},i=s(n(35)),a=s(n(5)),l=s(n(9));function s(e){return e&&e.__esModule?e:{default:e}}function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function c(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function f(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var p=function(e){function t(){return u(this,t),c(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return f(t,e),r(t,null,[{key:"create",value:function(e){var n=o(t.__proto__||Object.getPrototypeOf(t),"create",this).call(this,e);return"string"==typeof e&&(window.katex.render(e,n,{throwOnError:!1,errorColor:"#f00"}),n.setAttribute("data-value",e)),n}},{key:"value",value:function(e){return e.getAttribute("data-value")}}]),t}(i.default);p.blotName="formula",p.className="ql-formula",p.tagName="SPAN";var d=function(e){function t(){u(this,t);var e=c(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));if(null==window.katex)throw new Error("Formula module requires KaTeX.");return e}return f(t,e),r(t,null,[{key:"register",value:function(){a.default.register(p,!0)}}]),t}(l.default);t.FormulaBlot=p,t.default=d},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.CodeToken=t.CodeBlock=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0},i=s(n(0)),a=s(n(5)),l=s(n(9));function s(e){return e&&e.__esModule?e:{default:e}}function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function c(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function f(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var p=function(e){function t(){return u(this,t),c(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return f(t,e),r(t,[{key:"replaceWith",value:function(e){this.domNode.textContent=this.domNode.textContent,this.attach(),o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"replaceWith",this).call(this,e)}},{key:"highlight",value:function(e){var t=this.domNode.textContent;this.cachedText!==t&&((t.trim().length>0||null==this.cachedText)&&(this.domNode.innerHTML=e(t),this.domNode.normalize(),this.attach()),this.cachedText=t)}}]),t}(s(n(13)).default);p.className="ql-syntax";var d=new i.default.Attributor.Class("token","hljs",{scope:i.default.Scope.INLINE}),h=function(e){function t(e,n){u(this,t);var r=c(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));if("function"!=typeof r.options.highlight)throw new Error("Syntax module requires highlight.js. Please include the library on the page before Quill.");var o=null;return r.quill.on(a.default.events.SCROLL_OPTIMIZE,(function(){clearTimeout(o),o=setTimeout((function(){r.highlight(),o=null}),r.options.interval)})),r.highlight(),r}return f(t,e),r(t,null,[{key:"register",value:function(){a.default.register(d,!0),a.default.register(p,!0)}}]),r(t,[{key:"highlight",value:function(){var e=this;if(!this.quill.selection.composing){this.quill.update(a.default.sources.USER);var t=this.quill.getSelection();this.quill.scroll.descendants(p).forEach((function(t){t.highlight(e.options.highlight)})),this.quill.update(a.default.sources.SILENT),null!=t&&this.quill.setSelection(t,a.default.sources.SILENT)}}}]),t}(l.default);h.DEFAULTS={highlight:null==window.hljs?null:function(e){return window.hljs.highlightAuto(e).value},interval:1e3},t.CodeBlock=p,t.CodeToken=d,t.default=h},function(e,t){e.exports='<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=3 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=3 x2=13 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=9 y1=4 y2=4></line> </svg>'},function(e,t){e.exports='<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=14 x2=4 y1=14 y2=14></line> <line class=ql-stroke x1=12 x2=6 y1=4 y2=4></line> </svg>'},function(e,t){e.exports='<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=15 x2=5 y1=14 y2=14></line> <line class=ql-stroke x1=15 x2=9 y1=4 y2=4></line> </svg>'},function(e,t){e.exports='<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=15 x2=3 y1=14 y2=14></line> <line class=ql-stroke x1=15 x2=3 y1=4 y2=4></line> </svg>'},function(e,t){e.exports='<svg viewbox="0 0 18 18"> <g class="ql-fill ql-color-label"> <polygon points="6 6.868 6 6 5 6 5 7 5.942 7 6 6.868"></polygon> <rect height=1 width=1 x=4 y=4></rect> <polygon points="6.817 5 6 5 6 6 6.38 6 6.817 5"></polygon> <rect height=1 width=1 x=2 y=6></rect> <rect height=1 width=1 x=3 y=5></rect> <rect height=1 width=1 x=4 y=7></rect> <polygon points="4 11.439 4 11 3 11 3 12 3.755 12 4 11.439"></polygon> <rect height=1 width=1 x=2 y=12></rect> <rect height=1 width=1 x=2 y=9></rect> <rect height=1 width=1 x=2 y=15></rect> <polygon points="4.63 10 4 10 4 11 4.192 11 4.63 10"></polygon> <rect height=1 width=1 x=3 y=8></rect> <path d=M10.832,4.2L11,4.582V4H10.708A1.948,1.948,0,0,1,10.832,4.2Z></path> <path d=M7,4.582L7.168,4.2A1.929,1.929,0,0,1,7.292,4H7V4.582Z></path> <path d=M8,13H7.683l-0.351.8a1.933,1.933,0,0,1-.124.2H8V13Z></path> <rect height=1 width=1 x=12 y=2></rect> <rect height=1 width=1 x=11 y=3></rect> <path d=M9,3H8V3.282A1.985,1.985,0,0,1,9,3Z></path> <rect height=1 width=1 x=2 y=3></rect> <rect height=1 width=1 x=6 y=2></rect> <rect height=1 width=1 x=3 y=2></rect> <rect height=1 width=1 x=5 y=3></rect> <rect height=1 width=1 x=9 y=2></rect> <rect height=1 width=1 x=15 y=14></rect> <polygon points="13.447 10.174 13.469 10.225 13.472 10.232 13.808 11 14 11 14 10 13.37 10 13.447 10.174"></polygon> <rect height=1 width=1 x=13 y=7></rect> <rect height=1 width=1 x=15 y=5></rect> <rect height=1 width=1 x=14 y=6></rect> <rect height=1 width=1 x=15 y=8></rect> <rect height=1 width=1 x=14 y=9></rect> <path d=M3.775,14H3v1H4V14.314A1.97,1.97,0,0,1,3.775,14Z></path> <rect height=1 width=1 x=14 y=3></rect> <polygon points="12 6.868 12 6 11.62 6 12 6.868"></polygon> <rect height=1 width=1 x=15 y=2></rect> <rect height=1 width=1 x=12 y=5></rect> <rect height=1 width=1 x=13 y=4></rect> <polygon points="12.933 9 13 9 13 8 12.495 8 12.933 9"></polygon> <rect height=1 width=1 x=9 y=14></rect> <rect height=1 width=1 x=8 y=15></rect> <path d=M6,14.926V15H7V14.316A1.993,1.993,0,0,1,6,14.926Z></path> <rect height=1 width=1 x=5 y=15></rect> <path d=M10.668,13.8L10.317,13H10v1h0.792A1.947,1.947,0,0,1,10.668,13.8Z></path> <rect height=1 width=1 x=11 y=15></rect> <path d=M14.332,12.2a1.99,1.99,0,0,1,.166.8H15V12H14.245Z></path> <rect height=1 width=1 x=14 y=15></rect> <rect height=1 width=1 x=15 y=11></rect> </g> <polyline class=ql-stroke points="5.5 13 9 5 12.5 13"></polyline> <line class=ql-stroke x1=11.63 x2=6.38 y1=11 y2=11></line> </svg>'},function(e,t){e.exports='<svg viewbox="0 0 18 18"> <rect class="ql-fill ql-stroke" height=3 width=3 x=4 y=5></rect> <rect class="ql-fill ql-stroke" height=3 width=3 x=11 y=5></rect> <path class="ql-even ql-fill ql-stroke" d=M7,8c0,4.031-3,5-3,5></path> <path class="ql-even ql-fill ql-stroke" d=M14,8c0,4.031-3,5-3,5></path> </svg>'},function(e,t){e.exports='<svg viewbox="0 0 18 18"> <path class=ql-stroke d=M5,4H9.5A2.5,2.5,0,0,1,12,6.5v0A2.5,2.5,0,0,1,9.5,9H5A0,0,0,0,1,5,9V4A0,0,0,0,1,5,4Z></path> <path class=ql-stroke d=M5,9h5.5A2.5,2.5,0,0,1,13,11.5v0A2.5,2.5,0,0,1,10.5,14H5a0,0,0,0,1,0,0V9A0,0,0,0,1,5,9Z></path> </svg>'},function(e,t){e.exports='<svg class="" viewbox="0 0 18 18"> <line class=ql-stroke x1=5 x2=13 y1=3 y2=3></line> <line class=ql-stroke x1=6 x2=9.35 y1=12 y2=3></line> <line class=ql-stroke x1=11 x2=15 y1=11 y2=15></line> <line class=ql-stroke x1=15 x2=11 y1=11 y2=15></line> <rect class=ql-fill height=1 rx=0.5 ry=0.5 width=7 x=2 y=14></rect> </svg>'},function(e,t){e.exports='<svg viewbox="0 0 18 18"> <line class="ql-color-label ql-stroke ql-transparent" x1=3 x2=15 y1=15 y2=15></line> <polyline class=ql-stroke points="5.5 11 9 3 12.5 11"></polyline> <line class=ql-stroke x1=11.63 x2=6.38 y1=9 y2=9></line> </svg>'},function(e,t){e.exports='<svg viewbox="0 0 18 18"> <polygon class="ql-stroke ql-fill" points="3 11 5 9 3 7 3 11"></polygon> <line class="ql-stroke ql-fill" x1=15 x2=11 y1=4 y2=4></line> <path class=ql-fill d=M11,3a3,3,0,0,0,0,6h1V3H11Z></path> <rect class=ql-fill height=11 width=1 x=11 y=4></rect> <rect class=ql-fill height=11 width=1 x=13 y=4></rect> </svg>'},function(e,t){e.exports='<svg viewbox="0 0 18 18"> <polygon class="ql-stroke ql-fill" points="15 12 13 10 15 8 15 12"></polygon> <line class="ql-stroke ql-fill" x1=9 x2=5 y1=4 y2=4></line> <path class=ql-fill d=M5,3A3,3,0,0,0,5,9H6V3H5Z></path> <rect class=ql-fill height=11 width=1 x=5 y=4></rect> <rect class=ql-fill height=11 width=1 x=7 y=4></rect> </svg>'},function(e,t){e.exports='<svg viewbox="0 0 18 18"> <path class=ql-fill d=M14,16H4a1,1,0,0,1,0-2H14A1,1,0,0,1,14,16Z /> <path class=ql-fill d=M14,4H4A1,1,0,0,1,4,2H14A1,1,0,0,1,14,4Z /> <rect class=ql-fill x=3 y=6 width=12 height=6 rx=1 ry=1 /> </svg>'},function(e,t){e.exports='<svg viewbox="0 0 18 18"> <path class=ql-fill d=M13,16H5a1,1,0,0,1,0-2h8A1,1,0,0,1,13,16Z /> <path class=ql-fill d=M13,4H5A1,1,0,0,1,5,2h8A1,1,0,0,1,13,4Z /> <rect class=ql-fill x=2 y=6 width=14 height=6 rx=1 ry=1 /> </svg>'},function(e,t){e.exports='<svg viewbox="0 0 18 18"> <path class=ql-fill d=M15,8H13a1,1,0,0,1,0-2h2A1,1,0,0,1,15,8Z /> <path class=ql-fill d=M15,12H13a1,1,0,0,1,0-2h2A1,1,0,0,1,15,12Z /> <path class=ql-fill d=M15,16H5a1,1,0,0,1,0-2H15A1,1,0,0,1,15,16Z /> <path class=ql-fill d=M15,4H5A1,1,0,0,1,5,2H15A1,1,0,0,1,15,4Z /> <rect class=ql-fill x=2 y=6 width=8 height=6 rx=1 ry=1 /> </svg>'},function(e,t){e.exports='<svg viewbox="0 0 18 18"> <path class=ql-fill d=M5,8H3A1,1,0,0,1,3,6H5A1,1,0,0,1,5,8Z /> <path class=ql-fill d=M5,12H3a1,1,0,0,1,0-2H5A1,1,0,0,1,5,12Z /> <path class=ql-fill d=M13,16H3a1,1,0,0,1,0-2H13A1,1,0,0,1,13,16Z /> <path class=ql-fill d=M13,4H3A1,1,0,0,1,3,2H13A1,1,0,0,1,13,4Z /> <rect class=ql-fill x=8 y=6 width=8 height=6 rx=1 ry=1 transform="translate(24 18) rotate(-180)"/> </svg>'},function(e,t){e.exports='<svg viewbox="0 0 18 18"> <path class=ql-fill d=M11.759,2.482a2.561,2.561,0,0,0-3.53.607A7.656,7.656,0,0,0,6.8,6.2C6.109,9.188,5.275,14.677,4.15,14.927a1.545,1.545,0,0,0-1.3-.933A0.922,0.922,0,0,0,2,15.036S1.954,16,4.119,16s3.091-2.691,3.7-5.553c0.177-.826.36-1.726,0.554-2.6L8.775,6.2c0.381-1.421.807-2.521,1.306-2.676a1.014,1.014,0,0,0,1.02.56A0.966,0.966,0,0,0,11.759,2.482Z></path> <rect class=ql-fill height=1.6 rx=0.8 ry=0.8 width=5 x=5.15 y=6.2></rect> <path class=ql-fill d=M13.663,12.027a1.662,1.662,0,0,1,.266-0.276q0.193,0.069.456,0.138a2.1,2.1,0,0,0,.535.069,1.075,1.075,0,0,0,.767-0.3,1.044,1.044,0,0,0,.314-0.8,0.84,0.84,0,0,0-.238-0.619,0.8,0.8,0,0,0-.594-0.239,1.154,1.154,0,0,0-.781.3,4.607,4.607,0,0,0-.781,1q-0.091.15-.218,0.346l-0.246.38c-0.068-.288-0.137-0.582-0.212-0.885-0.459-1.847-2.494-.984-2.941-0.8-0.482.2-.353,0.647-0.094,0.529a0.869,0.869,0,0,1,1.281.585c0.217,0.751.377,1.436,0.527,2.038a5.688,5.688,0,0,1-.362.467,2.69,2.69,0,0,1-.264.271q-0.221-.08-0.471-0.147a2.029,2.029,0,0,0-.522-0.066,1.079,1.079,0,0,0-.768.3A1.058,1.058,0,0,0,9,15.131a0.82,0.82,0,0,0,.832.852,1.134,1.134,0,0,0,.787-0.3,5.11,5.11,0,0,0,.776-0.993q0.141-.219.215-0.34c0.046-.076.122-0.194,0.223-0.346a2.786,2.786,0,0,0,.918,1.726,2.582,2.582,0,0,0,2.376-.185c0.317-.181.212-0.565,0-0.494A0.807,0.807,0,0,1,14.176,15a5.159,5.159,0,0,1-.913-2.446l0,0Q13.487,12.24,13.663,12.027Z></path> </svg>'},function(e,t){e.exports='<svg viewBox="0 0 18 18"> <path class=ql-fill d=M10,4V14a1,1,0,0,1-2,0V10H3v4a1,1,0,0,1-2,0V4A1,1,0,0,1,3,4V8H8V4a1,1,0,0,1,2,0Zm6.06787,9.209H14.98975V7.59863a.54085.54085,0,0,0-.605-.60547h-.62744a1.01119,1.01119,0,0,0-.748.29688L11.645,8.56641a.5435.5435,0,0,0-.022.8584l.28613.30762a.53861.53861,0,0,0,.84717.0332l.09912-.08789a1.2137,1.2137,0,0,0,.2417-.35254h.02246s-.01123.30859-.01123.60547V13.209H12.041a.54085.54085,0,0,0-.605.60547v.43945a.54085.54085,0,0,0,.605.60547h4.02686a.54085.54085,0,0,0,.605-.60547v-.43945A.54085.54085,0,0,0,16.06787,13.209Z /> </svg>'},function(e,t){e.exports='<svg viewBox="0 0 18 18"> <path class=ql-fill d=M16.73975,13.81445v.43945a.54085.54085,0,0,1-.605.60547H11.855a.58392.58392,0,0,1-.64893-.60547V14.0127c0-2.90527,3.39941-3.42187,3.39941-4.55469a.77675.77675,0,0,0-.84717-.78125,1.17684,1.17684,0,0,0-.83594.38477c-.2749.26367-.561.374-.85791.13184l-.4292-.34082c-.30811-.24219-.38525-.51758-.1543-.81445a2.97155,2.97155,0,0,1,2.45361-1.17676,2.45393,2.45393,0,0,1,2.68408,2.40918c0,2.45312-3.1792,2.92676-3.27832,3.93848h2.79443A.54085.54085,0,0,1,16.73975,13.81445ZM9,3A.99974.99974,0,0,0,8,4V8H3V4A1,1,0,0,0,1,4V14a1,1,0,0,0,2,0V10H8v4a1,1,0,0,0,2,0V4A.99974.99974,0,0,0,9,3Z /> </svg>'},function(e,t){e.exports='<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=7 x2=13 y1=4 y2=4></line> <line class=ql-stroke x1=5 x2=11 y1=14 y2=14></line> <line class=ql-stroke x1=8 x2=10 y1=14 y2=4></line> </svg>'},function(e,t){e.exports='<svg viewbox="0 0 18 18"> <rect class=ql-stroke height=10 width=12 x=3 y=4></rect> <circle class=ql-fill cx=6 cy=7 r=1></circle> <polyline class="ql-even ql-fill" points="5 12 5 11 7 9 8 10 11 7 13 9 13 12 5 12"></polyline> </svg>'},function(e,t){e.exports='<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=3 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class="ql-fill ql-stroke" points="3 7 3 11 5 9 3 7"></polyline> </svg>'},function(e,t){e.exports='<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=3 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class=ql-stroke points="5 7 5 11 3 9 5 7"></polyline> </svg>'},function(e,t){e.exports='<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=7 x2=11 y1=7 y2=11></line> <path class="ql-even ql-stroke" d=M8.9,4.577a3.476,3.476,0,0,1,.36,4.679A3.476,3.476,0,0,1,4.577,8.9C3.185,7.5,2.035,6.4,4.217,4.217S7.5,3.185,8.9,4.577Z></path> <path class="ql-even ql-stroke" d=M13.423,9.1a3.476,3.476,0,0,0-4.679-.36,3.476,3.476,0,0,0,.36,4.679c1.392,1.392,2.5,2.542,4.679.36S14.815,10.5,13.423,9.1Z></path> </svg>'},function(e,t){e.exports='<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=7 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=7 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=7 x2=15 y1=14 y2=14></line> <line class="ql-stroke ql-thin" x1=2.5 x2=4.5 y1=5.5 y2=5.5></line> <path class=ql-fill d=M3.5,6A0.5,0.5,0,0,1,3,5.5V3.085l-0.276.138A0.5,0.5,0,0,1,2.053,3c-0.124-.247-0.023-0.324.224-0.447l1-.5A0.5,0.5,0,0,1,4,2.5v3A0.5,0.5,0,0,1,3.5,6Z></path> <path class="ql-stroke ql-thin" d=M4.5,10.5h-2c0-.234,1.85-1.076,1.85-2.234A0.959,0.959,0,0,0,2.5,8.156></path> <path class="ql-stroke ql-thin" d=M2.5,14.846a0.959,0.959,0,0,0,1.85-.109A0.7,0.7,0,0,0,3.75,14a0.688,0.688,0,0,0,.6-0.736,0.959,0.959,0,0,0-1.85-.109></path> </svg>'},function(e,t){e.exports='<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=6 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=6 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=6 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=3 y1=4 y2=4></line> <line class=ql-stroke x1=3 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=3 x2=3 y1=14 y2=14></line> </svg>'},function(e,t){e.exports='<svg class="" viewbox="0 0 18 18"> <line class=ql-stroke x1=9 x2=15 y1=4 y2=4></line> <polyline class=ql-stroke points="3 4 4 5 6 3"></polyline> <line class=ql-stroke x1=9 x2=15 y1=14 y2=14></line> <polyline class=ql-stroke points="3 14 4 15 6 13"></polyline> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class=ql-stroke points="3 9 4 10 6 8"></polyline> </svg>'},function(e,t){e.exports='<svg viewbox="0 0 18 18"> <path class=ql-fill d=M15.5,15H13.861a3.858,3.858,0,0,0,1.914-2.975,1.8,1.8,0,0,0-1.6-1.751A1.921,1.921,0,0,0,12.021,11.7a0.50013,0.50013,0,1,0,.957.291h0a0.914,0.914,0,0,1,1.053-.725,0.81,0.81,0,0,1,.744.762c0,1.076-1.16971,1.86982-1.93971,2.43082A1.45639,1.45639,0,0,0,12,15.5a0.5,0.5,0,0,0,.5.5h3A0.5,0.5,0,0,0,15.5,15Z /> <path class=ql-fill d=M9.65,5.241a1,1,0,0,0-1.409.108L6,7.964,3.759,5.349A1,1,0,0,0,2.192,6.59178Q2.21541,6.6213,2.241,6.649L4.684,9.5,2.241,12.35A1,1,0,0,0,3.71,13.70722q0.02557-.02768.049-0.05722L6,11.036,8.241,13.65a1,1,0,1,0,1.567-1.24277Q9.78459,12.3777,9.759,12.35L7.316,9.5,9.759,6.651A1,1,0,0,0,9.65,5.241Z /> </svg>'},function(e,t){e.exports='<svg viewbox="0 0 18 18"> <path class=ql-fill d=M15.5,7H13.861a4.015,4.015,0,0,0,1.914-2.975,1.8,1.8,0,0,0-1.6-1.751A1.922,1.922,0,0,0,12.021,3.7a0.5,0.5,0,1,0,.957.291,0.917,0.917,0,0,1,1.053-.725,0.81,0.81,0,0,1,.744.762c0,1.077-1.164,1.925-1.934,2.486A1.423,1.423,0,0,0,12,7.5a0.5,0.5,0,0,0,.5.5h3A0.5,0.5,0,0,0,15.5,7Z /> <path class=ql-fill d=M9.651,5.241a1,1,0,0,0-1.41.108L6,7.964,3.759,5.349a1,1,0,1,0-1.519,1.3L4.683,9.5,2.241,12.35a1,1,0,1,0,1.519,1.3L6,11.036,8.241,13.65a1,1,0,0,0,1.519-1.3L7.317,9.5,9.759,6.651A1,1,0,0,0,9.651,5.241Z /> </svg>'},function(e,t){e.exports='<svg viewbox="0 0 18 18"> <line class="ql-stroke ql-thin" x1=15.5 x2=2.5 y1=8.5 y2=9.5></line> <path class=ql-fill d=M9.007,8C6.542,7.791,6,7.519,6,6.5,6,5.792,7.283,5,9,5c1.571,0,2.765.679,2.969,1.309a1,1,0,0,0,1.9-.617C13.356,4.106,11.354,3,9,3,6.2,3,4,4.538,4,6.5a3.2,3.2,0,0,0,.5,1.843Z></path> <path class=ql-fill d=M8.984,10C11.457,10.208,12,10.479,12,11.5c0,0.708-1.283,1.5-3,1.5-1.571,0-2.765-.679-2.969-1.309a1,1,0,1,0-1.9.617C4.644,13.894,6.646,15,9,15c2.8,0,5-1.538,5-3.5a3.2,3.2,0,0,0-.5-1.843Z></path> </svg>'},function(e,t){e.exports='<svg viewbox="0 0 18 18"> <path class=ql-stroke d=M5,3V9a4.012,4.012,0,0,0,4,4H9a4.012,4.012,0,0,0,4-4V3></path> <rect class=ql-fill height=1 rx=0.5 ry=0.5 width=12 x=3 y=15></rect> </svg>'},function(e,t){e.exports='<svg viewbox="0 0 18 18"> <rect class=ql-stroke height=12 width=12 x=3 y=3></rect> <rect class=ql-fill height=12 width=1 x=5 y=3></rect> <rect class=ql-fill height=12 width=1 x=12 y=3></rect> <rect class=ql-fill height=2 width=8 x=5 y=8></rect> <rect class=ql-fill height=1 width=3 x=3 y=5></rect> <rect class=ql-fill height=1 width=3 x=3 y=7></rect> <rect class=ql-fill height=1 width=3 x=3 y=10></rect> <rect class=ql-fill height=1 width=3 x=3 y=12></rect> <rect class=ql-fill height=1 width=3 x=12 y=5></rect> <rect class=ql-fill height=1 width=3 x=12 y=7></rect> <rect class=ql-fill height=1 width=3 x=12 y=10></rect> <rect class=ql-fill height=1 width=3 x=12 y=12></rect> </svg>'},function(e,t){e.exports='<svg viewbox="0 0 18 18"> <polygon class=ql-stroke points="7 11 9 13 11 11 7 11"></polygon> <polygon class=ql-stroke points="7 7 9 5 11 7 7 7"></polygon> </svg>'},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.BubbleTooltip=void 0;var r=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=f(n(3)),a=f(n(8)),l=n(43),s=f(l),u=n(15),c=f(n(41));function f(e){return e&&e.__esModule?e:{default:e}}function p(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function d(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function h(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var y=[["bold","italic","link"],[{header:1},{header:2},"blockquote"]],v=function(e){function t(e,n){p(this,t),null!=n.modules.toolbar&&null==n.modules.toolbar.container&&(n.modules.toolbar.container=y);var r=d(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));return r.quill.container.classList.add("ql-bubble"),r}return h(t,e),o(t,[{key:"extendToolbar",value:function(e){this.tooltip=new m(this.quill,this.options.bounds),this.tooltip.root.appendChild(e.container),this.buildButtons([].slice.call(e.container.querySelectorAll("button")),c.default),this.buildPickers([].slice.call(e.container.querySelectorAll("select")),c.default)}}]),t}(s.default);v.DEFAULTS=(0,i.default)(!0,{},s.default.DEFAULTS,{modules:{toolbar:{handlers:{link:function(e){e?this.quill.theme.tooltip.edit():this.quill.format("link",!1)}}}}});var m=function(e){function t(e,n){p(this,t);var r=d(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));return r.quill.on(a.default.events.EDITOR_CHANGE,(function(e,t,n,o){if(e===a.default.events.SELECTION_CHANGE)if(null!=t&&t.length>0&&o===a.default.sources.USER){r.show(),r.root.style.left="0px",r.root.style.width="",r.root.style.width=r.root.offsetWidth+"px";var i=r.quill.getLines(t.index,t.length);if(1===i.length)r.position(r.quill.getBounds(t));else{var l=i[i.length-1],s=r.quill.getIndex(l),c=Math.min(l.length()-1,t.index+t.length-s),f=r.quill.getBounds(new u.Range(s,c));r.position(f)}}else document.activeElement!==r.textbox&&r.quill.hasFocus()&&r.hide()})),r}return h(t,e),o(t,[{key:"listen",value:function(){var e=this;r(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"listen",this).call(this),this.root.querySelector(".ql-close").addEventListener("click",(function(){e.root.classList.remove("ql-editing")})),this.quill.on(a.default.events.SCROLL_OPTIMIZE,(function(){setTimeout((function(){if(!e.root.classList.contains("ql-hidden")){var t=e.quill.getSelection();null!=t&&e.position(e.quill.getBounds(t))}}),1)}))}},{key:"cancel",value:function(){this.show()}},{key:"position",value:function(e){var n=r(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"position",this).call(this,e),o=this.root.querySelector(".ql-tooltip-arrow");if(o.style.marginLeft="",0===n)return n;o.style.marginLeft=-1*n-o.offsetWidth/2+"px"}}]),t}(l.BaseTooltip);m.TEMPLATE=['<span class="ql-tooltip-arrow"></span>','<div class="ql-tooltip-editor">','<input type="text" data-formula="e=mc^2" data-link="https://quilljs.com" data-video="Embed URL">','<a class="ql-close"></a>',"</div>"].join(""),t.BubbleTooltip=m,t.default=v},function(e,t,n){e.exports=n(63)}]).default},e.exports=r()},7478:(e,t,n)=>{"use strict";var r=n(210),o=n(1924),i=n(631),a=r("%TypeError%"),l=r("%WeakMap%",!0),s=r("%Map%",!0),u=o("WeakMap.prototype.get",!0),c=o("WeakMap.prototype.set",!0),f=o("WeakMap.prototype.has",!0),p=o("Map.prototype.get",!0),d=o("Map.prototype.set",!0),h=o("Map.prototype.has",!0),y=function(e,t){for(var n,r=e;null!==(n=r.next);r=n)if(n.key===t)return r.next=n.next,n.next=e.next,e.next=n,n};e.exports=function(){var e,t,n,r={assert:function(e){if(!r.has(e))throw new a("Side channel does not contain "+i(e))},get:function(r){if(l&&r&&("object"==typeof r||"function"==typeof r)){if(e)return u(e,r)}else if(s){if(t)return p(t,r)}else if(n)return function(e,t){var n=y(e,t);return n&&n.value}(n,r)},has:function(r){if(l&&r&&("object"==typeof r||"function"==typeof r)){if(e)return f(e,r)}else if(s){if(t)return h(t,r)}else if(n)return function(e,t){return!!y(e,t)}(n,r);return!1},set:function(r,o){l&&r&&("object"==typeof r||"function"==typeof r)?(e||(e=new l),c(e,r,o)):s?(t||(t=new s),d(t,r,o)):(n||(n={key:{},next:null}),function(e,t,n){var r=y(e,t);r?r.value=n:e.next={key:t,next:e.next,value:n}}(n,r,o))}};return r}},3744:(e,t)=>{"use strict";t.Z=(e,t)=>{const n=e.__vccOpts||e;for(const[e,r]of t)n[e]=r;return n}},9064:(e,t,n)=>{"use strict";n.d(t,{Z:()=>m});var r=n(6252),o=n(9963),i=n(3577),a={class:"form-group form-group--inline"},l={class:"form-label",for:"actions-select"},s={value:null},u=["value"],c=["disabled"];function f(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?f(Object(n),!0).forEach((function(t){d(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):f(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}const h={props:{action:{type:Object,required:!0},selection:{type:Array,required:!0},allMatching:{type:Boolean,required:!0}},emits:["success","error"],data:function(){return{form:this.$inertia.form(this.action.key,Object.assign({},this.action.data))}},methods:{open:function(){this.$refs.modal.open()},submit:function(){var e=this;this.form.transform((function(t){return p(p({},t),{},{all:e.allMatching,models:e.selection})})).post(this.action.url,{onBefore:function(){if(e.action.confirmable)return window.confirm(e.__("Are you sure?"))},onSuccess:function(){e.$emit("success"),e.$refs.modal.close()},onError:function(t){e.$emit("error")}},{errorBag:this.action.key})}}};var y=n(3744);const v={components:{Action:(0,y.Z)(h,[["render",function(e,t,n,a,l,s){var u=(0,r.up)("FormHandler"),c=(0,r.up)("Modal");return(0,r.wg)(),(0,r.iD)("form",{onSubmit:t[0]||(t[0]=(0,o.iM)((function(){return s.submit&&s.submit.apply(s,arguments)}),["prevent"]))},[(0,r.Wm)(c,{ref:"modal",title:n.action.name},{footer:(0,r.w5)((function(){return[(0,r._)("button",{type:"submit",class:(0,i.C_)(["btn",{"btn--delete":n.action.destructive,"btn--primary":!n.action.destructive}])},(0,i.zw)(e.__("Run")),3)]})),default:(0,r.w5)((function(){return[((0,r.wg)(!0),(0,r.iD)(r.HY,null,(0,r.Ko)(n.action.fields,(function(e){return(0,r.wg)(),(0,r.j4)(u,(0,r.dG)(e,{modelValue:l.form[e.name],"onUpdate:modelValue":function(t){return l.form[e.name]=t},form:l.form,key:e.name,name:e.name}),null,16,["modelValue","onUpdate:modelValue","form","name"])})),128))]})),_:1},8,["title"])],32)}]])},props:{actions:{type:Array,default:function(){return[]}},selection:{type:Array,default:function(){return[]}},allMatching:{type:Boolean,default:!1}},emits:["success","error"],data:function(){return{_action:null}},methods:{submit:function(){this.$refs.action[this._action].open()}}},m=(0,y.Z)(v,[["render",function(e,t,n,f,p,d){var h=(0,r.up)("Action");return(0,r.wg)(),(0,r.iD)("div",null,[(0,r._)("form",{onSubmit:t[1]||(t[1]=(0,o.iM)((function(){return d.submit&&d.submit.apply(d,arguments)}),["prevent"])),class:"form--inline"},[(0,r._)("div",a,[(0,r._)("label",l,(0,i.zw)(e.__("Action")),1),(0,r.wy)((0,r._)("select",{id:"actions-select",class:"form-control","onUpdate:modelValue":t[0]||(t[0]=function(e){return p._action=e})},[(0,r._)("option",s,(0,i.zw)(e.__("Select :label",{label:e.__("Action")})),1),((0,r.wg)(!0),(0,r.iD)(r.HY,null,(0,r.Ko)(n.actions,(function(e,t){return(0,r.wg)(),(0,r.iD)("option",{value:t,key:t},(0,i.zw)(e.name),9,u)})),128))],512),[[o.bM,p._action]])]),(0,r._)("button",{type:"submit",class:"btn btn--primary",disabled:null===p._action||0===n.selection.length},(0,i.zw)(e.__("Run")),9,c)],32),(0,r._)("div",null,[((0,r.wg)(!0),(0,r.iD)(r.HY,null,(0,r.Ko)(n.actions,(function(t){return(0,r.wg)(),(0,r.j4)(h,{ref_for:!0,ref:"action",action:t,"all-matching":n.allMatching,key:t.key,selection:n.selection,onError:function(n){return e.$emit("error",t)},onSuccess:function(n){return e.$emit("success",t)}},null,8,["action","all-matching","selection","onError","onSuccess"])})),128))])])}]])},6244:(e,t,n)=>{"use strict";n.d(t,{Z:()=>h});var r=n(6252),o=n(9963),i=n(3577),a={class:"form-layout"},l={class:"app-card card card--edit"},s={class:"card__inner"},u={class:"form-group-stack"},c={class:"form-group--submit"},f=["disabled"],p=["disabled"];const d={props:{model:{type:Object,required:!0}},data:function(){return{form:this.$inertia.form(Object.assign({},this.model.data))}},computed:{exists:function(){return null!==this.model.id},method:function(){return this.exists?"patch":"post"}},methods:{submit:function(){var e=this;this.form.submit(this.method,this.model.url,{onStart:function(){e.form.clearErrors()},onFinish:function(){window.scrollTo({top:0,behavior:"smooth"})}})},destroy:function(){var e=this;this.$inertia.delete(this.model.url,{onBefore:function(){return window.confirm(e.__("Are you sure?"))}})}}};const h=(0,n(3744).Z)(d,[["render",function(e,t,n,d,h,y){return(0,r.wg)(),(0,r.iD)("div",a,[(0,r._)("div",l,[(0,r._)("div",s,[(0,r._)("form",{onSubmit:t[1]||(t[1]=(0,o.iM)((function(){return y.submit&&y.submit.apply(y,arguments)}),["prevent"])),onReset:t[2]||(t[2]=(0,o.iM)((function(){var e;return h.form.reset&&(e=h.form).reset.apply(e,arguments)}),["prevent"]))},[(0,r._)("div",u,[(0,r.WI)(e.$slots,"default"),(0,r._)("div",c,[(0,r._)("button",{type:"submit",class:"btn btn--primary",disabled:h.form.processing},(0,i.zw)(e.__("Save")),9,f),y.exists?((0,r.wg)(),(0,r.iD)("button",{key:0,type:"button",class:"btn btn--delete",disabled:h.form.processing,onClick:t[0]||(t[0]=function(){return y.destroy&&y.destroy.apply(y,arguments)})},(0,i.zw)(e.__("Delete")),9,p)):(0,r.kq)("",!0)])])],32)])])])}]])},2996:(e,t,n)=>{"use strict";n.d(t,{Z:()=>le});var r=n(6252),o=n(3577),i={key:0,class:"app-operation"},a={class:"app-list"},l={class:"card"},s={class:"table-responsive"},u={key:0,class:"table table--striped table--clear-border table--rounded"},c={key:1,class:"alert alert--info"};var f=n(9064),p=n(9963);const d={props:{extracts:{type:Array,required:!0}},data:function(){return{_extract:null,form:this.$inertia.form(this.name,{})}},computed:{name:function(){return window.location.pathname+"-extracts"},options:function(){return this.extracts.map((function(e){return{value:e.key,formatted_value:e.name}}))}},methods:{submit:function(){var e=this,t=this.extracts.find((function(t){return t.key=e._extract}));this.form.get(t.url)}}};var h=n(3744);const y=(0,h.Z)(d,[["render",function(e,t,n,o,i,a){var l=(0,r.up)("FormHandler");return(0,r.wg)(),(0,r.iD)("form",{onSubmit:t[1]||(t[1]=(0,p.iM)((function(){}),["prevent"])),onReset:t[2]||(t[2]=(0,p.iM)((function(){}),["prevent"]))},[(0,r.Wm)(l,{nullable:"",class:"form-group--inline",component:"Select",modelValue:i._extract,"onUpdate:modelValue":[t[0]||(t[0]=function(e){return i._extract=e}),a.submit],name:a.name,id:a.name,form:i.form,label:e.__("Extract"),options:a.options},null,8,["modelValue","name","id","form","label","options","onUpdate:modelValue"])],32)}]]);var v={class:"app-operation__filter"},m=["aria-label"],g={key:0,class:"btn__counter"},b={class:"app-filter"},_={class:"app-filter__title"},w={class:"app-filter__inner"},O={class:"form-group--reset"},k=["aria-label"];const S={mixins:[n(704).Z],props:{filters:{type:Array,default:function(){return[]}},query:{type:Object,required:!0}},emits:["update:query"],computed:{activeFilters:function(){return this.filters.filter((function(e){return e.active})).length}},methods:{emit:function(){this.$emit("update:query")},reset:function(){this.$inertia.get(this.$parent.items.path)}}},x=(0,h.Z)(S,[["render",function(e,t,n,i,a,l){var s=(0,r.up)("Icon"),u=(0,r.up)("FormHandler"),c=(0,r.Q2)("debounce");return(0,r.wg)(),(0,r.iD)("div",v,[(0,r._)("button",{type:"button",class:"btn btn--secondary btn--icon btn--has-counter","aria-label":e.isOpen?e.__("Close filters"):e.__("Open filters"),onClick:t[0]||(t[0]=function(){return e.toggle&&e.toggle.apply(e,arguments)})},[(0,r.Wm)(s,{class:"btn__icon btn__icon--start",name:e.isOpen?"filter-list-off":"filter-list"},null,8,["name"]),l.activeFilters>0?((0,r.wg)(),(0,r.iD)("span",g,(0,o.zw)(l.activeFilters),1)):(0,r.kq)("",!0)],8,m),(0,r.wy)((0,r._)("div",b,[(0,r._)("h2",_,[(0,r.Uk)((0,o.zw)(e.__("Filters"))+" ",1),(0,r._)("button",{type:"button",class:"btn btn--secondary btn--sm btn--icon",onClick:t[1]||(t[1]=function(){return e.close&&e.close.apply(e,arguments)})},[(0,r.Wm)(s,{class:"btn__icon btn__icon--sm",name:"close"})])]),(0,r._)("div",w,[((0,r.wg)(!0),(0,r.iD)(r.HY,null,(0,r.Ko)(n.filters,(function(e){return(0,r.wy)(((0,r.wg)(),(0,r.j4)(u,(0,r.dG)(e,{modelValue:n.query[e.key],"onUpdate:modelValue":[function(t){return n.query[e.key]=t},l.emit],form:n.query,key:e.key,name:e.key,label:e.name}),null,16,["modelValue","onUpdate:modelValue","form","name","label"])),[[c,300]])})),128)),(0,r._)("div",O,[(0,r._)("button",{type:"button",class:"btn btn--sm btn--icon btn--tertiary","aria-label":e.__("Reset"),onClick:t[2]||(t[2]=function(){return l.reset&&l.reset.apply(l,arguments)})},(0,o.zw)(e.__("Reset")),9,k)])])],512),[[p.F8,e.isOpen]])])}]]);var E={key:0,scope:"col"},j={class:"th-helper"},A={class:"form-check"},P=(0,r._)("span",{class:"form-label form-check__label","aria-label":""},null,-1),T={class:"dropdown__item"},C=(0,r._)("hr",{class:"dropdown__divider"},null,-1),N={class:"dropdown__item"},q={class:"form-check"},L={class:"form-label form-check__label"},R={class:"th-helper"},I=["onClick"],M=(0,r._)("th",{scope:"col"}," ",-1);const D={props:{items:{type:Array,required:!0},selection:{type:Array,required:!0},query:{type:Object,required:!0},columns:{type:Array,required:!0}},emits:["update:query"],watch:{indeterminate:function(e,t){this.$refs.input.indeterminate=e}},computed:{selected:{get:function(){return this.selection.length>0&&this.selection.length===this.items.length},set:function(e){e?this.$parent.selectAll():this.$parent.clearSelection()}},allMatching:{get:function(){return this.$parent.allMatching},set:function(e){e?this.$parent.selectAll(!0):this.$parent.clearSelection()}},indeterminate:function(){return this.selection.length>0&&this.selection.length<this.items.length},totalItems:function(){return this.allMatching?this.$parent.items.total:this.selection.length}},methods:{icon:function(e){return this.query.sort.by!==e?"unfold-more":"desc"===this.query.sort.order?"unfold-more-top":"unfold-more-bottom"},sort:function(e){this.query.sort.by=e,this.query.sort.order="desc"===this.query.sort.order?"asc":"desc",this.$emit("update:query")}}},U=(0,h.Z)(D,[["render",function(e,t,n,i,a,l){var s=(0,r.up)("Dropdown"),u=(0,r.up)("Icon");return(0,r.wg)(),(0,r.iD)("thead",null,[(0,r._)("tr",null,[e.$parent.actions.length>0?((0,r.wg)(),(0,r.iD)("th",E,[(0,r._)("div",j,[(0,r._)("label",A,[(0,r.wy)((0,r._)("input",{ref:"input",class:"form-check__control",type:"checkbox","onUpdate:modelValue":t[0]||(t[0]=function(e){return l.selected=e}),style:{"margin-inline-end":"0"}},null,512),[[p.e8,l.selected]]),P]),(0,r.Wm)(s,{id:"table-selection-control"},{default:(0,r.w5)((function(){return[(0,r._)("li",T,(0,o.zw)(e.__(":count items are selected",{count:l.totalItems})),1),C,(0,r._)("li",N,[(0,r._)("label",q,[(0,r.wy)((0,r._)("input",{class:"form-check__control",type:"checkbox","onUpdate:modelValue":t[1]||(t[1]=function(e){return l.allMatching=e})},null,512),[[p.e8,l.allMatching]]),(0,r._)("span",L,(0,o.zw)(e.__("Select all matching (:count)",{count:e.$parent.items.total})),1)])])]})),_:1})])])):(0,r.kq)("",!0),((0,r.wg)(!0),(0,r.iD)(r.HY,null,(0,r.Ko)(n.columns,(function(e){return(0,r.wg)(),(0,r.iD)("th",{key:e.name,scope:"col"},[(0,r._)("div",R,[(0,r.Uk)((0,o.zw)(e.label)+" ",1),e.sortable?((0,r.wg)(),(0,r.iD)("button",{key:0,type:"button",onClick:function(t){return l.sort(e.name)},class:"table-sort-btn"},[(0,r.Wm)(u,{name:l.icon(e.name)},null,8,["name"])],8,I)):(0,r.kq)("",!0)])])})),128)),M])])}]]);var B={class:"list-footer"},F={class:"list-footer__pager"},$=["value"],V=["value"],H={for:"per-page"},z={class:"list-footer__pagination"};var W=n(9038);const K={components:{Link:W.rU},props:{items:{type:Object,required:!0},query:{type:Object,required:!0}},emits:["update:query"],data:function(){return{counts:[15,25,50,100]}},methods:{emit:function(){this.$emit("update:query")}}},Z=(0,h.Z)(K,[["render",function(e,t,n,i,a,l){var s=(0,r.up)("Link");return(0,r.wg)(),(0,r.iD)("div",B,[(0,r._)("div",F,[(0,r.wy)((0,r._)("select",{class:"form-control form-control--sm",id:"per-page","onUpdate:modelValue":[t[0]||(t[0]=function(e){return n.query.per_page=e}),t[1]||(t[1]=function(){return l.emit&&l.emit.apply(l,arguments)})]},[a.counts.includes(n.query.per_page)?(0,r.kq)("",!0):((0,r.wg)(),(0,r.iD)("option",{key:0,disabled:"",value:n.query.per_page},(0,o.zw)(e.__("Custom (:count)",{count:n.query.per_page})),9,$)),((0,r.wg)(!0),(0,r.iD)(r.HY,null,(0,r.Ko)(a.counts,(function(e){return(0,r.wg)(),(0,r.iD)("option",{key:e,value:e},(0,o.zw)(e),9,V)})),128))],512),[[p.bM,n.query.per_page,void 0,{number:!0}]]),(0,r._)("label",H,(0,o.zw)(e.__("of :count items",{count:n.items.total})),1)]),(0,r._)("ul",z,[((0,r.wg)(!0),(0,r.iD)(r.HY,null,(0,r.Ko)(n.items.links,(function(e,t){return(0,r.wg)(),(0,r.iD)("li",{key:t},[(0,r.Wm)(s,{class:"btn btn--primary btn--sm",type:"button",as:null===e.url||e.active?"button":"a",disabled:null===e.url||e.active,href:e.url,"aria-current":e.active?"page":"",innerHTML:e.label},null,8,["as","disabled","href","aria-current","innerHTML"])])})),128))])])}]]);var Y={key:0,scope:"row"},G={class:"form-check",style:{position:"relative",top:"3px"}},J=(0,r._)("span",{class:"form-label form-check__label","aria-label":""},null,-1),X=["innerHTML"],Q={class:"table__actions"},ee=["aria-label"];const te={components:{Link:W.rU},props:{item:{type:Object,required:!0}},computed:{selected:{get:function(){return this.$parent.selected(this.item)},set:function(e){e?this.$parent.select(this.item):this.$parent.deselect(this.item)}}},methods:{destroy:function(){var e=this;this.$inertia.delete(this.item.url,{onBefore:function(){return confirm(e.__("Are you sure?"))},onStart:function(t){return e.$parent.deselect(e.item)}})}}},ne=(0,h.Z)(te,[["render",function(e,t,n,i,a,l){var s=(0,r.up)("Icon"),u=(0,r.up)("Link");return(0,r.wg)(),(0,r.iD)("tr",{class:(0,o.C_)({"is-selected":l.selected,"is-trashed":n.item.trashed})},[e.$parent.actions.length>0?((0,r.wg)(),(0,r.iD)("th",Y,[(0,r._)("label",G,[(0,r.wy)((0,r._)("input",{class:"form-check__control",type:"checkbox","onUpdate:modelValue":t[0]||(t[0]=function(e){return l.selected=e})},null,512),[[p.e8,l.selected]]),J])])):(0,r.kq)("",!0),((0,r.wg)(!0),(0,r.iD)(r.HY,null,(0,r.Ko)(n.item.fields,(function(e){return(0,r.wg)(),(0,r.iD)("td",{key:"".concat(n.item.id,"-").concat(e.name),innerHTML:e.formatted_value},null,8,X)})),128)),(0,r._)("td",null,[(0,r._)("div",Q,[n.item.abilities.delete?((0,r.wg)(),(0,r.iD)("button",{key:0,type:"button",class:"btn btn--icon btn--delete btn--sm","aria-label":e.__("Delete"),onClick:t[1]||(t[1]=function(){return l.destroy&&l.destroy.apply(l,arguments)})},[(0,r.Wm)(s,{class:"btn__icon",name:"delete"})],8,ee)):(0,r.kq)("",!0),n.item.abilities.view?((0,r.wg)(),(0,r.j4)(u,{key:1,href:n.item.url,class:"btn btn--icon btn--tertiary btn--sm","aria-label":e.__("View")},{default:(0,r.w5)((function(){return[(0,r.Wm)(s,{class:"btn__icon",name:"view"})]})),_:1},8,["href","aria-label"])):(0,r.kq)("",!0),n.item.abilities.update?((0,r.wg)(),(0,r.j4)(u,{key:2,href:"".concat(n.item.url,"/edit"),class:"btn btn--icon btn--tertiary btn--sm","aria-label":e.__("Edit")},{default:(0,r.w5)((function(){return[(0,r.Wm)(s,{class:"btn__icon",name:"edit"})]})),_:1},8,["href","aria-label"])):(0,r.kq)("",!0)])])],2)}]]);function re(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function oe(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?re(Object(n),!0).forEach((function(t){ie(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):re(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function ie(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}const ae={components:{Actions:f.Z,Extracts:y,Filters:x,Head:U,Pagination:Z,Row:ne},props:{actions:{type:Array,default:function(){return[]}},extracts:{type:Array,default:function(){return[]}},filters:{type:Array,default:function(){return[]}},items:{type:Object,required:!0}},data:function(){return{selection:[],allMatching:!1,processing:!1,query:this.$inertia.form(window.location.href,this.items.query)}},computed:{columns:function(){var e,t;return((null===(e=this.items.data)||void 0===e||null===(t=e[0])||void 0===t?void 0:t.fields)||[]).map((function(e){return{label:e.label,name:e.name,sortable:e.sortable,searchable:e.searchable}}))}},methods:{selected:function(e){return this.selection.includes(e.id)},select:function(e){this.selection.includes(e.id)||this.selection.push(e.id)},deselect:function(e){var t=this.selection.indexOf(e.id);-1!==t&&this.selection.splice(t,1),this.allMatching=!1},selectAll:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];this.allMatching=e,this.selection=this.items.data.map((function(e){return e.id}))},clearSelection:function(){this.allMatching=!1,this.selection=[]},fetch:function(){var e=this;this.query.transform((function(e){return oe(oe({},e),{},{page:1})})).get(this.items.path,{replace:!0,preserveState:!0,preserveScroll:!0,onStart:function(){e.processing=!0},onFinish:function(){e.clearSelection(),e.processing=!1}})}}},le=(0,h.Z)(ae,[["render",function(e,t,n,f,p,d){var h=(0,r.up)("Filters"),y=(0,r.up)("Actions"),v=(0,r.up)("Extracts"),m=(0,r.up)("Head"),g=(0,r.up)("Row"),b=(0,r.up)("Pagination");return(0,r.wg)(),(0,r.iD)("div",null,[n.filters.length>0||n.actions.length>0||n.extracts.length>0?((0,r.wg)(),(0,r.iD)("div",i,[n.filters.length>0?((0,r.wg)(),(0,r.j4)(h,{key:0,query:p.query,filters:n.filters,"onUpdate:query":d.fetch},null,8,["query","filters","onUpdate:query"])):(0,r.kq)("",!0),n.actions.length>0?((0,r.wg)(),(0,r.j4)(y,{key:1,actions:n.actions,"all-matching":p.allMatching,selection:p.selection,onSuccess:d.clearSelection},null,8,["actions","all-matching","selection","onSuccess"])):(0,r.kq)("",!0),n.extracts.length>0?((0,r.wg)(),(0,r.j4)(v,{key:2,extracts:n.extracts},null,8,["extracts"])):(0,r.kq)("",!0)])):(0,r.kq)("",!0),(0,r._)("div",a,[(0,r._)("div",l,[(0,r._)("div",s,[n.items.data.length?((0,r.wg)(),(0,r.iD)("table",u,[(0,r.Wm)(m,{items:n.items.data,query:p.query,selection:p.selection,columns:d.columns,"onUpdate:query":d.fetch},null,8,["items","query","selection","columns","onUpdate:query"]),(0,r._)("tbody",null,[((0,r.wg)(!0),(0,r.iD)(r.HY,null,(0,r.Ko)(n.items.data,(function(e){return(0,r.wg)(),(0,r.j4)(g,{key:e.id,item:e},null,8,["item"])})),128))])])):((0,r.wg)(),(0,r.iD)("div",c,(0,o.zw)(e.__("No results found.")),1))])]),(0,r.Wm)(b,{query:p.query,items:n.items,"onUpdate:query":d.fetch},null,8,["query","items","onUpdate:query"])])])}]])},6420:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>a});var r=n(6252),o={class:"app-widget"};const i={components:{Widget:n(2236).Z},props:{widgets:{type:Array,default:function(){return[]}}},layout:function(e,t){return e(this.resolveDefaultLayout(),(function(){return t}))}};const a=(0,n(3744).Z)(i,[["render",function(e,t,n,i,a,l){var s=(0,r.up)("Widget");return(0,r.wg)(),(0,r.iD)("div",o,[((0,r.wg)(!0),(0,r.iD)(r.HY,null,(0,r.Ko)(n.widgets,(function(e){return(0,r.wg)(),(0,r.j4)(s,(0,r.dG)({key:e.key},e),null,16)})),128))])}]])},9822:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>a});var r=n(6252),o=n(3577);const i={props:{status:{type:Number,required:!0}},computed:{title:function(){return{503:"503: Service Unavailable",500:"500: Server Error",404:"404: Page Not Found",403:"403: Forbidden"}[this.status]},description:function(){return{503:"Sorry, we are doing some maintenance. Please check back soon.",500:"Whoops, something went wrong on our servers.",404:"Sorry, the page you are looking for could not be found.",403:"Sorry, you are forbidden from accessing this page."}[this.status]}}};const a=(0,n(3744).Z)(i,[["render",function(e,t,n,i,a,l){return(0,r.wg)(),(0,r.iD)("div",null,[(0,r._)("h1",null,(0,o.zw)(l.title),1),(0,r._)("div",null,(0,o.zw)(l.description),1)])}]])},4413:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>f});var r=n(6252),o=n(3577),i={class:"app-operation"},a={key:0,class:"app-widget"};var l=n(9038),s=n(2996),u=n(2236);const c={components:{Link:l.rU,Table:s.Z,Widget:u.Z},props:{items:{type:Object,required:!0},filters:{type:Array,default:function(){return[]}},actions:{type:Array,default:function(){return[]}},widgets:{type:Array,default:function(){return[]}},resource:{type:Object,required:!0}},layout:function(e,t){return e(this.resolveDefaultLayout(),(function(){return t}))}};const f=(0,n(3744).Z)(c,[["render",function(e,t,n,l,s,u){var c=(0,r.up)("Icon"),f=(0,r.up)("Link"),p=(0,r.up)("Widget"),d=(0,r.up)("Table");return(0,r.wg)(),(0,r.iD)("div",null,[(0,r._)("div",i,[(0,r.Wm)(f,{href:n.resource.urls.index,class:"btn btn--primary btn--icon"},{default:(0,r.w5)((function(){return[(0,r.Wm)(c,{name:"arrow-back",class:"btn__icon btn__icon--sm"}),(0,r.Uk)(" "+(0,o.zw)(e.__("Go back to :resource",{resource:n.resource.name})),1)]})),_:1},8,["href"])]),n.widgets.length>0?((0,r.wg)(),(0,r.iD)("div",a,[((0,r.wg)(!0),(0,r.iD)(r.HY,null,(0,r.Ko)(n.widgets,(function(e){return(0,r.wg)(),(0,r.j4)(p,(0,r.dG)(e,{key:e.key}),null,16)})),128))])):(0,r.kq)("",!0),(0,r.Wm)(d,{actions:n.actions,filters:n.filters,items:n.items},null,8,["actions","filters","items"])])}]])},5701:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>a});var r=n(6252);var o=n(6244);const i={props:{model:{type:Object,required:!0},resource:{type:Object,required:!0},parent:{type:Object,required:!0}},layout:function(e,t){return e(this.resolveDefaultLayout(),(function(){return e(o.Z,{model:t.props.model},(function(){return t}))}))}};const a=(0,n(3744).Z)(i,[["render",function(e,t,n,o,i,a){var l=(0,r.up)("FormHandler");return(0,r.wg)(!0),(0,r.iD)(r.HY,null,(0,r.Ko)(n.model.fields,(function(t){return(0,r.wg)(),(0,r.j4)(l,(0,r.dG)(t,{modelValue:e.$parent.form[t.name],"onUpdate:modelValue":function(n){return e.$parent.form[t.name]=n},form:e.$parent.form,key:t.name,name:t.name}),null,16,["modelValue","onUpdate:modelValue","form","name"])})),128)}]])},3707:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>u});var r=n(6252),o=n(3577),i={class:"app-operation"};var a=n(9038),l=n(2996);const s={components:{Link:a.rU,Table:l.Z},props:{items:{type:Object,required:!0},filters:{type:Array,default:function(){return[]}},resource:{type:Object,required:!0},parent:{type:Object,required:!0},field:{type:Object,required:!0}},layout:function(e,t){return e(this.resolveDefaultLayout(),(function(){return t}))}};const u=(0,n(3744).Z)(s,[["render",function(e,t,n,a,l,s){var u=(0,r.up)("Icon"),c=(0,r.up)("Link"),f=(0,r.up)("Table");return(0,r.wg)(),(0,r.iD)("div",null,[(0,r._)("div",i,[(0,r.Wm)(c,{href:"".concat(n.parent.url,"/edit"),class:"btn btn--primary btn--icon"},{default:(0,r.w5)((function(){return[(0,r.Wm)(u,{name:"arrow-back",class:"btn__icon btn__icon--sm"}),(0,r.Uk)(" "+(0,o.zw)(n.resource.model_name),1)]})),_:1},8,["href"])]),(0,r.Wm)(f,{filters:n.filters,items:n.items},null,8,["filters","items"])])}]])},9726:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>h});var r=n(6252),o=n(3577),i={class:"app-operation"},a={class:"app-operation__edit"},l=["aria-label"],s={class:"app-card card"},u={class:"table-responsive"},c={class:"table table--striped table--clear-border table--rounded table--sm"},f={style:{width:"10rem","text-align":"end"}},p=["innerHTML"];const d={components:{Link:n(9038).rU},props:{model:{type:Object,required:!0},resource:{type:Object,required:!0},field:{type:Object,required:!0}},layout:function(e,t){return e(this.resolveDefaultLayout(),(function(){return t}))},methods:{destroy:function(){var e=this;this.$inertia.delete(this.model.url,{onBefore:function(){return confirm(e.__("Are you sure?"))}})}}};const h=(0,n(3744).Z)(d,[["render",function(e,t,n,d,h,y){var v=(0,r.up)("Icon"),m=(0,r.up)("Link");return(0,r.wg)(),(0,r.iD)("div",null,[(0,r._)("div",i,[(0,r.Wm)(m,{href:n.field.url,class:"btn btn--primary btn--icon"},{default:(0,r.w5)((function(){return[(0,r.Wm)(v,{name:"arrow-back",class:"btn__icon btn__icon--sm"}),(0,r.Uk)(" "+(0,o.zw)(n.field.name),1)]})),_:1},8,["href"]),(0,r._)("div",a,[n.model.abilities.delete?((0,r.wg)(),(0,r.iD)("button",{key:0,type:"button",class:"btn btn--icon btn--sm btn--delete","aria-label":e.__("Delete"),onClick:t[0]||(t[0]=function(){return y.destroy&&y.destroy.apply(y,arguments)})},[(0,r.Wm)(v,{class:"btn__icon",name:"delete"})],8,l)):(0,r.kq)("",!0),n.model.abilities.update?((0,r.wg)(),(0,r.j4)(m,{key:1,class:"btn btn--icon btn--sm btn--tertiary",href:"".concat(n.model.url,"/edit"),"aria-label":e.__("Edit")},{default:(0,r.w5)((function(){return[(0,r.Wm)(v,{class:"btn__icon",name:"edit"})]})),_:1},8,["href","aria-label"])):(0,r.kq)("",!0)])]),(0,r._)("div",s,[(0,r._)("div",u,[(0,r._)("table",c,[(0,r._)("tbody",null,[((0,r.wg)(!0),(0,r.iD)(r.HY,null,(0,r.Ko)(n.model.fields,(function(e){return(0,r.wg)(),(0,r.iD)("tr",{key:e.name},[(0,r._)("th",f,(0,o.zw)(e.label),1),(0,r._)("td",null,[(0,r._)("div",{innerHTML:e.formatted_value},null,8,p)])])})),128))])])])])])}]])},9341:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>a});var r=n(6252);var o=n(6244);const i={props:{model:{type:Object,required:!0}},layout:function(e,t){return e(this.resolveDefaultLayout(),(function(){return e(o.Z,{model:t.props.model},(function(){return t}))}))}};const a=(0,n(3744).Z)(i,[["render",function(e,t,n,o,i,a){var l=(0,r.up)("FormHandler");return(0,r.wg)(!0),(0,r.iD)(r.HY,null,(0,r.Ko)(n.model.fields,(function(t){return(0,r.wg)(),(0,r.j4)(l,(0,r.dG)(t,{modelValue:e.$parent.form[t.name],"onUpdate:modelValue":function(n){return e.$parent.form[t.name]=n},form:e.$parent.form,key:t.name,name:t.name}),null,16,["modelValue","onUpdate:modelValue","form","name"])})),128)}]])},9724:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var r=n(6252),o={class:"app-widget"};var i=n(2996),a=n(2236);const l={components:{Table:i.Z,Widget:a.Z},props:{items:{type:Object,required:!0},filters:{type:Array,default:function(){return[]}},actions:{type:Array,default:function(){return[]}},extracts:{type:Array,default:function(){return[]}},widgets:{type:Array,default:function(){return[]}}},layout:function(e,t){return e(this.resolveDefaultLayout(),(function(){return t}))}};const s=(0,n(3744).Z)(l,[["render",function(e,t,n,i,a,l){var s=(0,r.up)("Widget"),u=(0,r.up)("Table");return(0,r.wg)(),(0,r.iD)("div",null,[(0,r._)("div",o,[((0,r.wg)(!0),(0,r.iD)(r.HY,null,(0,r.Ko)(n.widgets,(function(e){return(0,r.wg)(),(0,r.j4)(s,(0,r.dG)(e,{key:e.key}),null,16)})),128))]),(0,r.Wm)(u,{actions:n.actions,extracts:n.extracts,filters:n.filters,items:n.items},null,8,["actions","extracts","filters","items"])])}]])},8186:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>g});var r=n(6252),o=n(3577),i={key:0,class:"app-widget"},a={class:"app-operation"},l={class:"app-operation__edit"},s=["aria-label"],u={class:"app-card card"},c={class:"table-responsive"},f={class:"table table--striped table--clear-border table--rounded table--sm"},p={style:{width:"10rem","text-align":"end"}},d=["innerHTML"];var h=n(9038),y=n(9064),v=n(2236);const m={components:{Actions:y.Z,Link:h.rU,Widget:v.Z},props:{actions:{type:Array,default:function(){return[]}},model:{type:Object,required:!0},widgets:{type:Array,default:function(){return[]}}},layout:function(e,t){return e(this.resolveDefaultLayout(),(function(){return t}))},methods:{destroy:function(){var e=this;this.$inertia.delete(this.model.url,{onBefore:function(){return confirm(e.__("Are you sure?"))}})}}};const g=(0,n(3744).Z)(m,[["render",function(e,t,n,h,y,v){var m=(0,r.up)("Widget"),g=(0,r.up)("Actions"),b=(0,r.up)("Icon"),_=(0,r.up)("Link");return(0,r.wg)(),(0,r.iD)("div",null,[n.widgets.length>0?((0,r.wg)(),(0,r.iD)("div",i,[((0,r.wg)(!0),(0,r.iD)(r.HY,null,(0,r.Ko)(n.widgets,(function(e){return(0,r.wg)(),(0,r.j4)(m,(0,r.dG)({key:e.key},e),null,16)})),128))])):(0,r.kq)("",!0),(0,r._)("div",a,[n.actions.length>0?((0,r.wg)(),(0,r.j4)(g,{key:0,selection:[n.model.id],actions:n.actions,onSuccess:e.clearSelection},null,8,["selection","actions","onSuccess"])):(0,r.kq)("",!0),(0,r._)("div",l,[n.model.abilities.delete?((0,r.wg)(),(0,r.iD)("button",{key:0,type:"button",class:"btn btn--icon btn--sm btn--delete","aria-label":e.__("Delete"),onClick:t[0]||(t[0]=function(){return v.destroy&&v.destroy.apply(v,arguments)})},[(0,r.Wm)(b,{class:"btn__icon",name:"delete"})],8,s)):(0,r.kq)("",!0),n.model.abilities.update?((0,r.wg)(),(0,r.j4)(_,{key:1,class:"btn btn--icon btn--sm btn--tertiary",href:"".concat(n.model.url,"/edit"),"aria-label":e.__("Edit")},{default:(0,r.w5)((function(){return[(0,r.Wm)(b,{class:"btn__icon",name:"edit"})]})),_:1},8,["href","aria-label"])):(0,r.kq)("",!0)])]),(0,r._)("div",u,[(0,r._)("div",c,[(0,r._)("table",f,[(0,r._)("tbody",null,[((0,r.wg)(!0),(0,r.iD)(r.HY,null,(0,r.Ko)(n.model.fields,(function(e){return(0,r.wg)(),(0,r.iD)("tr",{key:e.name},[(0,r._)("th",p,(0,o.zw)(e.label),1),(0,r._)("td",null,[(0,r._)("div",{innerHTML:e.formatted_value},null,8,d)])])})),128))])])])])])}]])},3218:(e,t,n)=>{var r={"./Dashboard":6420,"./Dashboard.vue":6420,"./Error":9822,"./Error.vue":9822,"./Extracts/Index":4413,"./Extracts/Index.vue":4413,"./Relations/Form":5701,"./Relations/Form.vue":5701,"./Relations/Index":3707,"./Relations/Index.vue":3707,"./Relations/Show":9726,"./Relations/Show.vue":9726,"./Resources/Form":9341,"./Resources/Form.vue":9341,"./Resources/Index":9724,"./Resources/Index.vue":9724,"./Resources/Show":8186,"./Resources/Show.vue":8186};function o(e){var t=i(e);return n(t)}function i(e){if(!n.o(r,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return r[e]}o.keys=function(){return Object.keys(r)},o.resolve=i,e.exports=o,o.id=3218},4654:()=>{},8593:e=>{"use strict";e.exports=JSON.parse('{"name":"axios","version":"0.21.4","description":"Promise based HTTP client for the browser and node.js","main":"index.js","scripts":{"test":"grunt test","start":"node ./sandbox/server.js","build":"NODE_ENV=production grunt build","preversion":"npm test","version":"npm run build && grunt version && git add -A dist && git add CHANGELOG.md bower.json package.json","postversion":"git push && git push --tags","examples":"node ./examples/server.js","coveralls":"cat coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js","fix":"eslint --fix lib/**/*.js"},"repository":{"type":"git","url":"https://github.com/axios/axios.git"},"keywords":["xhr","http","ajax","promise","node"],"author":"Matt Zabriskie","license":"MIT","bugs":{"url":"https://github.com/axios/axios/issues"},"homepage":"https://axios-http.com","devDependencies":{"coveralls":"^3.0.0","es6-promise":"^4.2.4","grunt":"^1.3.0","grunt-banner":"^0.6.0","grunt-cli":"^1.2.0","grunt-contrib-clean":"^1.1.0","grunt-contrib-watch":"^1.0.0","grunt-eslint":"^23.0.0","grunt-karma":"^4.0.0","grunt-mocha-test":"^0.13.3","grunt-ts":"^6.0.0-beta.19","grunt-webpack":"^4.0.2","istanbul-instrumenter-loader":"^1.0.0","jasmine-core":"^2.4.1","karma":"^6.3.2","karma-chrome-launcher":"^3.1.0","karma-firefox-launcher":"^2.1.0","karma-jasmine":"^1.1.1","karma-jasmine-ajax":"^0.1.13","karma-safari-launcher":"^1.0.0","karma-sauce-launcher":"^4.3.6","karma-sinon":"^1.0.5","karma-sourcemap-loader":"^0.3.8","karma-webpack":"^4.0.2","load-grunt-tasks":"^3.5.2","minimist":"^1.2.0","mocha":"^8.2.1","sinon":"^4.5.0","terser-webpack-plugin":"^4.2.3","typescript":"^4.0.5","url-search-params":"^0.10.0","webpack":"^4.44.2","webpack-dev-server":"^3.11.0"},"browser":{"./lib/adapters/http.js":"./lib/adapters/xhr.js"},"jsdelivr":"dist/axios.min.js","unpkg":"dist/axios.min.js","typings":"./index.d.ts","dependencies":{"follow-redirects":"^1.14.0"},"bundlesize":[{"path":"./dist/axios.min.js","threshold":"5kB"}]}')}},e=>{var t=t=>e(e.s=t);e.O(0,[143,660],(()=>(t(506),t(5423))));e.O()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,